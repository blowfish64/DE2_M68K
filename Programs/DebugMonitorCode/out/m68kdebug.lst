680x0 MACRO ASSEMBLER   Version 5.00   (c) 1992-2005 Peter J. Fondse

Date: 17 Jan 2017      Time: 21:48:19          Source: C:\M68KV6.0 - DE2 - 640BY480 - FOR 465 STUDENTS\PROGRAMS\DEBUGMONITORCODE\OUT\M68KDEBUG.SRC

                       1          section   code
                       2   ; C:\M68KV6.0 - DE2 - 640BY480 - FOR 465 STUDENTS\PROGRAMS\DEBUGMONITORCODE\FLASHROUTINES.C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                       3   ; #include "DebugMonitor.h"
                       4   ; /* erase chip by writing to address with data*/
                       5   ; void EraseFlashChip(void)
                       6   ; {
                       7   _EraseFlashChip:
00000000  4E75         8          rts
                       9   ; }
                      10   ; void FlashReset(void)
                      11   ; {
                      12   _FlashReset:
00000002  4E75        13          rts
                      14   ; }
                      15   ; /* erase sector by writing to address with data*/
                      16   ; void FlashSectorErase(int SectorAddress)
                      17   ; {
                      18   _FlashSectorErase:
00000004  4E56 0000   19          link      A6,#0
00000008  4E5E        20          unlk      A6
0000000A  4E75        21          rts
                      22   ; }
                      23   ; /* program chip by writing to address with data*/
                      24   ; void FlashProgram(unsigned int AddressOffset, int ByteData)		// write a byte to the specified address (assumed it has been erased first)
                      25   ; {
                      26   _FlashProgram:
0000000C  4E56 0000   27          link      A6,#0
00000010  4E5E        28          unlk      A6
00000012  4E75        29          rts
                      30   ; }
                      31   ; /* program chip to read a byte */
                      32   ; unsigned char FlashRead(unsigned int AddressOffset)		// read a byte from the specified address (assumed it has been erased first)
                      33   ; {
                      34   _FlashRead:
00000014  4E56 0000   35          link      A6,#0
                      36   ; return 0 ; 	// dummy return to it will compile before you have written your code
00000018  4200        37          clr.b     D0
0000001A  4E5E        38          unlk      A6
0000001C  4E75        39          rts
                      40   ; }
                      41   
                      42   ; CSTART.ASM  -  C startup-code
0000001E              43                   align
                      44   
00000000              45                   org $00000000          ;start of rom based vector table
00000000  0088 0000   46   InitialSP       dc.l $00880000         ;initial supervisor state stack pointer(stack decrements first before being used
00000004  0000 0400   47   InitialPC       dc.l start             ;address of 1st instruction of program after a reset
00000008  0000 081E   48   BusError        dc.l E_BErro           ;bus error - stop program
0000000C  0000 0830   49   AddressError    dc.l E_AErro           ;address error - stop program
00000010  0000 0842   50   IllegalInstr    dc.l E_IInst           ;illegal instruction - stop program
00000014  0000 0854   51   DividebyZero    dc.l E_DZero           ;divide by zero error - stop program
00000018  0000 0866   52   Check           dc.l E_Check           ;Check instruction - stop program
0000001C  0000 0878   53   TrapV           dc.l E_Trapv           ;Trapv instruction - stop program
00000020  0000 088A   54   Privilege       dc.l E_Priv            ;privilige violation - stop program
00000024  0000 089C   55   Trace           dc.l E_Trace           ;stop on trace
00000028  0000 08AE   56   Line1010emul    dc.l E_1010            ;1010 instructions stop
0000002C  0000 08C0   57   Line1111emul    dc.l E_1111            ;1111 instructions stop
00000030  0000 08D2   58   Unassigned1     dc.l E_Unnas1           ;unassigned vector
00000034  0000 08D2   59   Unassigned2     dc.l E_Unnas2           ;unassigned vector
00000038  0000 08D2   60   Unassigned3     dc.l E_Unnas3           ;unassigned vector
0000003C  0000 08D2   61   Uninit_IRQ      dc.l E_UnitI           ;uninitialised interrupt
00000040  0000 08D2   62   Unassigned4     dc.l E_Unnas4           ;unassigned vector
00000044  0000 08D2   63   Unassigned5     dc.l E_Unnas5           ;unassigned vector
00000048  0000 08D2   64   Unassigned6     dc.l E_Unnas6           ;unassigned vector
0000004C  0000 08D2   65   Unassigned7     dc.l E_Unnas7           ;unassigned vector
00000050  0000 08D2   66   Unassigned8     dc.l E_Unnas8           ;unassigned vector
00000054  0000 08D2   67   Unassigned9     dc.l E_Unnas9           ;unassigned vector
00000058  0000 08D2   68   Unassigned10    dc.l E_Unnas10           ;unassigned vector
0000005C  0000 08D2   69   Unassigned11    dc.l E_Unnas11           ;unassigned vector
00000060  0000 08D2   70   SpuriousIRQ     dc.l E_Spuri           ;stop on spurious irq
                      71   *
                      72   *
00000064  0000 04B6   73   Level1IRQ       dc.l Level1RamISR
00000068  0000 04C8   74   Level2IRQ       dc.l Level2RamISR
0000006C  0000 04DA   75   Level3IRQ       dc.l Level3RamISR
00000070  0000 04EC   76   Level4IRQ       dc.l Level4RamISR
00000074  0000 04FE   77   Level5IRQ       dc.l Level5RamISR
00000078  0000 0608   78   Level6IRQ       dc.l Level6RamISR
0000007C  0000 061A   79   Level7IRQ       dc.l Level7RamISR
                      80   *
                      81   *
00000080  0000 062C   82   Trap0           dc.l Trap0RamISR        ; User installed trap handler
00000084  0000 063E   83   Trap1           dc.l Trap1RamISR        ; User installed trap handler
00000088  0000 0650   84   Trap2           dc.l Trap2RamISR        ; User installed trap handler
0000008C  0000 0662   85   Trap3           dc.l Trap3RamISR        ; User installed trap handler
00000090  0000 0674   86   Trap4           dc.l Trap4RamISR        ; User installed trap handler
00000094  0000 0686   87   Trap5           dc.l Trap5RamISR        ; User installed trap handler
00000098  0000 0698   88   Trap6           dc.l Trap6RamISR        ; User installed trap handler
0000009C  0000 06AA   89   Trap7           dc.l Trap7RamISR        ; User installed trap handler
000000A0  0000 06BC   90   Trap8           dc.l Trap8RamISR        ; User installed trap handler
000000A4  0000 06CE   91   Trap9           dc.l Trap9RamISR        ; User installed trap handler
000000A8  0000 06E0   92   Trap10          dc.l Trap10RamISR       ; User installed trap handler
000000AC  0000 06F2   93   Trap11          dc.l Trap11RamISR       ; User installed trap handler
000000B0  0000 0704   94   Trap12          dc.l Trap12RamISR       ; User installed trap handler
000000B4  0000 0716   95   Trap13          dc.l Trap13RamISR       ; User installed trap handler
000000B8  0000 0728   96   Trap14          dc.l Trap14RamISR       ; User installed trap handler
000000BC  0000 0818   97   Trap15          dc.l Trap15RamISR       ; User installed trap handler
                      98   
                      99   *
                     100   * Other vectors 64-255 are users vectors for autovectored IO device (not implemented in TG68)
                     101   *
                     102   
00000400             103                   org       $00000400
                     104   
00000400  46FC 2700  105   start:          move.w     #$2700,SR             set interrupts to disable until later
                     106   
                     107   *************************************************************************************
                     108   ** add some 68000 instruction to read and write to memory, IO etc. This doesn't do anything
                     109   ** important, it just creates read and write bus cycles to specific addresses which
                     110   ** help with debugging hardware in Quartus simulations
                     111   **************************************************************************************
                     112   
                     113   * graphics
                     114   *	move.w	  #$0001,$FF100000	x1
                     115   *	move.w	  #$0001,$FF100002	y1
                     116   *	move.w	  #$FFFF,$FF100008	colour
                     117   *	move.w	  #$ffFF,$FF100010	font reg
                     118   *	move.w	  #$ffFF,$FF100012	font reg
                     119   *	move.w	  #$ffFF,$FF100014	font reg
                     120   *	move.w	  #$ffFF,$FF100016	font reg
                     121   *	move.w	  #$ffFF,$FF100018	font reg
                     122   *	move.w	  #$ffFF,$FF10001a	font reg
                     123   *	move.w	  #$ffFF,$FF10001c	font reg
                     124   *	move.w	  #$0005,$FF10000A	command char
                     125   
                     126   
00000404  13FC 0055  127                   move.b     #$55,$F0000000       write to memory
00000408  F000 0000 
0000040C  1039 F000  128                   move.b     $F0000000,d0         read it back
00000410  0000      
00000412  13FC 0055  129                   move.b     #$55,$01000000       write to the flash (ignored without proper protocol)
00000416  0100 0000 
0000041A  1039 0100  130                   move.b     $01000000,d0         read it back
0000041E  0000      
00000420  23FC 1122  131                   move.l     #$11223344,$00860000       write 32 bits, to memory
00000424  3344 0086 
00000428  0000      
0000042A  2039 0086  132                   move.l     $00860000,d0         read 32 bits back
0000042E  0000      
00000430  13FC 0000  133                   move.b     #0,$00400000         write to the output ports
00000434  0040 0000 
00000438  13FC 0000  134                   move.b     #0,$00400002         write to the output ports
0000043C  0040 0002 
00000440  13FC 0000  135                   move.b     #0,$00400004         write to the output ports
00000444  0040 0004 
00000448  13FC 0000  136                   move.b     #0,$00400006         write to the output ports
0000044C  0040 0006 
00000450  13FC 0000  137                   move.b     #0,$00400008         write to the output ports
00000454  0040 0008 
00000458  13FC 0000  138                   move.b     #0,$00400010         write to the hex display ports
0000045C  0040 0010 
00000460  13FC 0000  139                   move.b     #0,$00400012         write to the hex display ports
00000464  0040 0012 
00000468  13FC 0000  140                   move.b     #0,$00400020         write to the LCD
0000046C  0040 0020 
00000470  13FC 0000  141                   move.b     #0,$00400022         write to the LCD
00000474  0040 0022 
00000478  13FC 0000  142                   move.b     #0,$00400030         write to the Timer1 Data
0000047C  0040 0030 
00000480  13FC 0000  143                   move.b     #0,$00400032         write to the Timer1 Control
00000484  0040 0032 
                     144   
                     145                   ; program DMA
00000488  23FC 0000  146                   move.l     #$00000000,$FF000000     write to DMA From address
0000048C  0000 FF00 
00000490  0000      
00000492  23FC 0086  147                   move.l     #$00860000,$FF000004     write to DMA to
00000496  0000 FF00 
0000049A  0004      
0000049C  23FC 0000  148                   move.l     #$00000010,$FF000008     count = hex 10 (16) words
000004A0  0010 FF00 
000004A4  0008      
000004A6  33FC 0014  149                   move.w     #%000000000010100,$FF00000C             go DMA increment from/to by 2, word trasnfer
000004AA  FF00 000C 
                     150   
                     151   *************************************************************************************
                     152   * Copy initialised variables to Ram at startup
                     153   ************************************************************************************
                     154   
000004AE  4EB9 0000  155   mainloop        jsr       _main
000004B2  2A4C      
000004B4  60F8       156                   bra       mainloop
                     157   
                     158   *********************************************************************************************************
                     159   * Code to call Ram Based Interrupt handler and other exeception handler code
                     160   *********************************************************************************************************
000004B6  48E7 FFFE  161   Level1RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004BA  2079 0084  162                   move.l    VL1IRQ,a0               get ram based address into a0
000004BE  0064      
000004C0  4E90       163                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004C2  4CDF 7FFF  164                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004C6  4E73       165                   rte
000004C8  48E7 FFFE  166   Level2RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004CC  2079 0084  167                   move.l    VL2IRQ,a0               get ram based address into a0
000004D0  0068      
000004D2  4E90       168                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004D4  4CDF 7FFF  169                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004D8  4E73       170                   rte
000004DA  48E7 FFFE  171   Level3RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004DE  2079 0084  172                   move.l    VL3IRQ,a0               get ram based address into a0
000004E2  006C      
000004E4  4E90       173                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004E6  4CDF 7FFF  174                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004EA  4E73       175                   rte
000004EC  48E7 FFFE  176   Level4RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004F0  2079 0084  177                   move.l    VL4IRQ,a0               get ram based address into a0
000004F4  0070      
000004F6  4E90       178                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004F8  4CDF 7FFF  179                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004FC  4E73       180                   rte
                     181   
                     182   * Trace trap Handler
                     183   
                     184   Level5RamISR
                     185   *
                     186   **         Copy 68000 registers from debug monitor Variables,
                     187   *
                     188   *
000004FE  23FC 0000  189                   move.l    #1,_Trace              switch on Trace Mode
00000502  0001 0084 
00000506  00D6      
00000508  13FC 0000  190                   move.b    #$0,$0040000A          turn off a trace exception so we don't when generate a trace when disassembling instruction in the register dump (disassembling causes access to use program)
0000050C  0040 000A 
00000510  33DF 0084  191                   move.w    (sp)+,_SR              get at the users status register pointed to by stack pointer and copy
00000514  0126      
00000516  23DF 0084  192                   move.l    (sp)+,_PC              get at the users program counter and copy
0000051A  011A      
                     193   *
0000051C  23CF 0084  194                   move.l    SP,_SSP                copy system stack pointer to debug monitor variable
00000520  011E      
00000522  23C0 0084  195                   move.l    d0,_d0
00000526  00DE      
00000528  23C1 0084  196                   move.l    d1,_d1
0000052C  00E2      
0000052E  23C2 0084  197                   move.l    d2,_d2
00000532  00E6      
00000534  23C3 0084  198                   move.l    d3,_d3
00000538  00EA      
0000053A  23C4 0084  199                   move.l    d4,_d4
0000053E  00EE      
00000540  23C5 0084  200                   move.l    d5,_d5
00000544  00F2      
00000546  23C6 0084  201                   move.l    d6,_d6
0000054A  00F6      
0000054C  23C7 0084  202                   move.l    d7,_d7
00000550  00FA      
                     203   *
00000552  23C8 0084  204                   move.l    a0,_a0
00000556  00FE      
00000558  23C9 0084  205                   move.l    a1,_a1
0000055C  0102      
0000055E  23CA 0084  206                   move.l    a2,_a2
00000562  0106      
00000564  23CB 0084  207                   move.l    a3,_a3
00000568  010A      
0000056A  23CC 0084  208                   move.l    a4,_a4
0000056E  010E      
00000570  23CD 0084  209                   move.l    a5,_a5
00000574  0112      
00000576  23CE 0084  210                   move.l    a6,_a6
0000057A  0116      
0000057C  4E68       211                   move.l    usp,a0
0000057E  23C8 0084  212                   move.l    a0,_USP
00000582  0122      
                     213   *
00000584  2079 0084  214                   move.l    VL5IRQ,a0              get ram based address into a0, trace exception for next instruction will be generated in Menu SPACE command
00000588  0074      
0000058A  4E90       215                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     216   
                     217   ** After trace, reload 68000 registers with new values before continuing
                     218   
0000058C  2039 0084  219                   move.l   _d0,d0
00000590  00DE      
00000592  2239 0084  220                   move.l   _d1,d1
00000596  00E2      
00000598  2439 0084  221                   move.l   _d2,d2
0000059C  00E6      
0000059E  2639 0084  222                   move.l   _d3,d3
000005A2  00EA      
000005A4  2839 0084  223                   move.l   _d4,d4
000005A8  00EE      
000005AA  2A39 0084  224                   move.l   _d5,d5
000005AE  00F2      
000005B0  2C39 0084  225                   move.l   _d6,d6
000005B4  00F6      
000005B6  2E39 0084  226                   move.l   _d7,d7
000005BA  00FA      
                     227   
000005BC  2079 0084  228                   move.l   _USP,a0
000005C0  0122      
000005C2  4E60       229                   move.l   a0,USP                     load user stack pointer
000005C4  2079 0084  230                   move.l   _a0,a0
000005C8  00FE      
000005CA  2279 0084  231                   move.l   _a1,a1
000005CE  0102      
000005D0  2479 0084  232                   move.l   _a2,a2
000005D4  0106      
000005D6  2679 0084  233                   move.l   _a3,a3
000005DA  010A      
000005DC  2879 0084  234                   move.l   _a4,a4
000005E0  010E      
000005E2  2A79 0084  235                   move.l   _a5,a5
000005E6  0112      
000005E8  2C79 0084  236                   move.l   _a6,a6
000005EC  0116      
                     237   
000005EE  2E79 0084  238                   move.l   _SSP,sp
000005F2  011E      
000005F4  2F39 0084  239                   move.l   _PC,-(sp)
000005F8  011A      
000005FA  3F39 0084  240                   move.w   _SR,-(sp)
000005FE  0126      
00000600  11F8 0074  241                   move.b    $00000074,$0	          read trace exception vector after accessing disassembly to reset the trace request causes by disassembling program above
00000604  0000      
00000606  4E73       242                   rte
                     243   
                     244   * address trap handler
                     245   
00000608  48E7 FFFE  246   Level6RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000060C  2079 0084  247                   move.l    VL6IRQ,a0               get ram based address into a0
00000610  0078      
00000612  4E90       248                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
00000614  4CDF 7FFF  249                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000618  4E73       250                   rte
                     251   
0000061A  48E7 FFFE  252   Level7RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000061E  2079 0084  253                   move.l    VL7IRQ,a0               get ram based address into a0
00000622  007C      
00000624  4E90       254                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
00000626  4CDF 7FFF  255                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000062A  4E73       256                   rte
                     257   
                     258   
                     259   ********************************************************************************************************
                     260   * Ram based Trap handler and other exeception handler code
                     261   *********************************************************************************************************
                     262   
0000062C  48E7 FFFE  263   Trap0RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000630  2079 0084  264                   move.l    VTrap0,a0                get ram based address into a0
00000634  0080      
00000636  4E90       265                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000638  4CDF 7FFF  266                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000063C  4E73       267                   rte
                     268   
0000063E  48E7 FFFE  269   Trap1RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000642  2079 0084  270                   move.l    VTrap1,a0                get ram based address into a0
00000646  0084      
00000648  4E90       271                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000064A  4CDF 7FFF  272                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000064E  4E73       273                   rte
                     274   
00000650  48E7 FFFE  275   Trap2RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000654  2079 0084  276                   move.l    VTrap2,a0                get ram based address into a0
00000658  0088      
0000065A  4E90       277                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000065C  4CDF 7FFF  278                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000660  4E73       279                   rte
                     280   
00000662  48E7 FFFE  281   Trap3RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000666  2079 0084  282                   move.l    VTrap3,a0                get ram based address into a0
0000066A  008C      
0000066C  4E90       283                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000066E  4CDF 7FFF  284                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000672  4E73       285                   rte
                     286   
00000674  48E7 FFFE  287   Trap4RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000678  2079 0084  288                   move.l    VTrap4,a0                get ram based address into a0
0000067C  0090      
0000067E  4E90       289                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000680  4CDF 7FFF  290                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000684  4E73       291                   rte
                     292   
00000686  48E7 FFFE  293   Trap5RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000068A  2079 0084  294                   move.l    VTrap5,a0                get ram based address into a0
0000068E  0094      
00000690  4E90       295                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000692  4CDF 7FFF  296                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000696  4E73       297                   rte
                     298   
00000698  48E7 FFFE  299   Trap6RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000069C  2079 0084  300                   move.l    VTrap6,a0                get ram based address into a0
000006A0  0098      
000006A2  4E90       301                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006A4  4CDF 7FFF  302                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006A8  4E73       303                   rte
                     304   
000006AA  48E7 FFFE  305   Trap7RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006AE  2079 0084  306                   move.l    VTrap7,a0                get ram based address into a0
000006B2  009C      
000006B4  4E90       307                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006B6  4CDF 7FFF  308                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006BA  4E73       309                   rte
                     310   
000006BC  48E7 FFFE  311   Trap8RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006C0  2079 0084  312                   move.l    VTrap8,a0                get ram based address into a0
000006C4  00A0      
000006C6  4E90       313                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006C8  4CDF 7FFF  314                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006CC  4E73       315                   rte
                     316   
000006CE  48E7 FFFE  317   Trap9RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006D2  2079 0084  318                   move.l    VTrap9,a0                get ram based address into a0
000006D6  00A4      
000006D8  4E90       319                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006DA  4CDF 7FFF  320                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006DE  4E73       321                   rte
                     322   
000006E0  48E7 FFFE  323   Trap10RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006E4  2079 0084  324                   move.l    VTrap10,a0                get ram based address into a0
000006E8  00A8      
000006EA  4E90       325                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006EC  4CDF 7FFF  326                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006F0  4E73       327                   rte
                     328   
000006F2  48E7 FFFE  329   Trap11RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006F6  2079 0084  330                   move.l    VTrap11,a0                get ram based address into a0
000006FA  00AC      
000006FC  4E90       331                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006FE  4CDF 7FFF  332                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000702  4E73       333                   rte
                     334   
00000704  48E7 FFFE  335   Trap12RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000708  2079 0084  336                   move.l    VTrap12,a0                get ram based address into a0
0000070C  00B0      
0000070E  4E90       337                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000710  4CDF 7FFF  338                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000714  4E73       339                   rte
                     340   
00000716  48E7 FFFE  341   Trap13RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000071A  2079 0084  342                   move.l    VTrap13,a0                get ram based address into a0
0000071E  00B4      
00000720  4E90       343                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000722  4CDF 7FFF  344                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000726  4E73       345                   rte
                     346   
                     347   Trap14RamISR    ;Break Point Handler
                     348   *
                     349   **         Copy 68000 registers from debug monitor Variables
                     350   *
00000728  23FC 0000  351                   move.l    #1,_Trace      switch on Trace Mode
0000072C  0001 0084 
00000730  00D6      
00000732  33DF 0084  352                   move.w    (sp)+,_SR       get at the users status register pointed to by stack pointer and copy
00000736  0126      
00000738  23DF 0084  353                   move.l    (sp)+,_PC      get at the users program counter and copy
0000073C  011A      
                     354   *
0000073E  23C0 0084  355                   move.l    d0,_d0
00000742  00DE      
00000744  23C1 0084  356                   move.l    d1,_d1
00000748  00E2      
0000074A  23C2 0084  357                   move.l    d2,_d2
0000074E  00E6      
00000750  23C3 0084  358                   move.l    d3,_d3
00000754  00EA      
00000756  23C4 0084  359                   move.l    d4,_d4
0000075A  00EE      
0000075C  23C5 0084  360                   move.l    d5,_d5
00000760  00F2      
00000762  23C6 0084  361                   move.l    d6,_d6
00000766  00F6      
00000768  23C7 0084  362                   move.l    d7,_d7
0000076C  00FA      
                     363   *
0000076E  23C8 0084  364                   move.l    a0,_a0
00000772  00FE      
00000774  23C9 0084  365                   move.l    a1,_a1
00000778  0102      
0000077A  23CA 0084  366                   move.l    a2,_a2
0000077E  0106      
00000780  23CB 0084  367                   move.l    a3,_a3
00000784  010A      
00000786  23CC 0084  368                   move.l    a4,_a4
0000078A  010E      
0000078C  23CD 0084  369                   move.l    a5,_a5
00000790  0112      
00000792  23CE 0084  370                   move.l    a6,_a6
00000796  0116      
00000798  4E68       371                   move.l    USP,a0
0000079A  23C8 0084  372                   move.l    a0,_USP
0000079E  0122      
                     373   *
000007A0  2079 0084  374                   move.l    VTrap14,a0             get ram based address into a0
000007A4  00B8      
000007A6  4E90       375                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     376   
                     377   ** After breakpoint reload 68000 registers with new values before continuing
                     378   
                     379   *                move.b    #$ff,$0040000A     generate a trace exception for the next instruction
000007A8  2039 0084  380                   move.l   _d0,d0
000007AC  00DE      
000007AE  2239 0084  381                   move.l   _d1,d1
000007B2  00E2      
000007B4  2439 0084  382                   move.l   _d2,d2
000007B8  00E6      
000007BA  2639 0084  383                   move.l   _d3,d3
000007BE  00EA      
000007C0  2839 0084  384                   move.l   _d4,d4
000007C4  00EE      
000007C6  2A39 0084  385                   move.l   _d5,d5
000007CA  00F2      
000007CC  2C39 0084  386                   move.l   _d6,d6
000007D0  00F6      
000007D2  2E39 0084  387                   move.l   _d7,d7
000007D6  00FA      
                     388   
000007D8  2079 0084  389                   move.l   _USP,a0
000007DC  0122      
000007DE  4E60       390                   move.l   a0,USP        load user stack pointer A7
000007E0  2079 0084  391                   move.l   _a0,a0
000007E4  00FE      
000007E6  2279 0084  392                   move.l   _a1,a1
000007EA  0102      
000007EC  2479 0084  393                   move.l   _a2,a2
000007F0  0106      
000007F2  2679 0084  394                   move.l   _a3,a3
000007F6  010A      
000007F8  2879 0084  395                   move.l   _a4,a4
000007FC  010E      
000007FE  2A79 0084  396                   move.l   _a5,a5
00000802  0112      
00000804  2C79 0084  397                   move.l   _a6,a6
00000808  0116      
                     398   
0000080A  2F39 0084  399                   move.l   _PC,-(sp)
0000080E  011A      
00000810  3F39 0084  400                   move.w   _SR,-(sp)
00000814  0126      
00000816  4E73       401                   rte
                     402   
00000818  4EF9 0000  403   Trap15RamISR    jmp     _CallDebugMonitor
0000081C  23D4      
                     404   *                movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                     405   *                move.l    VTrap15,a0                get ram based address into a0
                     406   *                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                     407   *                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                     408   *                rte
                     409   
                     410   *********************************************************************************************************
                     411   *Default exception handler for everything without a specific handler
                     412   *********************************************************************************************************
                     413   
                     414   *
                     415   **              Jump here for each unhandled exception
                     416   **              If you need to, MAKE SURE YOU SAVE ALL IMPORTANT REGISTERS AND RESTORE THEM BEFORE RETURNING (IF APPROPRIATE)
                     417   *
                     418   
0000081E  48E7 FFFE  419   E_BErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000822  2079 0084  420                   move.l    VBusError,a0            get ram based address into a0
00000826  0008      
00000828  4E90       421                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000082A  4CDF 7FFF  422                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000082E  4E73       423                   rte
00000830  48E7 FFFE  424   E_AErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000834  2079 0084  425                   move.l    VAddressError,a0        get ram based address into a0
00000838  000C      
0000083A  4E90       426                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000083C  4CDF 7FFF  427                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000840  4E73       428                   rte
00000842  48E7 FFFE  429   E_IInst         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000846  2079 0084  430                   move.l    VIllegalInstr,a0        get ram based address into a0
0000084A  0010      
0000084C  4E90       431                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000084E  4CDF 7FFF  432                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000852  4E73       433                   rte
00000854  48E7 FFFE  434   E_DZero         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000858  2079 0084  435                   move.l    VDividebyZero,a0        get ram based address into a0
0000085C  0014      
0000085E  4E90       436                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000860  4CDF 7FFF  437                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000864  4E73       438                   rte
00000866  48E7 FFFE  439   E_Check         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000086A  2079 0084  440                   move.l    VCheck,a0               get ram based address into a0
0000086E  0018      
00000870  4E90       441                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000872  4CDF 7FFF  442                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000876  4E73       443                   rte
00000878  48E7 FFFE  444   E_Trapv         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000087C  2079 0084  445                   move.l    VTrapV,a0               get ram based address into a0
00000880  001C      
00000882  4E90       446                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000884  4CDF 7FFF  447                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000888  4E73       448                   rte
0000088A  48E7 FFFE  449   E_Priv          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000088E  2079 0084  450                   move.l    VPrivilege,a0           get ram based address into a0
00000892  0020      
00000894  4E90       451                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000896  4CDF 7FFF  452                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000089A  4E73       453                   rte
0000089C  48E7 FFFE  454   E_Trace         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000008A0  2079 0084  455                   move.l    VTrace,a0               get ram based address into a0
000008A4  0024      
000008A6  4E90       456                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000008A8  4CDF 7FFF  457                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008AC  4E73       458                   rte
000008AE  48E7 FFFE  459   E_1010          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000008B2  2079 0084  460                   move.l    VLine1010emul,a0        get ram based address into a0
000008B6  0028      
000008B8  4E90       461                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000008BA  4CDF 7FFF  462                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008BE  4E73       463                   rte
000008C0  48E7 FFFE  464   E_1111          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000008C4  2079 0084  465                   move.l    VLine1111emul,a0        get ram based address into a0
000008C8  002C      
000008CA  4E90       466                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000008CC  4CDF 7FFF  467                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008D0  4E73       468                   rte
                     469   E_Unnas1
                     470   E_Unnas2
                     471   E_Unnas3
                     472   E_UnitI
                     473   E_Unnas4
                     474   E_Unnas5
                     475   E_Unnas6
                     476   E_Unnas7
                     477   E_Unnas8
                     478   E_Unnas9
                     479   E_Unnas10
                     480   E_Unnas11
                     481   E_Spuri
000008D2  60FE       482   _stop            bra _stop                         stop
                     483   ***************************************************************************************************
                     484   * Go() function in debug monitor
                     485   ***************************************************************************************************
                     486   _go
000008D4  2E79 0084  487                   move.l   _SSP,a7        load system stack pointer (remember we are in supervisor mode when running this so a7 is the System stack pointer)
000008D8  011E      
000008DA  2F39 0084  488                   move.l   _PC,-(sp)      copy debug monitor PC variable to the stack
000008DE  011A      
000008E0  3F39 0084  489                   move.w   _SR,-(sp)      copy debug monitor status reg to the stack
000008E4  0126      
                     490   
000008E6  1038 0078  491                   move.b   $00000078,d0  remove any spurious address exception arising after power on
000008EA  2039 0084  492                   move.l   _d0,d0
000008EE  00DE      
000008F0  2239 0084  493                   move.l   _d1,d1
000008F4  00E2      
000008F6  2439 0084  494                   move.l   _d2,d2
000008FA  00E6      
000008FC  2639 0084  495                   move.l   _d3,d3
00000900  00EA      
00000902  2839 0084  496                   move.l   _d4,d4
00000906  00EE      
00000908  2A39 0084  497                   move.l   _d5,d5
0000090C  00F2      
0000090E  2C39 0084  498                   move.l   _d6,d6
00000912  00F6      
00000914  2E39 0084  499                   move.l   _d7,d7
00000918  00FA      
                     500   
0000091A  2079 0084  501                   move.l   _USP,a0
0000091E  0122      
00000920  4E60       502                   move.l   a0,USP        load user stack pointer (remember we are in supervisor mode when running this, so a7 is the System stack pointer)
00000922  2079 0084  503                   move.l   _a0,a0
00000926  00FE      
00000928  2279 0084  504                   move.l   _a1,a1
0000092C  0102      
0000092E  2479 0084  505                   move.l   _a2,a2
00000932  0106      
00000934  2679 0084  506                   move.l   _a3,a3
00000938  010A      
0000093A  2879 0084  507                   move.l   _a4,a4
0000093E  010E      
00000940  2A79 0084  508                   move.l   _a5,a5
00000944  0112      
00000946  2C79 0084  509                   move.l   _a6,a6
0000094A  0116      
0000094C  4E73       510                   rte                    load the status reg and PC from the stack and commence running
                     511                                          *used to be rte but this didn't load the status byte
                     512   
                     513   
                     514   ; C:\M68KV6.0 - DE2 - 640BY480 - FOR 465 STUDENTS\PROGRAMS\DEBUGMONITORCODE\M68KDEBUG.C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                     515   ; #include "DebugMonitor.h"
                     516   ; /**************************************************************
                     517   ; * 68 Debug Monitor + Disassembler
                     518   ; * Copyright Paul Davies 2014
                     519   ; ***************************************************************
                     520   ; /******************************************************************/
                     521   ; /* IMPORTANT DO NOT INITIALISE GLOBAL VARIABLES - DO IT in MAIN() */
                     522   ; /* IMPORTANT DO NOT INITIALISE GLOBAL VARIABLES - DO IT in MAIN() */
                     523   ; /* IMPORTANT DO NOT INITIALISE GLOBAL VARIABLES - DO IT in MAIN() */
                     524   ; /* IMPORTANT DO NOT INITIALISE GLOBAL VARIABLES - DO IT in MAIN() */
                     525   ; /* IMPORTANT DO NOT INITIALISE GLOBAL VARIABLES - DO IT in MAIN() */
                     526   ; /* IMPORTANT DO NOT INITIALISE GLOBAL VARIABLES - DO IT in MAIN() */
                     527   ; /* IMPORTANT DO NOT INITIALISE GLOBAL VARIABLES - DO IT in MAIN() */
                     528   ; /******************************************************************/
                     529   ; unsigned int i, x, y, z, PortA_Count;
                     530   ; int     Trace, GoFlag;                       // used in tracing/single stepping
                     531   ; // 68000 register dump and preintialise value (these can be changed by the user program when it is running, e.g. stack pointer, registers etc
                     532   ; unsigned int d0,d1,d2,d3,d4,d5,d6,d7 ;
                     533   ; unsigned int a0,a1,a2,a3,a4,a5,a6 ;
                     534   ; unsigned int PC, SSP, USP ;
                     535   ; unsigned short int SR;
                     536   ; // Breakpoint variables
                     537   ; unsigned int BreakPointAddress[8];                      //array of 8 breakpoint addresses
                     538   ; unsigned short int BreakPointInstruction[8] ;           // to hold the instruction opcode at the breakpoint
                     539   ; unsigned int BreakPointSetOrCleared[8] ;
                     540   ; unsigned int InstructionSize ;
                     541   ; // watchpoint variables
                     542   ; unsigned int WatchPointAddress[8];                      //array of 8 breakpoint addresses
                     543   ; unsigned int WatchPointSetOrCleared[8] ;
                     544   ; char WatchPointString[8][100] ;
                     545   ; // for disassembly of program
                     546   ; char    Instruction[100] ;
                     547   ; char    TempString[100] ;
                     548   ; /************************************************************************************
                     549   ; *Subroutine to give the 68000 something useless to do to waste 1 mSec
                     550   ; ************************************************************************************/
                     551   ; void Wait1ms(void)
                     552   ; {
                     553   _Wait1ms:
0000094E  2F02       554          move.l    D2,-(A7)
                     555   ; long int  i ;
                     556   ; for(i = 0; i < 1000; i ++)
00000950  4282       557          clr.l     D2
                     558   Wait1ms_1:
00000952  0C82 0000  559          cmp.l     #1000,D2
00000956  03E8      
00000958  6C04       560          bge.s     Wait1ms_3
0000095A  5282       561          addq.l    #1,D2
0000095C  60F4       562          bra       Wait1ms_1
                     563   Wait1ms_3:
0000095E  241F       564          move.l    (A7)+,D2
00000960  4E75       565          rts
                     566   ; ;
                     567   ; }
                     568   ; /************************************************************************************
                     569   ; *Subroutine to give the 68000 something useless to do to waste 3 mSec
                     570   ; **************************************************************************************/
                     571   ; void Wait3ms(void)
                     572   ; {
                     573   _Wait3ms:
00000962  2F02       574          move.l    D2,-(A7)
                     575   ; int i ;
                     576   ; for(i = 0; i < 3; i++)
00000964  4282       577          clr.l     D2
                     578   Wait3ms_1:
00000966  0C82 0000  579          cmp.l     #3,D2
0000096A  0003      
0000096C  6C08       580          bge.s     Wait3ms_3
                     581   ; Wait1ms() ;
0000096E  4EB8 094E  582          jsr       _Wait1ms
00000972  5282       583          addq.l    #1,D2
00000974  60F0       584          bra       Wait3ms_1
                     585   Wait3ms_3:
00000976  241F       586          move.l    (A7)+,D2
00000978  4E75       587          rts
                     588   ; }
                     589   ; /*********************************************************************************************
                     590   ; *Subroutine to initialise the display by writing some commands to the LCD internal registers
                     591   ; *********************************************************************************************/
                     592   ; void Init_LCD(void)
                     593   ; {
                     594   _Init_LCD:
                     595   ; LCDcommand = (char)(0x0c) ;
0000097A  13FC 000C  596          move.b    #12,4194336
0000097E  0040 0020 
                     597   ; Wait3ms() ;
00000982  4EB8 0962  598          jsr       _Wait3ms
                     599   ; LCDcommand = (char)(0x38) ;
00000986  13FC 0038  600          move.b    #56,4194336
0000098A  0040 0020 
                     601   ; Wait3ms() ;
0000098E  4EB8 0962  602          jsr       _Wait3ms
00000992  4E75       603          rts
                     604   ; }
                     605   ; /******************************************************************************
                     606   ; *subroutine to output a single character held in d1 to the LCD display
                     607   ; *it is assumed the character is an ASCII code and it will be displayed at the
                     608   ; *current cursor position
                     609   ; *******************************************************************************/
                     610   ; void Outchar(int c)
                     611   ; {
                     612   _Outchar:
00000994  4E56 0000  613          link      A6,#0
                     614   ; LCDdata = (char)(c);
00000998  202E 0008  615          move.l    8(A6),D0
0000099C  13C0 0040  616          move.b    D0,4194338
000009A0  0022      
                     617   ; Wait1ms() ;
000009A2  4EB8 094E  618          jsr       _Wait1ms
000009A6  4E5E       619          unlk      A6
000009A8  4E75       620          rts
                     621   ; }
                     622   ; /**********************************************************************************
                     623   ; *subroutine to output a message at the current cursor position of the LCD display
                     624   ; ************************************************************************************/
                     625   ; void OutMess(char *theMessage)
                     626   ; {
                     627   _OutMess:
000009AA  4E56 FFFC  628          link      A6,#-4
                     629   ; char c ;
                     630   ; while((c = *theMessage++) != (char)(0))
                     631   OutMess_1:
000009AE  206E 0008  632          move.l    8(A6),A0
000009B2  52AE 0008  633          addq.l    #1,8(A6)
000009B6  1D50 FFFF  634          move.b    (A0),-1(A6)
000009BA  1010       635          move.b    (A0),D0
000009BC  6712       636          beq.s     OutMess_3
                     637   ; Outchar(c) ;
000009BE  122E FFFF  638          move.b    -1(A6),D1
000009C2  4881       639          ext.w     D1
000009C4  48C1       640          ext.l     D1
000009C6  2F01       641          move.l    D1,-(A7)
000009C8  4EB8 0994  642          jsr       _Outchar
000009CC  584F       643          addq.w    #4,A7
000009CE  60DE       644          bra       OutMess_1
                     645   OutMess_3:
000009D0  4E5E       646          unlk      A6
000009D2  4E75       647          rts
                     648   ; }
                     649   ; /******************************************************************************
                     650   ; *subroutine to clear the line by issuing 24 space characters
                     651   ; *******************************************************************************/
                     652   ; void Clearln(void)
                     653   ; {
                     654   _Clearln:
000009D4  2F02       655          move.l    D2,-(A7)
                     656   ; unsigned char i ;
                     657   ; for(i = 0; i < 24; i ++)
000009D6  4202       658          clr.b     D2
                     659   Clearln_1:
000009D8  0C02 0018  660          cmp.b     #24,D2
000009DC  640E       661          bhs.s     Clearln_3
                     662   ; Outchar(' ') ;  /* write a space char to the LCD display */
000009DE  4878 0020  663          pea       32
000009E2  4EB8 0994  664          jsr       _Outchar
000009E6  584F       665          addq.w    #4,A7
000009E8  5202       666          addq.b    #1,D2
000009EA  60EC       667          bra       Clearln_1
                     668   Clearln_3:
000009EC  241F       669          move.l    (A7)+,D2
000009EE  4E75       670          rts
                     671   ; }
                     672   ; /******************************************************************************
                     673   ; *subroutine to move the cursor to the start of line 1 and clear that line
                     674   ; *******************************************************************************/
                     675   ; void Oline0(char *theMessage)
                     676   ; {
                     677   _Oline0:
000009F0  4E56 0000  678          link      A6,#0
                     679   ; LCDcommand = (char)(0x80) ;
000009F4  13FC 0080  680          move.b    #128,4194336
000009F8  0040 0020 
                     681   ; Wait3ms();
000009FC  4EB8 0962  682          jsr       _Wait3ms
                     683   ; Clearln() ;
00000A00  4EB8 09D4  684          jsr       _Clearln
                     685   ; LCDcommand = (char)(0x80) ;
00000A04  13FC 0080  686          move.b    #128,4194336
00000A08  0040 0020 
                     687   ; Wait3ms() ;
00000A0C  4EB8 0962  688          jsr       _Wait3ms
                     689   ; OutMess(theMessage) ;
00000A10  2F2E 0008  690          move.l    8(A6),-(A7)
00000A14  4EB8 09AA  691          jsr       _OutMess
00000A18  584F       692          addq.w    #4,A7
00000A1A  4E5E       693          unlk      A6
00000A1C  4E75       694          rts
                     695   ; }
                     696   ; /******************************************************************************
                     697   ; *subroutine to move the cursor to the start of line 2 and clear that line
                     698   ; *******************************************************************************/
                     699   ; void Oline1(char *theMessage)
                     700   ; {
                     701   _Oline1:
00000A1E  4E56 0000  702          link      A6,#0
                     703   ; LCDcommand = (char)(0xC0) ;
00000A22  13FC 00C0  704          move.b    #192,4194336
00000A26  0040 0020 
                     705   ; Wait3ms();
00000A2A  4EB8 0962  706          jsr       _Wait3ms
                     707   ; Clearln() ;
00000A2E  4EB8 09D4  708          jsr       _Clearln
                     709   ; LCDcommand = (char)(0xC0) ;
00000A32  13FC 00C0  710          move.b    #192,4194336
00000A36  0040 0020 
                     711   ; Wait3ms() ;
00000A3A  4EB8 0962  712          jsr       _Wait3ms
                     713   ; OutMess(theMessage) ;
00000A3E  2F2E 0008  714          move.l    8(A6),-(A7)
00000A42  4EB8 09AA  715          jsr       _OutMess
00000A46  584F       716          addq.w    #4,A7
00000A48  4E5E       717          unlk      A6
00000A4A  4E75       718          rts
                     719   ; }
                     720   ; void InstallExceptionHandler( void (*function_ptr)(), int level)
                     721   ; {
                     722   _InstallExceptionHandler:
00000A4C  4E56 FFFC  723          link      A6,#-4
                     724   ; volatile long int *RamVectorAddress = (volatile long int *)(0x00840000) ;   // pointer to the Ram based interrupt vector table created in Cstart in debug monitor
00000A50  2D7C 0084  725          move.l    #8650752,-4(A6)
00000A54  0000 FFFC 
                     726   ; RamVectorAddress[level] = (long int *)(function_ptr);
00000A58  206E FFFC  727          move.l    -4(A6),A0
00000A5C  202E 000C  728          move.l    12(A6),D0
00000A60  E588       729          lsl.l     #2,D0
00000A62  21AE 0008  730          move.l    8(A6),0(A0,D0.L)
00000A66  0800      
00000A68  4E5E       731          unlk      A6
00000A6A  4E75       732          rts
                     733   ; }
                     734   ; void TestLEDS(void)
                     735   ; {
                     736   _TestLEDS:
00000A6C  4E56 FFFC  737          link      A6,#-4
00000A70  2F02       738          move.l    D2,-(A7)
                     739   ; int delay ;
                     740   ; unsigned char count = 0 ;
00000A72  422E FFFF  741          clr.b     -1(A6)
                     742   ; while(1)    {
                     743   TestLEDS_1:
                     744   ; PortA = PortB = PortC = PortD = HEX_A = HEX_B = HEX_C = HEX_D = count++ ;
00000A76  102E FFFF  745          move.b    -1(A6),D0
00000A7A  522E FFFF  746          addq.b    #1,-1(A6)
00000A7E  13C0 0040  747          move.b    D0,4194326
00000A82  0016      
00000A84  13C0 0040  748          move.b    D0,4194324
00000A88  0014      
00000A8A  13C0 0040  749          move.b    D0,4194322
00000A8E  0012      
00000A90  13C0 0040  750          move.b    D0,4194320
00000A94  0010      
00000A96  13C0 0040  751          move.b    D0,4194310
00000A9A  0006      
00000A9C  13C0 0040  752          move.b    D0,4194308
00000AA0  0004      
00000AA2  13C0 0040  753          move.b    D0,4194306
00000AA6  0002      
00000AA8  13C0 0040  754          move.b    D0,4194304
00000AAC  0000      
                     755   ; for(delay = 0; delay < 100000; delay ++)
00000AAE  4282       756          clr.l     D2
                     757   TestLEDS_4:
00000AB0  0C82 0001  758          cmp.l     #100000,D2
00000AB4  86A0      
00000AB6  6C04       759          bge.s     TestLEDS_6
00000AB8  5282       760          addq.l    #1,D2
00000ABA  60F4       761          bra       TestLEDS_4
                     762   TestLEDS_6:
00000ABC  60B8       763          bra       TestLEDS_1
                     764   ; ;
                     765   ; }
                     766   ; }
                     767   ; void SwitchTest(void)
                     768   ; {
                     769   _SwitchTest:
00000ABE  48E7 3020  770          movem.l   D2/D3/A2,-(A7)
00000AC2  45F9 0000  771          lea       _printf.L,A2
00000AC6  5644      
                     772   ; int i, switches = 0 ;
00000AC8  4283       773          clr.l     D3
                     774   ; while(1)    {
                     775   SwitchTest_1:
                     776   ; switches = (PortB << 8) | (PortA) ;
00000ACA  1039 0040  777          move.b    4194306,D0
00000ACE  0002      
00000AD0  C0BC 0000  778          and.l     #255,D0
00000AD4  00FF      
00000AD6  E188       779          lsl.l     #8,D0
00000AD8  1239 0040  780          move.b    4194304,D1
00000ADC  0000      
00000ADE  C2BC 0000  781          and.l     #255,D1
00000AE2  00FF      
00000AE4  8081       782          or.l      D1,D0
00000AE6  2600       783          move.l    D0,D3
                     784   ; printf("\rSwitches SW[15-0] = ") ;
00000AE8  4879 0084  785          pea       @m68kde~1_1.L
00000AEC  05A4      
00000AEE  4E92       786          jsr       (A2)
00000AF0  584F       787          addq.w    #4,A7
                     788   ; for( i = (int)(0x00008000); i > 0; i = i >> 1)  {
00000AF2  243C 0000  789          move.l    #32768,D2
00000AF6  8000      
                     790   SwitchTest_4:
00000AF8  0C82 0000  791          cmp.l     #0,D2
00000AFC  0000      
00000AFE  6F20       792          ble.s     SwitchTest_6
                     793   ; if((switches & i) == 0)
00000B00  2003       794          move.l    D3,D0
00000B02  C082       795          and.l     D2,D0
00000B04  660C       796          bne.s     SwitchTest_7
                     797   ; printf("0") ;
00000B06  4879 0084  798          pea       @m68kde~1_2.L
00000B0A  05BA      
00000B0C  4E92       799          jsr       (A2)
00000B0E  584F       800          addq.w    #4,A7
00000B10  600A       801          bra.s     SwitchTest_8
                     802   SwitchTest_7:
                     803   ; else
                     804   ; printf("1") ;
00000B12  4879 0084  805          pea       @m68kde~1_3.L
00000B16  05BC      
00000B18  4E92       806          jsr       (A2)
00000B1A  584F       807          addq.w    #4,A7
                     808   SwitchTest_8:
00000B1C  E282       809          asr.l     #1,D2
00000B1E  60D8       810          bra       SwitchTest_4
                     811   SwitchTest_6:
00000B20  60A8       812          bra       SwitchTest_1
                     813   ; }
                     814   ; }
                     815   ; }
                     816   ; /*********************************************************************************************
                     817   ; *Subroutine to initialise the RS232 Port by writing some commands to the internal registers
                     818   ; *********************************************************************************************/
                     819   ; void Init_RS232(void)
                     820   ; {
                     821   _Init_RS232:
                     822   ; RS232_Control = (char)(0x15) ; //  %00010101    divide by 16 clock, set rts low, 8 bits no parity, 1 stop bit transmitter interrupt disabled
00000B22  13FC 0015  823          move.b    #21,4194368
00000B26  0040 0040 
                     824   ; RS232_Baud = (char)(0x1) ;      // program baud rate generator 000 = 230k, 001 = 115k, 010 = 57.6k, 011 = 38.4k, 100 = 19.2, all others = 9600
00000B2A  13FC 0001  825          move.b    #1,4194372
00000B2E  0040 0044 
00000B32  4E75       826          rts
                     827   ; }
                     828   ; int kbhit(void)
                     829   ; {
                     830   _kbhit:
                     831   ; if(((char)(RS232_Status) & (char)(0x02)) == (char)(0x02))    // wait for Tx bit in status register to be '1'
00000B34  1039 0040  832          move.b    4194368,D0
00000B38  0040      
00000B3A  C03C 0002  833          and.b     #2,D0
00000B3E  0C00 0002  834          cmp.b     #2,D0
00000B42  6604       835          bne.s     kbhit_1
                     836   ; return 1 ;
00000B44  7001       837          moveq     #1,D0
00000B46  6002       838          bra.s     kbhit_3
                     839   kbhit_1:
                     840   ; else
                     841   ; return 0 ;
00000B48  4280       842          clr.l     D0
                     843   kbhit_3:
00000B4A  4E75       844          rts
                     845   ; }
                     846   ; /*********************************************************************************************************
                     847   ; **  Subroutine to provide a low level output function to 6850 ACIA
                     848   ; **  This routine provides the basic functionality to output a single character to the serial Port
                     849   ; **  to allow the board to communicate with HyperTerminal Program
                     850   ; **
                     851   ; **  NOTE you do not call this function directly, instead you call the normal putchar() function
                     852   ; **  which in turn calls _putch() below). Other functions like puts(), printf() call putchar() so will
                     853   ; **  call _putch() also
                     854   ; *********************************************************************************************************/
                     855   ; int _putch( int c)
                     856   ; {
                     857   __putch:
00000B4C  4E56 0000  858          link      A6,#0
                     859   ; while(((char)(RS232_Status) & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
                     860   _putch_1:
00000B50  1039 0040  861          move.b    4194368,D0
00000B54  0040      
00000B56  C03C 0002  862          and.b     #2,D0
00000B5A  0C00 0002  863          cmp.b     #2,D0
00000B5E  6702       864          beq.s     _putch_3
00000B60  60EE       865          bra       _putch_1
                     866   _putch_3:
                     867   ; ;
                     868   ; (char)(RS232_TxData) = ((char)(c) & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
00000B62  202E 0008  869          move.l    8(A6),D0
00000B66  C03C 007F  870          and.b     #127,D0
00000B6A  13C0 0040  871          move.b    D0,4194370
00000B6E  0042      
                     872   ; return c ;                                              // putchar() expects the character to be returned
00000B70  202E 0008  873          move.l    8(A6),D0
00000B74  4E5E       874          unlk      A6
00000B76  4E75       875          rts
                     876   ; }
                     877   ; /*********************************************************************************************************
                     878   ; **  Subroutine to provide a low level input function to 6850 ACIA
                     879   ; **  This routine provides the basic functionality to input a single character from the serial Port
                     880   ; **  to allow the board to communicate with HyperTerminal Program Keyboard (your PC)
                     881   ; **
                     882   ; **  NOTE you do not call this function directly, instead you call the normal _getch() function
                     883   ; **  which in turn calls _getch() below). Other functions like gets(), scanf() call _getch() so will
                     884   ; **  call _getch() also
                     885   ; *********************************************************************************************************/
                     886   ; int _getch( void )
                     887   ; {
                     888   __getch:
00000B78  2F02       889          move.l    D2,-(A7)
                     890   ; int c ;
                     891   ; while(((char)(RS232_Status) & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
                     892   _getch_1:
00000B7A  1039 0040  893          move.b    4194368,D0
00000B7E  0040      
00000B80  C03C 0001  894          and.b     #1,D0
00000B84  0C00 0001  895          cmp.b     #1,D0
00000B88  6702       896          beq.s     _getch_3
00000B8A  60EE       897          bra       _getch_1
                     898   _getch_3:
                     899   ; ;
                     900   ; c = (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
00000B8C  1039 0040  901          move.b    4194370,D0
00000B90  0042      
00000B92  C0BC 0000  902          and.l     #255,D0
00000B96  00FF      
00000B98  C0BC 0000  903          and.l     #127,D0
00000B9C  007F      
00000B9E  2400       904          move.l    D0,D2
                     905   ; _putch(c);
00000BA0  2F02       906          move.l    D2,-(A7)
00000BA2  4EB8 0B4C  907          jsr       __putch
00000BA6  584F       908          addq.w    #4,A7
                     909   ; return c ;
00000BA8  2002       910          move.l    D2,D0
00000BAA  241F       911          move.l    (A7)+,D2
00000BAC  4E75       912          rts
                     913   ; }
                     914   ; // flush the input stream for any unread characters
                     915   ; void FlushKeyboard(void)
                     916   ; {
                     917   _FlushKeyboard:
00000BAE  4E56 FFFC  918          link      A6,#-4
                     919   ; char c ;
                     920   ; while(1)    {
                     921   FlushKeyboard_1:
                     922   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // if Rx bit in status register is '1'
00000BB2  1039 0040  923          move.b    4194368,D0
00000BB6  0040      
00000BB8  C03C 0001  924          and.b     #1,D0
00000BBC  0C00 0001  925          cmp.b     #1,D0
00000BC0  6610       926          bne.s     FlushKeyboard_4
                     927   ; c = ((char)(RS232_RxData) & (char)(0x7f)) ;
00000BC2  1039 0040  928          move.b    4194370,D0
00000BC6  0042      
00000BC8  C03C 007F  929          and.b     #127,D0
00000BCC  1D40 FFFF  930          move.b    D0,-1(A6)
00000BD0  6002       931          bra.s     FlushKeyboard_5
                     932   FlushKeyboard_4:
                     933   ; else
                     934   ; return ;
00000BD2  6002       935          bra.s     FlushKeyboard_6
                     936   FlushKeyboard_5:
00000BD4  60DC       937          bra       FlushKeyboard_1
                     938   FlushKeyboard_6:
00000BD6  4E5E       939          unlk      A6
00000BD8  4E75       940          rts
                     941   ; }
                     942   ; }
                     943   ; // converts hex char to 4 bit binary equiv in range 0000-1111 (0-F)
                     944   ; // char assumed to be a valid hex char 0-9, a-f, A-F
                     945   ; char xtod(int c)
                     946   ; {
                     947   _xtod:
00000BDA  4E56 0000  948          link      A6,#0
00000BDE  2F02       949          move.l    D2,-(A7)
00000BE0  242E 0008  950          move.l    8(A6),D2
                     951   ; if ((char)(c) <= (char)('9'))
00000BE4  0C02 0039  952          cmp.b     #57,D2
00000BE8  6E08       953          bgt.s     xtod_1
                     954   ; return c - (char)(0x30);    // 0 - 9 = 0x30 - 0x39 so convert to number by sutracting 0x30
00000BEA  1002       955          move.b    D2,D0
00000BEC  0400 0030  956          sub.b     #48,D0
00000BF0  6014       957          bra.s     xtod_3
                     958   xtod_1:
                     959   ; else if((char)(c) > (char)('F'))    // assume lower case
00000BF2  0C02 0046  960          cmp.b     #70,D2
00000BF6  6F08       961          ble.s     xtod_4
                     962   ; return c - (char)(0x57);    // a-f = 0x61-66 so needs to be converted to 0x0A - 0x0F so subtract 0x57
00000BF8  1002       963          move.b    D2,D0
00000BFA  0400 0057  964          sub.b     #87,D0
00000BFE  6006       965          bra.s     xtod_3
                     966   xtod_4:
                     967   ; else
                     968   ; return c - (char)(0x37);    // A-F = 0x41-46 so needs to be converted to 0x0A - 0x0F so subtract 0x37
00000C00  1002       969          move.b    D2,D0
00000C02  0400 0037  970          sub.b     #55,D0
                     971   xtod_3:
00000C06  241F       972          move.l    (A7)+,D2
00000C08  4E5E       973          unlk      A6
00000C0A  4E75       974          rts
                     975   ; }
                     976   ; int Get2HexDigits(char *CheckSumPtr)
                     977   ; {
                     978   _Get2HexDigits:
00000C0C  4E56 0000  979          link      A6,#0
00000C10  2F02       980          move.l    D2,-(A7)
                     981   ; register int i = (xtod(_getch()) << 4) | (xtod(_getch()));
00000C12  2F00       982          move.l    D0,-(A7)
00000C14  4EB8 0B78  983          jsr       __getch
00000C18  2200       984          move.l    D0,D1
00000C1A  201F       985          move.l    (A7)+,D0
00000C1C  2F01       986          move.l    D1,-(A7)
00000C1E  4EB8 0BDA  987          jsr       _xtod
00000C22  584F       988          addq.w    #4,A7
00000C24  C0BC 0000  989          and.l     #255,D0
00000C28  00FF      
00000C2A  E980       990          asl.l     #4,D0
00000C2C  2F00       991          move.l    D0,-(A7)
00000C2E  2F01       992          move.l    D1,-(A7)
00000C30  4EB8 0B78  993          jsr       __getch
00000C34  221F       994          move.l    (A7)+,D1
00000C36  2F00       995          move.l    D0,-(A7)
00000C38  4EB8 0BDA  996          jsr       _xtod
00000C3C  584F       997          addq.w    #4,A7
00000C3E  2200       998          move.l    D0,D1
00000C40  201F       999          move.l    (A7)+,D0
00000C42  C2BC 0000 1000          and.l     #255,D1
00000C46  00FF      
00000C48  8081      1001          or.l      D1,D0
00000C4A  2400      1002          move.l    D0,D2
                    1003   ; if(CheckSumPtr)
00000C4C  4AAE 0008 1004          tst.l     8(A6)
00000C50  6706      1005          beq.s     Get2HexDigits_1
                    1006   ; *CheckSumPtr += i ;
00000C52  206E 0008 1007          move.l    8(A6),A0
00000C56  D510      1008          add.b     D2,(A0)
                    1009   Get2HexDigits_1:
                    1010   ; return i ;
00000C58  2002      1011          move.l    D2,D0
00000C5A  241F      1012          move.l    (A7)+,D2
00000C5C  4E5E      1013          unlk      A6
00000C5E  4E75      1014          rts
                    1015   ; }
                    1016   ; int Get4HexDigits(char *CheckSumPtr)
                    1017   ; {
                    1018   _Get4HexDigits:
00000C60  4E56 0000 1019          link      A6,#0
                    1020   ; return (Get2HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C64  2F2E 0008 1021          move.l    8(A6),-(A7)
00000C68  4EB8 0C0C 1022          jsr       _Get2HexDigits
00000C6C  584F      1023          addq.w    #4,A7
00000C6E  E180      1024          asl.l     #8,D0
00000C70  2F00      1025          move.l    D0,-(A7)
00000C72  2F2E 0008 1026          move.l    8(A6),-(A7)
00000C76  4EB8 0C0C 1027          jsr       _Get2HexDigits
00000C7A  584F      1028          addq.w    #4,A7
00000C7C  2200      1029          move.l    D0,D1
00000C7E  201F      1030          move.l    (A7)+,D0
00000C80  8081      1031          or.l      D1,D0
00000C82  4E5E      1032          unlk      A6
00000C84  4E75      1033          rts
                    1034   ; }
                    1035   ; int Get6HexDigits(char *CheckSumPtr)
                    1036   ; {
                    1037   _Get6HexDigits:
00000C86  4E56 0000 1038          link      A6,#0
                    1039   ; return (Get4HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C8A  2F2E 0008 1040          move.l    8(A6),-(A7)
00000C8E  4EB8 0C60 1041          jsr       _Get4HexDigits
00000C92  584F      1042          addq.w    #4,A7
00000C94  E180      1043          asl.l     #8,D0
00000C96  2F00      1044          move.l    D0,-(A7)
00000C98  2F2E 0008 1045          move.l    8(A6),-(A7)
00000C9C  4EB8 0C0C 1046          jsr       _Get2HexDigits
00000CA0  584F      1047          addq.w    #4,A7
00000CA2  2200      1048          move.l    D0,D1
00000CA4  201F      1049          move.l    (A7)+,D0
00000CA6  8081      1050          or.l      D1,D0
00000CA8  4E5E      1051          unlk      A6
00000CAA  4E75      1052          rts
                    1053   ; }
                    1054   ; int Get8HexDigits(char *CheckSumPtr)
                    1055   ; {
                    1056   _Get8HexDigits:
00000CAC  4E56 0000 1057          link      A6,#0
                    1058   ; return (Get4HexDigits(CheckSumPtr) << 16) | (Get4HexDigits(CheckSumPtr));
00000CB0  2F2E 0008 1059          move.l    8(A6),-(A7)
00000CB4  4EB8 0C60 1060          jsr       _Get4HexDigits
00000CB8  584F      1061          addq.w    #4,A7
00000CBA  E180      1062          asl.l     #8,D0
00000CBC  E180      1063          asl.l     #8,D0
00000CBE  2F00      1064          move.l    D0,-(A7)
00000CC0  2F2E 0008 1065          move.l    8(A6),-(A7)
00000CC4  4EB8 0C60 1066          jsr       _Get4HexDigits
00000CC8  584F      1067          addq.w    #4,A7
00000CCA  2200      1068          move.l    D0,D1
00000CCC  201F      1069          move.l    (A7)+,D0
00000CCE  8081      1070          or.l      D1,D0
00000CD0  4E5E      1071          unlk      A6
00000CD2  4E75      1072          rts
                    1073   ; }
                    1074   ; char *strcatInstruction(char *s) {    return strcat(Instruction,s) ; }
                    1075   _strcatInstruction:
00000CD4  4E56 0000 1076          link      A6,#0
00000CD8  2F2E 0008 1077          move.l    8(A6),-(A7)
00000CDC  4879 0084 1078          pea       _Instruction.L
00000CE0  04DC      
00000CE2  4EB9 0000 1079          jsr       _strcat
00000CE6  5602      
00000CE8  504F      1080          addq.w    #8,A7
00000CEA  4E5E      1081          unlk      A6
00000CEC  4E75      1082          rts
                    1083   ; char *strcpyInstruction(char *s) {    return strcpy(Instruction,s) ; }
                    1084   _strcpyInstruction:
00000CEE  4E56 0000 1085          link      A6,#0
00000CF2  2F2E 0008 1086          move.l    8(A6),-(A7)
00000CF6  4879 0084 1087          pea       _Instruction.L
00000CFA  04DC      
00000CFC  4EB9 0000 1088          jsr       _strcpy
00000D00  54EE      
00000D02  504F      1089          addq.w    #8,A7
00000D04  4E5E      1090          unlk      A6
00000D06  4E75      1091          rts
                    1092   ; void DisassembleProgram(void )
                    1093   ; {
                    1094   _DisassembleProgram:
00000D08  4E56 FFF8 1095          link      A6,#-8
00000D0C  48E7 3038 1096          movem.l   D2/D3/A2/A3/A4,-(A7)
00000D10  45F9 0084 1097          lea       _InstructionSize.L,A2
00000D14  0178      
00000D16  47F9 0000 1098          lea       _printf.L,A3
00000D1A  5644      
00000D1C  49F9 0084 1099          lea       _Instruction.L,A4
00000D20  04DC      
                    1100   ; char c ;
                    1101   ; int i, j ;
                    1102   ; unsigned short int *ProgramPtr ; // pointer to where the program is stored
                    1103   ; printf("\r\nEnter Start Address: ") ;
00000D22  4879 0084 1104          pea       @m68kde~1_4.L
00000D26  05BE      
00000D28  4E93      1105          jsr       (A3)
00000D2A  584F      1106          addq.w    #4,A7
                    1107   ; ProgramPtr = Get8HexDigits(0) ;
00000D2C  42A7      1108          clr.l     -(A7)
00000D2E  4EB8 0CAC 1109          jsr       _Get8HexDigits
00000D32  584F      1110          addq.w    #4,A7
00000D34  2400      1111          move.l    D0,D2
                    1112   ; printf("\r\n<ESC> = Abort, SPACE to Continue") ;
00000D36  4879 0084 1113          pea       @m68kde~1_5.L
00000D3A  05D6      
00000D3C  4E93      1114          jsr       (A3)
00000D3E  584F      1115          addq.w    #4,A7
                    1116   ; while(1)    {
                    1117   DisassembleProgram_1:
                    1118   ; for(i = 0; i < 20; i ++)
00000D40  4283      1119          clr.l     D3
                    1120   DisassembleProgram_4:
00000D42  0C83 0000 1121          cmp.l     #20,D3
00000D46  0014      
00000D48  6C00 017E 1122          bge       DisassembleProgram_6
                    1123   ; {
                    1124   ; InstructionSize = 1 ;                   // assume all instruction are at least 1 word
00000D4C  24BC 0000 1125          move.l    #1,(A2)
00000D50  0001      
                    1126   ; DisassembleInstruction(ProgramPtr) ;    // build up string for disassembled instruction at address in programptr
00000D52  2F02      1127          move.l    D2,-(A7)
00000D54  4EB9 0000 1128          jsr       _DisassembleInstruction
00000D58  364C      
00000D5A  584F      1129          addq.w    #4,A7
                    1130   ; if(InstructionSize == 1)
00000D5C  2012      1131          move.l    (A2),D0
00000D5E  0C80 0000 1132          cmp.l     #1,D0
00000D62  0001      
00000D64  6620      1133          bne.s     DisassembleProgram_7
                    1134   ; printf("\r\n%08X  %04X                        %s", ProgramPtr, ProgramPtr[0], Instruction) ;
00000D66  2F0C      1135          move.l    A4,-(A7)
00000D68  2042      1136          move.l    D2,A0
00000D6A  3210      1137          move.w    (A0),D1
00000D6C  C2BC 0000 1138          and.l     #65535,D1
00000D70  FFFF      
00000D72  2F01      1139          move.l    D1,-(A7)
00000D74  2F02      1140          move.l    D2,-(A7)
00000D76  4879 0084 1141          pea       @m68kde~1_6.L
00000D7A  05FA      
00000D7C  4E93      1142          jsr       (A3)
00000D7E  DEFC 0010 1143          add.w     #16,A7
00000D82  6000 0138 1144          bra       DisassembleProgram_15
                    1145   DisassembleProgram_7:
                    1146   ; else if(InstructionSize == 2)
00000D86  2012      1147          move.l    (A2),D0
00000D88  0C80 0000 1148          cmp.l     #2,D0
00000D8C  0002      
00000D8E  662E      1149          bne.s     DisassembleProgram_9
                    1150   ; printf("\r\n%08X  %04X %04X                   %s", ProgramPtr, ProgramPtr[0], ProgramPtr[1], Instruction) ;
00000D90  2F0C      1151          move.l    A4,-(A7)
00000D92  2042      1152          move.l    D2,A0
00000D94  3228 0002 1153          move.w    2(A0),D1
00000D98  C2BC 0000 1154          and.l     #65535,D1
00000D9C  FFFF      
00000D9E  2F01      1155          move.l    D1,-(A7)
00000DA0  2042      1156          move.l    D2,A0
00000DA2  3210      1157          move.w    (A0),D1
00000DA4  C2BC 0000 1158          and.l     #65535,D1
00000DA8  FFFF      
00000DAA  2F01      1159          move.l    D1,-(A7)
00000DAC  2F02      1160          move.l    D2,-(A7)
00000DAE  4879 0084 1161          pea       @m68kde~1_7.L
00000DB2  0622      
00000DB4  4E93      1162          jsr       (A3)
00000DB6  DEFC 0014 1163          add.w     #20,A7
00000DBA  6000 0100 1164          bra       DisassembleProgram_15
                    1165   DisassembleProgram_9:
                    1166   ; else if(InstructionSize == 3)
00000DBE  2012      1167          move.l    (A2),D0
00000DC0  0C80 0000 1168          cmp.l     #3,D0
00000DC4  0003      
00000DC6  6600 003E 1169          bne       DisassembleProgram_11
                    1170   ; printf("\r\n%08X  %04X %04X %04X              %s", ProgramPtr, ProgramPtr[0], ProgramPtr[1], ProgramPtr[2], Instruction) ;
00000DCA  2F0C      1171          move.l    A4,-(A7)
00000DCC  2042      1172          move.l    D2,A0
00000DCE  3228 0004 1173          move.w    4(A0),D1
00000DD2  C2BC 0000 1174          and.l     #65535,D1
00000DD6  FFFF      
00000DD8  2F01      1175          move.l    D1,-(A7)
00000DDA  2042      1176          move.l    D2,A0
00000DDC  3228 0002 1177          move.w    2(A0),D1
00000DE0  C2BC 0000 1178          and.l     #65535,D1
00000DE4  FFFF      
00000DE6  2F01      1179          move.l    D1,-(A7)
00000DE8  2042      1180          move.l    D2,A0
00000DEA  3210      1181          move.w    (A0),D1
00000DEC  C2BC 0000 1182          and.l     #65535,D1
00000DF0  FFFF      
00000DF2  2F01      1183          move.l    D1,-(A7)
00000DF4  2F02      1184          move.l    D2,-(A7)
00000DF6  4879 0084 1185          pea       @m68kde~1_8.L
00000DFA  064A      
00000DFC  4E93      1186          jsr       (A3)
00000DFE  DEFC 0018 1187          add.w     #24,A7
00000E02  6000 00B8 1188          bra       DisassembleProgram_15
                    1189   DisassembleProgram_11:
                    1190   ; else if(InstructionSize == 4)
00000E06  2012      1191          move.l    (A2),D0
00000E08  0C80 0000 1192          cmp.l     #4,D0
00000E0C  0004      
00000E0E  6600 004C 1193          bne       DisassembleProgram_13
                    1194   ; printf("\r\n%08X  %04X %04X %04X %04X         %s", ProgramPtr, ProgramPtr[0], ProgramPtr[1], ProgramPtr[2], ProgramPtr[3], Instruction) ;
00000E12  2F0C      1195          move.l    A4,-(A7)
00000E14  2042      1196          move.l    D2,A0
00000E16  3228 0006 1197          move.w    6(A0),D1
00000E1A  C2BC 0000 1198          and.l     #65535,D1
00000E1E  FFFF      
00000E20  2F01      1199          move.l    D1,-(A7)
00000E22  2042      1200          move.l    D2,A0
00000E24  3228 0004 1201          move.w    4(A0),D1
00000E28  C2BC 0000 1202          and.l     #65535,D1
00000E2C  FFFF      
00000E2E  2F01      1203          move.l    D1,-(A7)
00000E30  2042      1204          move.l    D2,A0
00000E32  3228 0002 1205          move.w    2(A0),D1
00000E36  C2BC 0000 1206          and.l     #65535,D1
00000E3A  FFFF      
00000E3C  2F01      1207          move.l    D1,-(A7)
00000E3E  2042      1208          move.l    D2,A0
00000E40  3210      1209          move.w    (A0),D1
00000E42  C2BC 0000 1210          and.l     #65535,D1
00000E46  FFFF      
00000E48  2F01      1211          move.l    D1,-(A7)
00000E4A  2F02      1212          move.l    D2,-(A7)
00000E4C  4879 0084 1213          pea       @m68kde~1_9.L
00000E50  0672      
00000E52  4E93      1214          jsr       (A3)
00000E54  DEFC 001C 1215          add.w     #28,A7
00000E58  6000 0062 1216          bra       DisassembleProgram_15
                    1217   DisassembleProgram_13:
                    1218   ; else if(InstructionSize == 5)
00000E5C  2012      1219          move.l    (A2),D0
00000E5E  0C80 0000 1220          cmp.l     #5,D0
00000E62  0005      
00000E64  6600 0056 1221          bne       DisassembleProgram_15
                    1222   ; printf("\r\n%08X  %04X %04X %04X %04X %04X    %s", ProgramPtr, ProgramPtr[0], ProgramPtr[1], ProgramPtr[2], ProgramPtr[3], ProgramPtr[4], Instruction) ;
00000E68  2F0C      1223          move.l    A4,-(A7)
00000E6A  2042      1224          move.l    D2,A0
00000E6C  3228 0008 1225          move.w    8(A0),D1
00000E70  C2BC 0000 1226          and.l     #65535,D1
00000E74  FFFF      
00000E76  2F01      1227          move.l    D1,-(A7)
00000E78  2042      1228          move.l    D2,A0
00000E7A  3228 0006 1229          move.w    6(A0),D1
00000E7E  C2BC 0000 1230          and.l     #65535,D1
00000E82  FFFF      
00000E84  2F01      1231          move.l    D1,-(A7)
00000E86  2042      1232          move.l    D2,A0
00000E88  3228 0004 1233          move.w    4(A0),D1
00000E8C  C2BC 0000 1234          and.l     #65535,D1
00000E90  FFFF      
00000E92  2F01      1235          move.l    D1,-(A7)
00000E94  2042      1236          move.l    D2,A0
00000E96  3228 0002 1237          move.w    2(A0),D1
00000E9A  C2BC 0000 1238          and.l     #65535,D1
00000E9E  FFFF      
00000EA0  2F01      1239          move.l    D1,-(A7)
00000EA2  2042      1240          move.l    D2,A0
00000EA4  3210      1241          move.w    (A0),D1
00000EA6  C2BC 0000 1242          and.l     #65535,D1
00000EAA  FFFF      
00000EAC  2F01      1243          move.l    D1,-(A7)
00000EAE  2F02      1244          move.l    D2,-(A7)
00000EB0  4879 0084 1245          pea       @m68kde~1_10.L
00000EB4  069A      
00000EB6  4E93      1246          jsr       (A3)
00000EB8  DEFC 0020 1247          add.w     #32,A7
                    1248   DisassembleProgram_15:
                    1249   ; ProgramPtr += InstructionSize ;
00000EBC  2012      1250          move.l    (A2),D0
00000EBE  E388      1251          lsl.l     #1,D0
00000EC0  D480      1252          add.l     D0,D2
00000EC2  5283      1253          addq.l    #1,D3
00000EC4  6000 FE7C 1254          bra       DisassembleProgram_4
                    1255   DisassembleProgram_6:
                    1256   ; }
                    1257   ; c = _getch() ;
00000EC8  4EB8 0B78 1258          jsr       __getch
00000ECC  1D40 FFFB 1259          move.b    D0,-5(A6)
                    1260   ; if(c == 0x1b)          // break on ESC
00000ED0  102E FFFB 1261          move.b    -5(A6),D0
00000ED4  0C00 001B 1262          cmp.b     #27,D0
00000ED8  6602      1263          bne.s     DisassembleProgram_17
                    1264   ; return ;
00000EDA  6004      1265          bra.s     DisassembleProgram_19
                    1266   DisassembleProgram_17:
00000EDC  6000 FE62 1267          bra       DisassembleProgram_1
                    1268   DisassembleProgram_19:
00000EE0  4CDF 1C0C 1269          movem.l   (A7)+,D2/D3/A2/A3/A4
00000EE4  4E5E      1270          unlk      A6
00000EE6  4E75      1271          rts
                    1272   ; }
                    1273   ; }
                    1274   ; void DumpMemory(void)   // simple dump memory fn
                    1275   ; {
                    1276   _DumpMemory:
00000EE8  48E7 3C30 1277          movem.l   D2/D3/D4/D5/A2/A3,-(A7)
00000EEC  45F9 0000 1278          lea       _printf.L,A2
00000EF0  5644      
00000EF2  47F9 0000 1279          lea       _putch.L,A3
00000EF6  5536      
                    1280   ; int i, j ;
                    1281   ; unsigned char *RamPtr,c ; // pointer to where the program is download (assumed)
                    1282   ; printf("\r\nDump Memory Block: <ESC> to Abort, <SPACE> to Continue") ;
00000EF8  4879 0084 1283          pea       @m68kde~1_11.L
00000EFC  06C2      
00000EFE  4E92      1284          jsr       (A2)
00000F00  584F      1285          addq.w    #4,A7
                    1286   ; printf("\r\nEnter Start Address: ") ;
00000F02  4879 0084 1287          pea       @m68kde~1_12.L
00000F06  06FC      
00000F08  4E92      1288          jsr       (A2)
00000F0A  584F      1289          addq.w    #4,A7
                    1290   ; RamPtr = Get8HexDigits(0) ;
00000F0C  42A7      1291          clr.l     -(A7)
00000F0E  4EB8 0CAC 1292          jsr       _Get8HexDigits
00000F12  584F      1293          addq.w    #4,A7
00000F14  2600      1294          move.l    D0,D3
                    1295   ; while(1)    {
                    1296   DumpMemory_1:
                    1297   ; for(i = 0; i < 16; i ++)    {
00000F16  4285      1298          clr.l     D5
                    1299   DumpMemory_4:
00000F18  0C85 0000 1300          cmp.l     #16,D5
00000F1C  0010      
00000F1E  6C00 0096 1301          bge       DumpMemory_6
                    1302   ; printf("\r\n%08x ", RamPtr) ;
00000F22  2F03      1303          move.l    D3,-(A7)
00000F24  4879 0084 1304          pea       @m68kde~1_13.L
00000F28  0714      
00000F2A  4E92      1305          jsr       (A2)
00000F2C  504F      1306          addq.w    #8,A7
                    1307   ; for(j=0; j < 16; j ++)  {
00000F2E  4282      1308          clr.l     D2
                    1309   DumpMemory_7:
00000F30  0C82 0000 1310          cmp.l     #16,D2
00000F34  0010      
00000F36  6C24      1311          bge.s     DumpMemory_9
                    1312   ; printf("%02X",RamPtr[j]) ;
00000F38  2043      1313          move.l    D3,A0
00000F3A  1230 2800 1314          move.b    0(A0,D2.L),D1
00000F3E  C2BC 0000 1315          and.l     #255,D1
00000F42  00FF      
00000F44  2F01      1316          move.l    D1,-(A7)
00000F46  4879 0084 1317          pea       @m68kde~1_14.L
00000F4A  071C      
00000F4C  4E92      1318          jsr       (A2)
00000F4E  504F      1319          addq.w    #8,A7
                    1320   ; putchar(' ') ;
00000F50  4878 0020 1321          pea       32
00000F54  4E93      1322          jsr       (A3)
00000F56  584F      1323          addq.w    #4,A7
00000F58  5282      1324          addq.l    #1,D2
00000F5A  60D4      1325          bra       DumpMemory_7
                    1326   DumpMemory_9:
                    1327   ; }
                    1328   ; // now display the data as ASCII at the end
                    1329   ; printf("  ") ;
00000F5C  4879 0084 1330          pea       @m68kde~1_15.L
00000F60  0722      
00000F62  4E92      1331          jsr       (A2)
00000F64  584F      1332          addq.w    #4,A7
                    1333   ; for(j = 0; j < 16; j++) {
00000F66  4282      1334          clr.l     D2
                    1335   DumpMemory_10:
00000F68  0C82 0000 1336          cmp.l     #16,D2
00000F6C  0010      
00000F6E  6C00 003A 1337          bge       DumpMemory_12
                    1338   ; c = ((char)(RamPtr[j]) & 0x7f) ;
00000F72  2043      1339          move.l    D3,A0
00000F74  1030 2800 1340          move.b    0(A0,D2.L),D0
00000F78  C03C 007F 1341          and.b     #127,D0
00000F7C  1800      1342          move.b    D0,D4
                    1343   ; if((c > (char)(0x7f)) || (c < ' '))
00000F7E  0C04 007F 1344          cmp.b     #127,D4
00000F82  6206      1345          bhi.s     DumpMemory_15
00000F84  0C04 0020 1346          cmp.b     #32,D4
00000F88  640A      1347          bhs.s     DumpMemory_13
                    1348   DumpMemory_15:
                    1349   ; putchar('.') ;
00000F8A  4878 002E 1350          pea       46
00000F8E  4E93      1351          jsr       (A3)
00000F90  584F      1352          addq.w    #4,A7
00000F92  6012      1353          bra.s     DumpMemory_14
                    1354   DumpMemory_13:
                    1355   ; else
                    1356   ; putchar(RamPtr[j]) ;
00000F94  2043      1357          move.l    D3,A0
00000F96  1230 2800 1358          move.b    0(A0,D2.L),D1
00000F9A  C2BC 0000 1359          and.l     #255,D1
00000F9E  00FF      
00000FA0  2F01      1360          move.l    D1,-(A7)
00000FA2  4E93      1361          jsr       (A3)
00000FA4  584F      1362          addq.w    #4,A7
                    1363   DumpMemory_14:
00000FA6  5282      1364          addq.l    #1,D2
00000FA8  60BE      1365          bra       DumpMemory_10
                    1366   DumpMemory_12:
                    1367   ; }
                    1368   ; RamPtr = RamPtr + 16 ;
00000FAA  0683 0000 1369          add.l     #16,D3
00000FAE  0010      
00000FB0  5285      1370          addq.l    #1,D5
00000FB2  6000 FF64 1371          bra       DumpMemory_4
                    1372   DumpMemory_6:
                    1373   ; }
                    1374   ; printf("\r\n") ;
00000FB6  4879 0084 1375          pea       @m68kde~1_16.L
00000FBA  0726      
00000FBC  4E92      1376          jsr       (A2)
00000FBE  584F      1377          addq.w    #4,A7
                    1378   ; c = _getch() ;
00000FC0  4EB8 0B78 1379          jsr       __getch
00000FC4  1800      1380          move.b    D0,D4
                    1381   ; if(c == 0x1b)          // break on ESC
00000FC6  0C04 001B 1382          cmp.b     #27,D4
00000FCA  6602      1383          bne.s     DumpMemory_16
                    1384   ; break ;
00000FCC  6004      1385          bra.s     DumpMemory_3
                    1386   DumpMemory_16:
00000FCE  6000 FF46 1387          bra       DumpMemory_1
                    1388   DumpMemory_3:
00000FD2  4CDF 0C3C 1389          movem.l   (A7)+,D2/D3/D4/D5/A2/A3
00000FD6  4E75      1390          rts
                    1391   ; }
                    1392   ; }
                    1393   ; void FillMemory()
                    1394   ; {
                    1395   _FillMemory:
00000FD8  48E7 3820 1396          movem.l   D2/D3/D4/A2,-(A7)
00000FDC  45F9 0000 1397          lea       _printf.L,A2
00000FE0  5644      
                    1398   ; char *StartRamPtr, *EndRamPtr ;
                    1399   ; unsigned char FillData ;
                    1400   ; printf("\r\nFill Memory Block") ;
00000FE2  4879 0084 1401          pea       @m68kde~1_17.L
00000FE6  072A      
00000FE8  4E92      1402          jsr       (A2)
00000FEA  584F      1403          addq.w    #4,A7
                    1404   ; printf("\r\nEnter Start Address: ") ;
00000FEC  4879 0084 1405          pea       @m68kde~1_18.L
00000FF0  073E      
00000FF2  4E92      1406          jsr       (A2)
00000FF4  584F      1407          addq.w    #4,A7
                    1408   ; StartRamPtr = Get8HexDigits(0) ;
00000FF6  42A7      1409          clr.l     -(A7)
00000FF8  4EB8 0CAC 1410          jsr       _Get8HexDigits
00000FFC  584F      1411          addq.w    #4,A7
00000FFE  2400      1412          move.l    D0,D2
                    1413   ; printf("\r\nEnter End Address: ") ;
00001000  4879 0084 1414          pea       @m68kde~1_19.L
00001004  0756      
00001006  4E92      1415          jsr       (A2)
00001008  584F      1416          addq.w    #4,A7
                    1417   ; EndRamPtr = Get8HexDigits(0) ;
0000100A  42A7      1418          clr.l     -(A7)
0000100C  4EB8 0CAC 1419          jsr       _Get8HexDigits
00001010  584F      1420          addq.w    #4,A7
00001012  2800      1421          move.l    D0,D4
                    1422   ; printf("\r\nEnter Fill Data: ") ;
00001014  4879 0084 1423          pea       @m68kde~1_20.L
00001018  076C      
0000101A  4E92      1424          jsr       (A2)
0000101C  584F      1425          addq.w    #4,A7
                    1426   ; FillData = Get2HexDigits(0) ;
0000101E  42A7      1427          clr.l     -(A7)
00001020  4EB8 0C0C 1428          jsr       _Get2HexDigits
00001024  584F      1429          addq.w    #4,A7
00001026  1600      1430          move.b    D0,D3
                    1431   ; printf("\r\nFilling Addresses [$%08X - $%08X] with $%02X", StartRamPtr, EndRamPtr, FillData) ;
00001028  C6BC 0000 1432          and.l     #255,D3
0000102C  00FF      
0000102E  2F03      1433          move.l    D3,-(A7)
00001030  2F04      1434          move.l    D4,-(A7)
00001032  2F02      1435          move.l    D2,-(A7)
00001034  4879 0084 1436          pea       @m68kde~1_21.L
00001038  0780      
0000103A  4E92      1437          jsr       (A2)
0000103C  DEFC 0010 1438          add.w     #16,A7
                    1439   ; while(StartRamPtr < EndRamPtr)
                    1440   FillMemory_1:
00001040  B484      1441          cmp.l     D4,D2
00001042  6408      1442          bhs.s     FillMemory_3
                    1443   ; *StartRamPtr++ = FillData ;
00001044  2042      1444          move.l    D2,A0
00001046  5282      1445          addq.l    #1,D2
00001048  1083      1446          move.b    D3,(A0)
0000104A  60F4      1447          bra       FillMemory_1
                    1448   FillMemory_3:
0000104C  4CDF 041C 1449          movem.l   (A7)+,D2/D3/D4/A2
00001050  4E75      1450          rts
                    1451   ; }
                    1452   ; void Load_SRecordFile()
                    1453   ; {
                    1454   _Load_SRecordFile:
00001052  4E56 FFE0 1455          link      A6,#-32
00001056  48E7 3F38 1456          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4,-(A7)
0000105A  45EE FFFA 1457          lea       -6(A6),A2
0000105E  47F8 0C0C 1458          lea       _Get2HexDigits.L,A3
00001062  49F9 0000 1459          lea       _printf.L,A4
00001066  5644      
                    1460   ; int i, Address, AddressSize, DataByte, NumDataBytesToRead, LoadFailed, FailedAddress, AddressFail ;
                    1461   ; int result, ByteCount ;
                    1462   ; char c, CheckSum, ReadCheckSum, HeaderType ;
                    1463   ; char *RamPtr ;                          // pointer to Memory where downloaded program will be stored
                    1464   ; LoadFailed = 0 ;                        //assume LOAD operation will pass
00001068  7E00      1465          moveq     #0,D7
                    1466   ; AddressFail = 0 ;
0000106A  42AE FFEE 1467          clr.l     -18(A6)
                    1468   ; printf("\r\nDownload Program to Memory....<ESC> to Cancel") ;
0000106E  4879 0084 1469          pea       @m68kde~1_22.L
00001072  07B0      
00001074  4E94      1470          jsr       (A4)
00001076  584F      1471          addq.w    #4,A7
                    1472   ; printf("\r\nWaiting for Laptop to send '.HEX' file:\r\n") ;
00001078  4879 0084 1473          pea       @m68kde~1_23.L
0000107C  07E0      
0000107E  4E94      1474          jsr       (A4)
00001080  584F      1475          addq.w    #4,A7
                    1476   ; while(1)    {
                    1477   Load_SRecordFile_1:
                    1478   ; CheckSum = 0 ;
00001082  4212      1479          clr.b     (A2)
                    1480   ; do {
                    1481   Load_SRecordFile_4:
                    1482   ; c = toupper(_getch()) ;
00001084  2F00      1483          move.l    D0,-(A7)
00001086  4EB8 0B78 1484          jsr       __getch
0000108A  2200      1485          move.l    D0,D1
0000108C  201F      1486          move.l    (A7)+,D0
0000108E  2F01      1487          move.l    D1,-(A7)
00001090  4EB9 0000 1488          jsr       _toupper
00001094  5618      
00001096  584F      1489          addq.w    #4,A7
00001098  1C00      1490          move.b    D0,D6
                    1491   ; if(c == 0x1b )      // if break
0000109A  0C06 001B 1492          cmp.b     #27,D6
0000109E  6604      1493          bne.s     Load_SRecordFile_6
                    1494   ; return;
000010A0  6000 010C 1495          bra       Load_SRecordFile_8
                    1496   Load_SRecordFile_6:
000010A4  0C06 0053 1497          cmp.b     #83,D6
000010A8  66DA      1498          bne       Load_SRecordFile_4
                    1499   ; }while(c != (char)('S'));   // wait for S start of header
                    1500   ; HeaderType = _getch() ;
000010AA  4EB8 0B78 1501          jsr       __getch
000010AE  1600      1502          move.b    D0,D3
                    1503   ; if(HeaderType == (char)('0') || HeaderType == (char)('5'))       // ignore s0, s5 records
000010B0  0C03 0030 1504          cmp.b     #48,D3
000010B4  6706      1505          beq.s     Load_SRecordFile_11
000010B6  0C03 0035 1506          cmp.b     #53,D3
000010BA  6604      1507          bne.s     Load_SRecordFile_9
                    1508   Load_SRecordFile_11:
                    1509   ; continue ;
000010BC  6000 00B4 1510          bra       Load_SRecordFile_2
                    1511   Load_SRecordFile_9:
                    1512   ; if(HeaderType >= (char)('7'))
000010C0  0C03 0037 1513          cmp.b     #55,D3
000010C4  6D04      1514          blt.s     Load_SRecordFile_12
                    1515   ; break ;                 // end load on s7,s8,s9 records
000010C6  6000 00AE 1516          bra       Load_SRecordFile_3
                    1517   Load_SRecordFile_12:
                    1518   ; // get the bytecount
                    1519   ; ByteCount = Get2HexDigits(&CheckSum) ;
000010CA  2F0A      1520          move.l    A2,-(A7)
000010CC  4E93      1521          jsr       (A3)
000010CE  584F      1522          addq.w    #4,A7
000010D0  2D40 FFF6 1523          move.l    D0,-10(A6)
                    1524   ; // get the address, 4 digits for s1, 6 digits for s2, and 8 digits for s3 record
                    1525   ; if(HeaderType == (char)('1')) {
000010D4  0C03 0031 1526          cmp.b     #49,D3
000010D8  660E      1527          bne.s     Load_SRecordFile_14
                    1528   ; AddressSize = 2 ;       // 2 byte address
000010DA  7A02      1529          moveq     #2,D5
                    1530   ; Address = Get4HexDigits(&CheckSum);
000010DC  2F0A      1531          move.l    A2,-(A7)
000010DE  4EB8 0C60 1532          jsr       _Get4HexDigits
000010E2  584F      1533          addq.w    #4,A7
000010E4  2800      1534          move.l    D0,D4
000010E6  6020      1535          bra.s     Load_SRecordFile_17
                    1536   Load_SRecordFile_14:
                    1537   ; }
                    1538   ; else if (HeaderType == (char)('2')) {
000010E8  0C03 0032 1539          cmp.b     #50,D3
000010EC  660E      1540          bne.s     Load_SRecordFile_16
                    1541   ; AddressSize = 3 ;       // 3 byte address
000010EE  7A03      1542          moveq     #3,D5
                    1543   ; Address = Get6HexDigits(&CheckSum) ;
000010F0  2F0A      1544          move.l    A2,-(A7)
000010F2  4EB8 0C86 1545          jsr       _Get6HexDigits
000010F6  584F      1546          addq.w    #4,A7
000010F8  2800      1547          move.l    D0,D4
000010FA  600C      1548          bra.s     Load_SRecordFile_17
                    1549   Load_SRecordFile_16:
                    1550   ; }
                    1551   ; else    {
                    1552   ; AddressSize = 4 ;       // 4 byte address
000010FC  7A04      1553          moveq     #4,D5
                    1554   ; Address = Get8HexDigits(&CheckSum) ;
000010FE  2F0A      1555          move.l    A2,-(A7)
00001100  4EB8 0CAC 1556          jsr       _Get8HexDigits
00001104  584F      1557          addq.w    #4,A7
00001106  2800      1558          move.l    D0,D4
                    1559   Load_SRecordFile_17:
                    1560   ; }
                    1561   ; RamPtr = (char *)(Address) ;                            // point to download area
00001108  2D44 FFFC 1562          move.l    D4,-4(A6)
                    1563   ; NumDataBytesToRead = ByteCount - AddressSize - 1 ;
0000110C  202E FFF6 1564          move.l    -10(A6),D0
00001110  9085      1565          sub.l     D5,D0
00001112  5380      1566          subq.l    #1,D0
00001114  2D40 FFE6 1567          move.l    D0,-26(A6)
                    1568   ; for(i = 0; i < NumDataBytesToRead; i ++) {     // read in remaining data bytes (ignore address and checksum at the end
00001118  4282      1569          clr.l     D2
                    1570   Load_SRecordFile_18:
0000111A  B4AE FFE6 1571          cmp.l     -26(A6),D2
0000111E  6C1C      1572          bge.s     Load_SRecordFile_20
                    1573   ; DataByte = Get2HexDigits(&CheckSum) ;
00001120  2F0A      1574          move.l    A2,-(A7)
00001122  4E93      1575          jsr       (A3)
00001124  584F      1576          addq.w    #4,A7
00001126  2D40 FFE2 1577          move.l    D0,-30(A6)
                    1578   ; *RamPtr++ = DataByte ;                      // store downloaded byte in Ram at specified address
0000112A  202E FFE2 1579          move.l    -30(A6),D0
0000112E  206E FFFC 1580          move.l    -4(A6),A0
00001132  52AE FFFC 1581          addq.l    #1,-4(A6)
00001136  1080      1582          move.b    D0,(A0)
00001138  5282      1583          addq.l    #1,D2
0000113A  60DE      1584          bra       Load_SRecordFile_18
                    1585   Load_SRecordFile_20:
                    1586   ; }
                    1587   ; // checksum is the 1's complement of the sum of all data pairs following the bytecount, i.e. it includes the address and the data itself
                    1588   ; ReadCheckSum = Get2HexDigits(0) ;
0000113C  42A7      1589          clr.l     -(A7)
0000113E  4E93      1590          jsr       (A3)
00001140  584F      1591          addq.w    #4,A7
00001142  1D40 FFFB 1592          move.b    D0,-5(A6)
                    1593   ; if((~CheckSum&0Xff) != (ReadCheckSum&0Xff))   {
00001146  1012      1594          move.b    (A2),D0
00001148  4600      1595          not.b     D0
0000114A  4880      1596          ext.w     D0
0000114C  C07C 00FF 1597          and.w     #255,D0
00001150  122E FFFB 1598          move.b    -5(A6),D1
00001154  4881      1599          ext.w     D1
00001156  C27C 00FF 1600          and.w     #255,D1
0000115A  B041      1601          cmp.w     D1,D0
0000115C  6708      1602          beq.s     Load_SRecordFile_21
                    1603   ; LoadFailed = 1 ;
0000115E  7E01      1604          moveq     #1,D7
                    1605   ; FailedAddress = Address ;
00001160  2D44 FFEA 1606          move.l    D4,-22(A6)
                    1607   ; break;
00001164  6010      1608          bra.s     Load_SRecordFile_3
                    1609   Load_SRecordFile_21:
                    1610   ; }
                    1611   ; putchar('\n') ;
00001166  4878 000A 1612          pea       10
0000116A  4EB9 0000 1613          jsr       _putch
0000116E  5536      
00001170  584F      1614          addq.w    #4,A7
                    1615   Load_SRecordFile_2:
00001172  6000 FF0E 1616          bra       Load_SRecordFile_1
                    1617   Load_SRecordFile_3:
                    1618   ; }
                    1619   ; if(LoadFailed == 1) {
00001176  0C87 0000 1620          cmp.l     #1,D7
0000117A  0001      
0000117C  6610      1621          bne.s     Load_SRecordFile_23
                    1622   ; printf("\r\nLoad Failed at Address = [$%08X]\r\n", FailedAddress) ;
0000117E  2F2E FFEA 1623          move.l    -22(A6),-(A7)
00001182  4879 0084 1624          pea       @m68kde~1_24.L
00001186  080C      
00001188  4E94      1625          jsr       (A4)
0000118A  504F      1626          addq.w    #8,A7
0000118C  600E      1627          bra.s     Load_SRecordFile_24
                    1628   Load_SRecordFile_23:
                    1629   ; }
                    1630   ; else
                    1631   ; puts("\r\nLoad Successful.....\r\n");
0000118E  4879 0084 1632          pea       @m68kde~1_25.L
00001192  0832      
00001194  4EB9 0000 1633          jsr       _puts
00001198  54FE      
0000119A  584F      1634          addq.w    #4,A7
                    1635   Load_SRecordFile_24:
                    1636   ; // pause at the end to wait for download to finish transmitting at the end of S8 etc
                    1637   ; for(i = 0; i < 400000; i ++)
0000119C  4282      1638          clr.l     D2
                    1639   Load_SRecordFile_25:
0000119E  0C82 0006 1640          cmp.l     #400000,D2
000011A2  1A80      
000011A4  6C04      1641          bge.s     Load_SRecordFile_27
000011A6  5282      1642          addq.l    #1,D2
000011A8  60F4      1643          bra       Load_SRecordFile_25
                    1644   Load_SRecordFile_27:
                    1645   ; ;
                    1646   ; FlushKeyboard() ;
000011AA  4EB8 0BAE 1647          jsr       _FlushKeyboard
                    1648   Load_SRecordFile_8:
000011AE  4CDF 1CFC 1649          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4
000011B2  4E5E      1650          unlk      A6
000011B4  4E75      1651          rts
                    1652   ; }
                    1653   ; void MemoryChange(void)
                    1654   ; {
                    1655   _MemoryChange:
000011B6  48E7 3820 1656          movem.l   D2/D3/D4/A2,-(A7)
000011BA  45F9 0000 1657          lea       _printf.L,A2
000011BE  5644      
                    1658   ; unsigned char *RamPtr,c ; // pointer to memory
                    1659   ; int Data ;
                    1660   ; printf("\r\nExamine and Change Memory") ;
000011C0  4879 0084 1661          pea       @m68kde~1_26.L
000011C4  084C      
000011C6  4E92      1662          jsr       (A2)
000011C8  584F      1663          addq.w    #4,A7
                    1664   ; printf("\r\n<ESC> to Stop, <SPACE> to Advance, '-' to Go Back, <DATA> to change") ;
000011CA  4879 0084 1665          pea       @m68kde~1_27.L
000011CE  0868      
000011D0  4E92      1666          jsr       (A2)
000011D2  584F      1667          addq.w    #4,A7
                    1668   ; printf("\r\nEnter Address: ") ;
000011D4  4879 0084 1669          pea       @m68kde~1_28.L
000011D8  08AE      
000011DA  4E92      1670          jsr       (A2)
000011DC  584F      1671          addq.w    #4,A7
                    1672   ; RamPtr = Get8HexDigits(0) ;
000011DE  42A7      1673          clr.l     -(A7)
000011E0  4EB8 0CAC 1674          jsr       _Get8HexDigits
000011E4  584F      1675          addq.w    #4,A7
000011E6  2600      1676          move.l    D0,D3
                    1677   ; while(1)    {
                    1678   MemoryChange_1:
                    1679   ; printf("\r\n[%08x] : %02x  ", RamPtr, *RamPtr) ;
000011E8  2043      1680          move.l    D3,A0
000011EA  1210      1681          move.b    (A0),D1
000011EC  C2BC 0000 1682          and.l     #255,D1
000011F0  00FF      
000011F2  2F01      1683          move.l    D1,-(A7)
000011F4  2F03      1684          move.l    D3,-(A7)
000011F6  4879 0084 1685          pea       @m68kde~1_29.L
000011FA  08C0      
000011FC  4E92      1686          jsr       (A2)
000011FE  DEFC 000C 1687          add.w     #12,A7
                    1688   ; c = tolower(_getch()) ;
00001202  2F00      1689          move.l    D0,-(A7)
00001204  4EB8 0B78 1690          jsr       __getch
00001208  2200      1691          move.l    D0,D1
0000120A  201F      1692          move.l    (A7)+,D0
0000120C  2F01      1693          move.l    D1,-(A7)
0000120E  4EB9 0000 1694          jsr       _tolower
00001212  55A2      
00001214  584F      1695          addq.w    #4,A7
00001216  1400      1696          move.b    D0,D2
                    1697   ; if(c == (char)(0x1b))
00001218  0C02 001B 1698          cmp.b     #27,D2
0000121C  6604      1699          bne.s     MemoryChange_4
                    1700   ; return ;                                // abort on escape
0000121E  6000 0090 1701          bra       MemoryChange_6
                    1702   MemoryChange_4:
                    1703   ; else if((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f')) {  // are we trying to change data at this location by entering a hex char
00001222  0C02 0030 1704          cmp.b     #48,D2
00001226  6506      1705          blo.s     MemoryChange_10
00001228  0C02 0039 1706          cmp.b     #57,D2
0000122C  6310      1707          bls.s     MemoryChange_9
                    1708   MemoryChange_10:
0000122E  0C02 0061 1709          cmp.b     #97,D2
00001232  6500 006E 1710          blo       MemoryChange_7
00001236  0C02 0066 1711          cmp.b     #102,D2
0000123A  6200 0066 1712          bhi       MemoryChange_7
                    1713   MemoryChange_9:
                    1714   ; Data = (xtod(c) << 4) | (xtod(_getch()));
0000123E  C4BC 0000 1715          and.l     #255,D2
00001242  00FF      
00001244  2F02      1716          move.l    D2,-(A7)
00001246  4EB8 0BDA 1717          jsr       _xtod
0000124A  584F      1718          addq.w    #4,A7
0000124C  C0BC 0000 1719          and.l     #255,D0
00001250  00FF      
00001252  E980      1720          asl.l     #4,D0
00001254  2F00      1721          move.l    D0,-(A7)
00001256  2F01      1722          move.l    D1,-(A7)
00001258  4EB8 0B78 1723          jsr       __getch
0000125C  221F      1724          move.l    (A7)+,D1
0000125E  2F00      1725          move.l    D0,-(A7)
00001260  4EB8 0BDA 1726          jsr       _xtod
00001264  584F      1727          addq.w    #4,A7
00001266  2200      1728          move.l    D0,D1
00001268  201F      1729          move.l    (A7)+,D0
0000126A  C2BC 0000 1730          and.l     #255,D1
0000126E  00FF      
00001270  8081      1731          or.l      D1,D0
00001272  2800      1732          move.l    D0,D4
                    1733   ; *RamPtr = (char)(Data) ;
00001274  2043      1734          move.l    D3,A0
00001276  1084      1735          move.b    D4,(A0)
                    1736   ; if(*RamPtr != Data) {
00001278  2043      1737          move.l    D3,A0
0000127A  1010      1738          move.b    (A0),D0
0000127C  C0BC 0000 1739          and.l     #255,D0
00001280  00FF      
00001282  B084      1740          cmp.l     D4,D0
00001284  671A      1741          beq.s     MemoryChange_11
                    1742   ; printf("\r\nWarning Change Failed: Wrote [%02x], Read [%02x]", Data, *RamPtr) ;
00001286  2043      1743          move.l    D3,A0
00001288  1210      1744          move.b    (A0),D1
0000128A  C2BC 0000 1745          and.l     #255,D1
0000128E  00FF      
00001290  2F01      1746          move.l    D1,-(A7)
00001292  2F04      1747          move.l    D4,-(A7)
00001294  4879 0084 1748          pea       @m68kde~1_30.L
00001298  08D2      
0000129A  4E92      1749          jsr       (A2)
0000129C  DEFC 000C 1750          add.w     #12,A7
                    1751   MemoryChange_11:
000012A0  6008      1752          bra.s     MemoryChange_13
                    1753   MemoryChange_7:
                    1754   ; }
                    1755   ; }
                    1756   ; else if(c == (char)('-'))
000012A2  0C02 002D 1757          cmp.b     #45,D2
000012A6  6602      1758          bne.s     MemoryChange_13
                    1759   ; RamPtr -= 2 ; ;
000012A8  5583      1760          subq.l    #2,D3
                    1761   MemoryChange_13:
                    1762   ; RamPtr ++ ;
000012AA  5283      1763          addq.l    #1,D3
000012AC  6000 FF3A 1764          bra       MemoryChange_1
                    1765   MemoryChange_6:
000012B0  4CDF 041C 1766          movem.l   (A7)+,D2/D3/D4/A2
000012B4  4E75      1767          rts
                    1768   ; }
                    1769   ; }
                    1770   ; void ProgramFlashChip(void)
                    1771   ; {
                    1772   _ProgramFlashChip:
000012B6  4E56 FFF8 1773          link      A6,#-8
000012BA  48E7 3020 1774          movem.l   D2/D3/A2,-(A7)
000012BE  45F9 0000 1775          lea       _printf.L,A2
000012C2  5644      
                    1776   ; char c;
                    1777   ; int i ;
                    1778   ; unsigned char *RamPtr = (unsigned char *)(ProgramStart) ;      // pointer to start of user program
000012C4  263C 0080 1779          move.l    #8388608,D3
000012C8  0000      
                    1780   ; unsigned char *FlashPtr = (unsigned char *)(FlashStart);		// pointer to flash chip base address;
000012CA  2D7C 0100 1781          move.l    #16777216,-4(A6)
000012CE  0000 FFFC 
                    1782   ; printf("\r\nProgram Flash Memory.....[Y/N]?") ;
000012D2  4879 0084 1783          pea       @m68kde~1_31.L
000012D6  0906      
000012D8  4E92      1784          jsr       (A2)
000012DA  584F      1785          addq.w    #4,A7
                    1786   ; c = tolower(_getch()) ;
000012DC  2F00      1787          move.l    D0,-(A7)
000012DE  4EB8 0B78 1788          jsr       __getch
000012E2  2200      1789          move.l    D0,D1
000012E4  201F      1790          move.l    (A7)+,D0
000012E6  2F01      1791          move.l    D1,-(A7)
000012E8  4EB9 0000 1792          jsr       _tolower
000012EC  55A2      
000012EE  584F      1793          addq.w    #4,A7
000012F0  1D40 FFFB 1794          move.b    D0,-5(A6)
                    1795   ; if(c != 'y') {
000012F4  102E FFFB 1796          move.b    -5(A6),D0
000012F8  0C00 0079 1797          cmp.b     #121,D0
000012FC  670E      1798          beq.s     ProgramFlashChip_1
                    1799   ; printf("\r\nProgramming ABANDONED.....") ;
000012FE  4879 0084 1800          pea       @m68kde~1_32.L
00001302  0928      
00001304  4E92      1801          jsr       (A2)
00001306  584F      1802          addq.w    #4,A7
                    1803   ; return ;
00001308  6000 00B8 1804          bra       ProgramFlashChip_3
                    1805   ProgramFlashChip_1:
                    1806   ; }
                    1807   ; FlashReset() ;
0000130C  4EB8 0002 1808          jsr       _FlashReset
                    1809   ; printf("\r\nErasing Flash Memory.....") ;
00001310  4879 0084 1810          pea       @m68kde~1_33.L
00001314  0946      
00001316  4E92      1811          jsr       (A2)
00001318  584F      1812          addq.w    #4,A7
                    1813   ; //erase first 64 as 8 sectors of 8k each
                    1814   ; for(i = 0; i < 8; i++)
0000131A  4282      1815          clr.l     D2
                    1816   ProgramFlashChip_4:
0000131C  0C82 0000 1817          cmp.l     #8,D2
00001320  0008      
00001322  6C0C      1818          bge.s     ProgramFlashChip_6
                    1819   ; FlashSectorErase( i );
00001324  2F02      1820          move.l    D2,-(A7)
00001326  4EB8 0004 1821          jsr       _FlashSectorErase
0000132A  584F      1822          addq.w    #4,A7
0000132C  5282      1823          addq.l    #1,D2
0000132E  60EC      1824          bra       ProgramFlashChip_4
                    1825   ProgramFlashChip_6:
                    1826   ; //erase next sectors of 64 k block
                    1827   ; for(i = 1; i < Num_FlashSectors + 1 ; i++)
00001330  7401      1828          moveq     #1,D2
                    1829   ProgramFlashChip_7:
00001332  0C82 0000 1830          cmp.l     #4,D2
00001336  0004      
00001338  6C10      1831          bge.s     ProgramFlashChip_9
                    1832   ; FlashSectorErase( i << 3 );
0000133A  2202      1833          move.l    D2,D1
0000133C  E781      1834          asl.l     #3,D1
0000133E  2F01      1835          move.l    D1,-(A7)
00001340  4EB8 0004 1836          jsr       _FlashSectorErase
00001344  584F      1837          addq.w    #4,A7
00001346  5282      1838          addq.l    #1,D2
00001348  60E8      1839          bra       ProgramFlashChip_7
                    1840   ProgramFlashChip_9:
                    1841   ; printf("\r\nProgramming Flash Memory.....") ;
0000134A  4879 0084 1842          pea       @m68kde~1_34.L
0000134E  0962      
00001350  4E92      1843          jsr       (A2)
00001352  584F      1844          addq.w    #4,A7
                    1845   ; for(i = 0; i < FlashSize; i ++) {   // i = address offset to the Flash chip
00001354  4282      1846          clr.l     D2
                    1847   ProgramFlashChip_10:
00001356  0C82 0003 1848          cmp.l     #262143,D2
0000135A  FFFF      
0000135C  6C1A      1849          bge.s     ProgramFlashChip_12
                    1850   ; FlashProgram(i, *RamPtr++) ;    // address offset into flash, byte data
0000135E  2043      1851          move.l    D3,A0
00001360  5283      1852          addq.l    #1,D3
00001362  1210      1853          move.b    (A0),D1
00001364  C2BC 0000 1854          and.l     #255,D1
00001368  00FF      
0000136A  2F01      1855          move.l    D1,-(A7)
0000136C  2F02      1856          move.l    D2,-(A7)
0000136E  4EB8 000C 1857          jsr       _FlashProgram
00001372  504F      1858          addq.w    #8,A7
00001374  5282      1859          addq.l    #1,D2
00001376  60DE      1860          bra       ProgramFlashChip_10
                    1861   ProgramFlashChip_12:
                    1862   ; }
                    1863   ; printf("\r\nVerifying.....");
00001378  4879 0084 1864          pea       @m68kde~1_35.L
0000137C  0982      
0000137E  4E92      1865          jsr       (A2)
00001380  584F      1866          addq.w    #4,A7
                    1867   ; FlashReset() ;
00001382  4EB8 0002 1868          jsr       _FlashReset
                    1869   ; RamPtr = (unsigned char *)(ProgramStart) ;      // reset pointer to start of user program
00001386  263C 0080 1870          move.l    #8388608,D3
0000138A  0000      
                    1871   ; for(i = 0; i < FlashSize; i ++) {
0000138C  4282      1872          clr.l     D2
                    1873   ProgramFlashChip_13:
0000138E  0C82 0003 1874          cmp.l     #262143,D2
00001392  FFFF      
00001394  6C22      1875          bge.s     ProgramFlashChip_15
                    1876   ; if(FlashRead(i) != *RamPtr++) {
00001396  2F02      1877          move.l    D2,-(A7)
00001398  4EB8 0014 1878          jsr       _FlashRead
0000139C  584F      1879          addq.w    #4,A7
0000139E  2043      1880          move.l    D3,A0
000013A0  5283      1881          addq.l    #1,D3
000013A2  B010      1882          cmp.b     (A0),D0
000013A4  670E      1883          beq.s     ProgramFlashChip_16
                    1884   ; RamPtr -- ;
000013A6  5383      1885          subq.l    #1,D3
                    1886   ; printf("\r\nFAILED.....") ;
000013A8  4879 0084 1887          pea       @m68kde~1_36.L
000013AC  0994      
000013AE  4E92      1888          jsr       (A2)
000013B0  584F      1889          addq.w    #4,A7
                    1890   ; return ;
000013B2  600E      1891          bra.s     ProgramFlashChip_3
                    1892   ProgramFlashChip_16:
000013B4  5282      1893          addq.l    #1,D2
000013B6  60D6      1894          bra       ProgramFlashChip_13
                    1895   ProgramFlashChip_15:
                    1896   ; }
                    1897   ; }
                    1898   ; printf("\r\nPASSED") ;
000013B8  4879 0084 1899          pea       @m68kde~1_37.L
000013BC  09A2      
000013BE  4E92      1900          jsr       (A2)
000013C0  584F      1901          addq.w    #4,A7
                    1902   ProgramFlashChip_3:
000013C2  4CDF 040C 1903          movem.l   (A7)+,D2/D3/A2
000013C6  4E5E      1904          unlk      A6
000013C8  4E75      1905          rts
                    1906   ; }
                    1907   ; //
                    1908   ; // Load a program from Flash Chip and copies to Dram
                    1909   ; //
                    1910   ; void LoadFromFlashChip(void)
                    1911   ; {
                    1912   _LoadFromFlashChip:
000013CA  4E56 FFF4 1913          link      A6,#-12
000013CE  48E7 2020 1914          movem.l   D2/A2,-(A7)
000013D2  45F9 0000 1915          lea       _printf.L,A2
000013D6  5644      
                    1916   ; char c;
                    1917   ; int i ;
                    1918   ; unsigned char *RamPtr = (unsigned char *)(ProgramStart) ;      // pointer to start of user program
000013D8  2D7C 0080 1919          move.l    #8388608,-8(A6)
000013DC  0000 FFF8 
                    1920   ; unsigned char *FlashPtr = (unsigned char *)(FlashStart);		// pointer to flash chip base address;
000013E0  2D7C 0100 1921          move.l    #16777216,-4(A6)
000013E4  0000 FFFC 
                    1922   ; FlashReset() ;
000013E8  4EB8 0002 1923          jsr       _FlashReset
                    1924   ; // test for type of copy, software or DMA by reading switch 17 (Port B bit 1) on DE2 board.
                    1925   ; printf("\r\nLoading Program From Flash....Using ") ;
000013EC  4879 0084 1926          pea       @m68kde~1_38.L
000013F0  09AC      
000013F2  4E92      1927          jsr       (A2)
000013F4  584F      1928          addq.w    #4,A7
                    1929   ; if(((char)(PortC & 0x02)) != (char)(0x02))    {
000013F6  1039 0040 1930          move.b    4194308,D0
000013FA  0004      
000013FC  C03C 0002 1931          and.b     #2,D0
00001400  0C00 0002 1932          cmp.b     #2,D0
00001404  672E      1933          beq.s     LoadFromFlashChip_1
                    1934   ; printf("Software") ;
00001406  4879 0084 1935          pea       @m68kde~1_39.L
0000140A  09D4      
0000140C  4E92      1936          jsr       (A2)
0000140E  584F      1937          addq.w    #4,A7
                    1938   ; for(i = 0; i < FlashSize; i ++) {
00001410  4282      1939          clr.l     D2
                    1940   LoadFromFlashChip_3:
00001412  0C82 0003 1941          cmp.l     #262143,D2
00001416  FFFF      
00001418  6C18      1942          bge.s     LoadFromFlashChip_5
                    1943   ; *RamPtr++ =  FlashPtr[i << 1] ;
0000141A  206E FFFC 1944          move.l    -4(A6),A0
0000141E  2002      1945          move.l    D2,D0
00001420  E380      1946          asl.l     #1,D0
00001422  226E FFF8 1947          move.l    -8(A6),A1
00001426  52AE FFF8 1948          addq.l    #1,-8(A6)
0000142A  12B0 0800 1949          move.b    0(A0,D0.L),(A1)
0000142E  5282      1950          addq.l    #1,D2
00001430  60E0      1951          bra       LoadFromFlashChip_3
                    1952   LoadFromFlashChip_5:
00001432  600A      1953          bra.s     LoadFromFlashChip_2
                    1954   LoadFromFlashChip_1:
                    1955   ; }
                    1956   ; }
                    1957   ; else    {
                    1958   ; printf("DMA") ;
00001434  4879 0084 1959          pea       @m68kde~1_40.L
00001438  09DE      
0000143A  4E92      1960          jsr       (A2)
0000143C  584F      1961          addq.w    #4,A7
                    1962   LoadFromFlashChip_2:
                    1963   ; // todo - program a DMA controller if one is present
                    1964   ; }
                    1965   ; printf("\r\nProgram Loaded.....") ;
0000143E  4879 0084 1966          pea       @m68kde~1_41.L
00001442  09E2      
00001444  4E92      1967          jsr       (A2)
00001446  584F      1968          addq.w    #4,A7
00001448  4CDF 0404 1969          movem.l   (A7)+,D2/A2
0000144C  4E5E      1970          unlk      A6
0000144E  4E75      1971          rts
                    1972   ; }
                    1973   ; // get rid of excess spaces
                    1974   ; void FormatInstructionForTrace(void)
                    1975   ; {
                    1976   _FormatInstructionForTrace:
00001450  4E56 FF9C 1977          link      A6,#-100
00001454  48E7 3C20 1978          movem.l   D2/D3/D4/D5/A2,-(A7)
00001458  45EE FF9C 1979          lea       -100(A6),A2
                    1980   ; unsigned short int i ;
                    1981   ; char c, temp[100], *iptr, *tempptr ;
                    1982   ; for(i=0; i < 100; i++)
0000145C  4244      1983          clr.w     D4
                    1984   FormatInstructionForTrace_1:
0000145E  0C44 0064 1985          cmp.w     #100,D4
00001462  640E      1986          bhs.s     FormatInstructionForTrace_3
                    1987   ; temp[i] = 0 ;
00001464  C8BC 0000 1988          and.l     #65535,D4
00001468  FFFF      
0000146A  4232 4800 1989          clr.b     0(A2,D4.L)
0000146E  5244      1990          addq.w    #1,D4
00001470  60EC      1991          bra       FormatInstructionForTrace_1
                    1992   FormatInstructionForTrace_3:
                    1993   ; iptr = Instruction ;
00001472  41F9 0084 1994          lea       _Instruction.L,A0
00001476  04DC      
00001478  2408      1995          move.l    A0,D2
                    1996   ; tempptr = temp ;
0000147A  2A0A      1997          move.l    A2,D5
                    1998   ; do{
                    1999   FormatInstructionForTrace_4:
                    2000   ; c = *iptr++ ;
0000147C  2042      2001          move.l    D2,A0
0000147E  5282      2002          addq.l    #1,D2
00001480  1610      2003          move.b    (A0),D3
                    2004   ; *tempptr++ = c ;  // copy chars over
00001482  2045      2005          move.l    D5,A0
00001484  5285      2006          addq.l    #1,D5
00001486  1083      2007          move.b    D3,(A0)
                    2008   ; if(c == ' ')  {   // if copied space
00001488  0C03 0020 2009          cmp.b     #32,D3
0000148C  6622      2010          bne.s     FormatInstructionForTrace_6
                    2011   ; while(*iptr == ' ') {
                    2012   FormatInstructionForTrace_8:
0000148E  2042      2013          move.l    D2,A0
00001490  1010      2014          move.b    (A0),D0
00001492  0C00 0020 2015          cmp.b     #32,D0
00001496  660C      2016          bne.s     FormatInstructionForTrace_10
                    2017   ; if(*iptr == 0)  // if end of string then done
00001498  2042      2018          move.l    D2,A0
0000149A  1010      2019          move.b    (A0),D0
0000149C  6602      2020          bne.s     FormatInstructionForTrace_11
                    2021   ; break ;
0000149E  6004      2022          bra.s     FormatInstructionForTrace_10
                    2023   FormatInstructionForTrace_11:
                    2024   ; iptr++ ; // skip over remaining spaces
000014A0  5282      2025          addq.l    #1,D2
000014A2  60EA      2026          bra       FormatInstructionForTrace_8
                    2027   FormatInstructionForTrace_10:
                    2028   ; }
                    2029   ; strcat(tempptr,iptr) ;
000014A4  2F02      2030          move.l    D2,-(A7)
000014A6  2F05      2031          move.l    D5,-(A7)
000014A8  4EB9 0000 2032          jsr       _strcat
000014AC  5602      
000014AE  504F      2033          addq.w    #8,A7
                    2034   FormatInstructionForTrace_6:
000014B0  4A03      2035          tst.b     D3
000014B2  66C8      2036          bne       FormatInstructionForTrace_4
                    2037   ; }
                    2038   ; }while(c != 0) ;
                    2039   ; strcpyInstruction(temp) ;
000014B4  2F0A      2040          move.l    A2,-(A7)
000014B6  4EB8 0CEE 2041          jsr       _strcpyInstruction
000014BA  584F      2042          addq.w    #4,A7
000014BC  4CDF 043C 2043          movem.l   (A7)+,D2/D3/D4/D5/A2
000014C0  4E5E      2044          unlk      A6
000014C2  4E75      2045          rts
                    2046   ; }
                    2047   ; //////////////////////////////////////////////////////////////////////////////////////////////////
                    2048   ; // IMPORTANT
                    2049   ; // Softcore 68k does not support the Native Trace mode of the original 68000 so tracing
                    2050   ; // has to be done with an interrupt (IRQ Level 6)
                    2051   ; //
                    2052   ; // To allow the 68000 to execute one more instruction after each pseudo trace (IRQ6)
                    2053   ; // the IRQ is removed in hardware once the TG68 reads the IRQ autovector (i.e. acknowledges the IRQ)
                    2054   ; //
                    2055   ; // on return from the IRQ service handler, the first access to the user memory program space
                    2056   ; // generates a fresh IRQ (in hardware) to generate a new trace, this allows the tg68 to
                    2057   ; // execute one more new instruction (without it the TG68 would trace on the same instruction
                    2058   ; // each time and not after the next one). It also means it doesn't simgle step outside the user
                    2059   ; // program area
                    2060   ; //
                    2061   ; // The bottom line is the Trace handler, which includes the Dump registers below
                    2062   ; // cannot access the user memory to display for example the Instruction Opcode or to disassemble etc
                    2063   ; // as this would lead to a new IRQ being reset and the TG68 would trace on same instruction
                    2064   ; // NOT SURE THIS IS TRUE NOW THAT TRACE HANDLER HAS BEEN MODIVIED TO NOT AUTOMATICALLY GENERATE A TRACE EXCEPTION
                    2065   ; // INSTEAD IT IS DONE IN THE 'N' COMMAND FOR NEXT
                    2066   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    2067   ; void DumpRegisters()
                    2068   ; {
                    2069   _DumpRegisters:
000014C4  48E7 3F3C 2070          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
000014C8  45F9 0000 2071          lea       _putch.L,A2
000014CC  5536      
000014CE  47F9 0000 2072          lea       _printf.L,A3
000014D2  5644      
000014D4  49F9 0084 2073          lea       _SR.L,A4
000014D8  0126      
000014DA  4BF9 0084 2074          lea       _WatchPointString.L,A5
000014DE  01BC      
                    2075   ; short i, x, j, k ;
                    2076   ; unsigned char c, *BytePointer;
                    2077   ; // buld up strings for displaying watchpoints
                    2078   ; for(x = 0; x < (short)(8); x++)
000014E0  4242      2079          clr.w     D2
                    2080   DumpRegisters_1:
000014E2  0C42 0008 2081          cmp.w     #8,D2
000014E6  6C00 01C6 2082          bge       DumpRegisters_3
                    2083   ; {
                    2084   ; if(WatchPointSetOrCleared[x] == 1)
000014EA  48C2      2085          ext.l     D2
000014EC  2002      2086          move.l    D2,D0
000014EE  E588      2087          lsl.l     #2,D0
000014F0  41F9 0084 2088          lea       _WatchPointSetOrCleared.L,A0
000014F4  019C      
000014F6  2030 0800 2089          move.l    0(A0,D0.L),D0
000014FA  0C80 0000 2090          cmp.l     #1,D0
000014FE  0001      
00001500  6600 0186 2091          bne       DumpRegisters_4
                    2092   ; {
                    2093   ; sprintf(WatchPointString[x], "$%08X  ", WatchPointAddress[x]) ;
00001504  48C2      2094          ext.l     D2
00001506  2202      2095          move.l    D2,D1
00001508  E589      2096          lsl.l     #2,D1
0000150A  41F9 0084 2097          lea       _WatchPointAddress.L,A0
0000150E  017C      
00001510  2F30 1800 2098          move.l    0(A0,D1.L),-(A7)
00001514  4879 0084 2099          pea       @m68kde~1_42.L
00001518  09F8      
0000151A  220D      2100          move.l    A5,D1
0000151C  48C2      2101          ext.l     D2
0000151E  2F00      2102          move.l    D0,-(A7)
00001520  2002      2103          move.l    D2,D0
00001522  C1FC 0064 2104          muls      #100,D0
00001526  D280      2105          add.l     D0,D1
00001528  201F      2106          move.l    (A7)+,D0
0000152A  2F01      2107          move.l    D1,-(A7)
0000152C  4EB9 0000 2108          jsr       _sprintf
00001530  55CE      
00001532  DEFC 000C 2109          add.w     #12,A7
                    2110   ; BytePointer = (char *)(WatchPointAddress[x]) ;
00001536  48C2      2111          ext.l     D2
00001538  2002      2112          move.l    D2,D0
0000153A  E588      2113          lsl.l     #2,D0
0000153C  41F9 0084 2114          lea       _WatchPointAddress.L,A0
00001540  017C      
00001542  2A30 0800 2115          move.l    0(A0,D0.L),D5
                    2116   ; for(j = 0; j < (short)(16); j+=2)
00001546  4243      2117          clr.w     D3
                    2118   DumpRegisters_6:
00001548  0C43 0010 2119          cmp.w     #16,D3
0000154C  6C00 0082 2120          bge       DumpRegisters_8
                    2121   ; {
                    2122   ; for(k = 0; k < (short)(2); k++)
00001550  4246      2123          clr.w     D6
                    2124   DumpRegisters_9:
00001552  0C46 0002 2125          cmp.w     #2,D6
00001556  6C00 0052 2126          bge       DumpRegisters_11
                    2127   ; {
                    2128   ; sprintf(TempString, "%02X", BytePointer[j+k]) ;
0000155A  2045      2129          move.l    D5,A0
0000155C  48C3      2130          ext.l     D3
0000155E  2203      2131          move.l    D3,D1
00001560  48C6      2132          ext.l     D6
00001562  D286      2133          add.l     D6,D1
00001564  1230 1800 2134          move.b    0(A0,D1.L),D1
00001568  C2BC 0000 2135          and.l     #255,D1
0000156C  00FF      
0000156E  2F01      2136          move.l    D1,-(A7)
00001570  4879 0084 2137          pea       @m68kde~1_43.L
00001574  0A00      
00001576  4879 0084 2138          pea       _TempString.L
0000157A  0540      
0000157C  4EB9 0000 2139          jsr       _sprintf
00001580  55CE      
00001582  DEFC 000C 2140          add.w     #12,A7
                    2141   ; strcat(WatchPointString[x], TempString) ;
00001586  4879 0084 2142          pea       _TempString.L
0000158A  0540      
0000158C  220D      2143          move.l    A5,D1
0000158E  48C2      2144          ext.l     D2
00001590  2F00      2145          move.l    D0,-(A7)
00001592  2002      2146          move.l    D2,D0
00001594  C1FC 0064 2147          muls      #100,D0
00001598  D280      2148          add.l     D0,D1
0000159A  201F      2149          move.l    (A7)+,D0
0000159C  2F01      2150          move.l    D1,-(A7)
0000159E  4EB9 0000 2151          jsr       _strcat
000015A2  5602      
000015A4  504F      2152          addq.w    #8,A7
000015A6  5246      2153          addq.w    #1,D6
000015A8  60A8      2154          bra       DumpRegisters_9
                    2155   DumpRegisters_11:
                    2156   ; }
                    2157   ; strcat(WatchPointString[x]," ") ;
000015AA  4879 0084 2158          pea       @m68kde~1_44.L
000015AE  0A06      
000015B0  220D      2159          move.l    A5,D1
000015B2  48C2      2160          ext.l     D2
000015B4  2F00      2161          move.l    D0,-(A7)
000015B6  2002      2162          move.l    D2,D0
000015B8  C1FC 0064 2163          muls      #100,D0
000015BC  D280      2164          add.l     D0,D1
000015BE  201F      2165          move.l    (A7)+,D0
000015C0  2F01      2166          move.l    D1,-(A7)
000015C2  4EB9 0000 2167          jsr       _strcat
000015C6  5602      
000015C8  504F      2168          addq.w    #8,A7
000015CA  5443      2169          addq.w    #2,D3
000015CC  6000 FF7A 2170          bra       DumpRegisters_6
                    2171   DumpRegisters_8:
                    2172   ; }
                    2173   ; strcat(WatchPointString[x], "  ") ;
000015D0  4879 0084 2174          pea       @m68kde~1_45.L
000015D4  0A08      
000015D6  220D      2175          move.l    A5,D1
000015D8  48C2      2176          ext.l     D2
000015DA  2F00      2177          move.l    D0,-(A7)
000015DC  2002      2178          move.l    D2,D0
000015DE  C1FC 0064 2179          muls      #100,D0
000015E2  D280      2180          add.l     D0,D1
000015E4  201F      2181          move.l    (A7)+,D0
000015E6  2F01      2182          move.l    D1,-(A7)
000015E8  4EB9 0000 2183          jsr       _strcat
000015EC  5602      
000015EE  504F      2184          addq.w    #8,A7
                    2185   ; BytePointer = (char *)(WatchPointAddress[x]) ;
000015F0  48C2      2186          ext.l     D2
000015F2  2002      2187          move.l    D2,D0
000015F4  E588      2188          lsl.l     #2,D0
000015F6  41F9 0084 2189          lea       _WatchPointAddress.L,A0
000015FA  017C      
000015FC  2A30 0800 2190          move.l    0(A0,D0.L),D5
                    2191   ; for(j = 0; j < (short)(16); j++)
00001600  4243      2192          clr.w     D3
                    2193   DumpRegisters_12:
00001602  0C43 0010 2194          cmp.w     #16,D3
00001606  6C00 007E 2195          bge       DumpRegisters_14
                    2196   ; {
                    2197   ; c = ((char)(BytePointer[j]) & 0x7f) ;
0000160A  2045      2198          move.l    D5,A0
0000160C  48C3      2199          ext.l     D3
0000160E  1030 3800 2200          move.b    0(A0,D3.L),D0
00001612  C03C 007F 2201          and.b     #127,D0
00001616  1E00      2202          move.b    D0,D7
                    2203   ; if((c > (char)(0x7f)) || (c < (char)(' ')))
00001618  0C07 007F 2204          cmp.b     #127,D7
0000161C  6206      2205          bhi.s     DumpRegisters_17
0000161E  0C07 0020 2206          cmp.b     #32,D7
00001622  6416      2207          bhs.s     DumpRegisters_15
                    2208   DumpRegisters_17:
                    2209   ; sprintf(TempString, ".") ;
00001624  4879 0084 2210          pea       @m68kde~1_46.L
00001628  0A0C      
0000162A  4879 0084 2211          pea       _TempString.L
0000162E  0540      
00001630  4EB9 0000 2212          jsr       _sprintf
00001634  55CE      
00001636  504F      2213          addq.w    #8,A7
00001638  6026      2214          bra.s     DumpRegisters_16
                    2215   DumpRegisters_15:
                    2216   ; else
                    2217   ; sprintf(TempString, "%c", BytePointer[j]) ;
0000163A  2045      2218          move.l    D5,A0
0000163C  48C3      2219          ext.l     D3
0000163E  1230 3800 2220          move.b    0(A0,D3.L),D1
00001642  C2BC 0000 2221          and.l     #255,D1
00001646  00FF      
00001648  2F01      2222          move.l    D1,-(A7)
0000164A  4879 0084 2223          pea       @m68kde~1_47.L
0000164E  0A0E      
00001650  4879 0084 2224          pea       _TempString.L
00001654  0540      
00001656  4EB9 0000 2225          jsr       _sprintf
0000165A  55CE      
0000165C  DEFC 000C 2226          add.w     #12,A7
                    2227   DumpRegisters_16:
                    2228   ; strcat(WatchPointString[x], TempString) ;
00001660  4879 0084 2229          pea       _TempString.L
00001664  0540      
00001666  220D      2230          move.l    A5,D1
00001668  48C2      2231          ext.l     D2
0000166A  2F00      2232          move.l    D0,-(A7)
0000166C  2002      2233          move.l    D2,D0
0000166E  C1FC 0064 2234          muls      #100,D0
00001672  D280      2235          add.l     D0,D1
00001674  201F      2236          move.l    (A7)+,D0
00001676  2F01      2237          move.l    D1,-(A7)
00001678  4EB9 0000 2238          jsr       _strcat
0000167C  5602      
0000167E  504F      2239          addq.w    #8,A7
00001680  5243      2240          addq.w    #1,D3
00001682  6000 FF7E 2241          bra       DumpRegisters_12
                    2242   DumpRegisters_14:
00001686  6020      2243          bra.s     DumpRegisters_5
                    2244   DumpRegisters_4:
                    2245   ; }
                    2246   ; }
                    2247   ; else
                    2248   ; strcpy(WatchPointString[x], "") ;
00001688  4879 0084 2249          pea       @m68kde~1_48.L
0000168C  0A12      
0000168E  220D      2250          move.l    A5,D1
00001690  48C2      2251          ext.l     D2
00001692  2F00      2252          move.l    D0,-(A7)
00001694  2002      2253          move.l    D2,D0
00001696  C1FC 0064 2254          muls      #100,D0
0000169A  D280      2255          add.l     D0,D1
0000169C  201F      2256          move.l    (A7)+,D0
0000169E  2F01      2257          move.l    D1,-(A7)
000016A0  4EB9 0000 2258          jsr       _strcpy
000016A4  54EE      
000016A6  504F      2259          addq.w    #8,A7
                    2260   DumpRegisters_5:
000016A8  5242      2261          addq.w    #1,D2
000016AA  6000 FE36 2262          bra       DumpRegisters_1
                    2263   DumpRegisters_3:
                    2264   ; }
                    2265   ; printf("\r\n\r\n D0 = $%08X  A0 = $%08X",d0,a0) ;
000016AE  2F39 0084 2266          move.l    _a0.L,-(A7)
000016B2  00FE      
000016B4  2F39 0084 2267          move.l    _d0.L,-(A7)
000016B8  00DE      
000016BA  4879 0084 2268          pea       @m68kde~1_49.L
000016BE  0A14      
000016C0  4E93      2269          jsr       (A3)
000016C2  DEFC 000C 2270          add.w     #12,A7
                    2271   ; printf("\r\n D1 = $%08X  A1 = $%08X",d1,a1) ;
000016C6  2F39 0084 2272          move.l    _a1.L,-(A7)
000016CA  0102      
000016CC  2F39 0084 2273          move.l    _d1.L,-(A7)
000016D0  00E2      
000016D2  4879 0084 2274          pea       @m68kde~1_50.L
000016D6  0A30      
000016D8  4E93      2275          jsr       (A3)
000016DA  DEFC 000C 2276          add.w     #12,A7
                    2277   ; printf("\r\n D2 = $%08X  A2 = $%08X",d2,a2) ;
000016DE  2F39 0084 2278          move.l    _a2.L,-(A7)
000016E2  0106      
000016E4  2F39 0084 2279          move.l    _d2.L,-(A7)
000016E8  00E6      
000016EA  4879 0084 2280          pea       @m68kde~1_51.L
000016EE  0A4A      
000016F0  4E93      2281          jsr       (A3)
000016F2  DEFC 000C 2282          add.w     #12,A7
                    2283   ; printf("\r\n D3 = $%08X  A3 = $%08X",d3,a3) ;
000016F6  2F39 0084 2284          move.l    _a3.L,-(A7)
000016FA  010A      
000016FC  2F39 0084 2285          move.l    _d3.L,-(A7)
00001700  00EA      
00001702  4879 0084 2286          pea       @m68kde~1_52.L
00001706  0A64      
00001708  4E93      2287          jsr       (A3)
0000170A  DEFC 000C 2288          add.w     #12,A7
                    2289   ; printf("\r\n D4 = $%08X  A4 = $%08X",d4,a4) ;
0000170E  2F39 0084 2290          move.l    _a4.L,-(A7)
00001712  010E      
00001714  2F39 0084 2291          move.l    _d4.L,-(A7)
00001718  00EE      
0000171A  4879 0084 2292          pea       @m68kde~1_53.L
0000171E  0A7E      
00001720  4E93      2293          jsr       (A3)
00001722  DEFC 000C 2294          add.w     #12,A7
                    2295   ; printf("\r\n D5 = $%08X  A5 = $%08X",d5,a5) ;
00001726  2F39 0084 2296          move.l    _a5.L,-(A7)
0000172A  0112      
0000172C  2F39 0084 2297          move.l    _d5.L,-(A7)
00001730  00F2      
00001732  4879 0084 2298          pea       @m68kde~1_54.L
00001736  0A98      
00001738  4E93      2299          jsr       (A3)
0000173A  DEFC 000C 2300          add.w     #12,A7
                    2301   ; printf("\r\n D6 = $%08X  A6 = $%08X",d6,a6) ;
0000173E  2F39 0084 2302          move.l    _a6.L,-(A7)
00001742  0116      
00001744  2F39 0084 2303          move.l    _d6.L,-(A7)
00001748  00F6      
0000174A  4879 0084 2304          pea       @m68kde~1_55.L
0000174E  0AB2      
00001750  4E93      2305          jsr       (A3)
00001752  DEFC 000C 2306          add.w     #12,A7
                    2307   ; printf("\r\n D7 = $%08X  A7 = $%08X",d7,((SR & (unsigned short int)(0x2000)) == ((unsigned short int)(0x2000))) ? SSP : USP) ;
00001756  3214      2308          move.w    (A4),D1
00001758  C27C 2000 2309          and.w     #8192,D1
0000175C  0C41 2000 2310          cmp.w     #8192,D1
00001760  6608      2311          bne.s     DumpRegisters_18
00001762  2239 0084 2312          move.l    _SSP.L,D1
00001766  011E      
00001768  6006      2313          bra.s     DumpRegisters_19
                    2314   DumpRegisters_18:
0000176A  2239 0084 2315          move.l    _USP.L,D1
0000176E  0122      
                    2316   DumpRegisters_19:
00001770  2F01      2317          move.l    D1,-(A7)
00001772  2F39 0084 2318          move.l    _d7.L,-(A7)
00001776  00FA      
00001778  4879 0084 2319          pea       @m68kde~1_56.L
0000177C  0ACC      
0000177E  4E93      2320          jsr       (A3)
00001780  DEFC 000C 2321          add.w     #12,A7
                    2322   ; printf("\r\n\r\nUSP = $%08X  (A7) User SP", USP ) ;
00001784  2F39 0084 2323          move.l    _USP.L,-(A7)
00001788  0122      
0000178A  4879 0084 2324          pea       @m68kde~1_57.L
0000178E  0AE6      
00001790  4E93      2325          jsr       (A3)
00001792  504F      2326          addq.w    #8,A7
                    2327   ; printf("\r\nSSP = $%08X  (A7) Supervisor SP", SSP) ;
00001794  2F39 0084 2328          move.l    _SSP.L,-(A7)
00001798  011E      
0000179A  4879 0084 2329          pea       @m68kde~1_58.L
0000179E  0B04      
000017A0  4E93      2330          jsr       (A3)
000017A2  504F      2331          addq.w    #8,A7
                    2332   ; printf("\r\n SR = $%04X   ",SR) ;
000017A4  3214      2333          move.w    (A4),D1
000017A6  C2BC 0000 2334          and.l     #65535,D1
000017AA  FFFF      
000017AC  2F01      2335          move.l    D1,-(A7)
000017AE  4879 0084 2336          pea       @m68kde~1_59.L
000017B2  0B26      
000017B4  4E93      2337          jsr       (A3)
000017B6  504F      2338          addq.w    #8,A7
                    2339   ; // display the status word in characters etc.
                    2340   ; printf("   [") ;
000017B8  4879 0084 2341          pea       @m68kde~1_60.L
000017BC  0B38      
000017BE  4E93      2342          jsr       (A3)
000017C0  584F      2343          addq.w    #4,A7
                    2344   ; if((SR & (unsigned short int)(0x8000)) == (unsigned short int)(0x8000)) putchar('T') ; else putchar('-') ;      // Trace bit(bit 15)
000017C2  3014      2345          move.w    (A4),D0
000017C4  C07C 8000 2346          and.w     #32768,D0
000017C8  0C40 8000 2347          cmp.w     #32768,D0
000017CC  660A      2348          bne.s     DumpRegisters_20
000017CE  4878 0054 2349          pea       84
000017D2  4E92      2350          jsr       (A2)
000017D4  584F      2351          addq.w    #4,A7
000017D6  6008      2352          bra.s     DumpRegisters_21
                    2353   DumpRegisters_20:
000017D8  4878 002D 2354          pea       45
000017DC  4E92      2355          jsr       (A2)
000017DE  584F      2356          addq.w    #4,A7
                    2357   DumpRegisters_21:
                    2358   ; if((SR & (unsigned short int)(0x2000)) == (unsigned short int)(0x2000)) putchar('S') ; else putchar('U') ;      // supervisor bit  (bit 13)
000017E0  3014      2359          move.w    (A4),D0
000017E2  C07C 2000 2360          and.w     #8192,D0
000017E6  0C40 2000 2361          cmp.w     #8192,D0
000017EA  660A      2362          bne.s     DumpRegisters_22
000017EC  4878 0053 2363          pea       83
000017F0  4E92      2364          jsr       (A2)
000017F2  584F      2365          addq.w    #4,A7
000017F4  6008      2366          bra.s     DumpRegisters_23
                    2367   DumpRegisters_22:
000017F6  4878 0055 2368          pea       85
000017FA  4E92      2369          jsr       (A2)
000017FC  584F      2370          addq.w    #4,A7
                    2371   DumpRegisters_23:
                    2372   ; if((SR & (unsigned short int)(0x0400)) == (unsigned short int)(0x0400)) putchar('1') ; else putchar('0') ;      // IRQ2 Bit (bit 10)
000017FE  3014      2373          move.w    (A4),D0
00001800  C07C 0400 2374          and.w     #1024,D0
00001804  0C40 0400 2375          cmp.w     #1024,D0
00001808  660A      2376          bne.s     DumpRegisters_24
0000180A  4878 0031 2377          pea       49
0000180E  4E92      2378          jsr       (A2)
00001810  584F      2379          addq.w    #4,A7
00001812  6008      2380          bra.s     DumpRegisters_25
                    2381   DumpRegisters_24:
00001814  4878 0030 2382          pea       48
00001818  4E92      2383          jsr       (A2)
0000181A  584F      2384          addq.w    #4,A7
                    2385   DumpRegisters_25:
                    2386   ; if((SR & (unsigned short int)(0x0200)) == (unsigned short int)(0x0200)) putchar('1') ; else putchar('0') ;      // IRQ1 Bit (bit 9)
0000181C  3014      2387          move.w    (A4),D0
0000181E  C07C 0200 2388          and.w     #512,D0
00001822  0C40 0200 2389          cmp.w     #512,D0
00001826  660A      2390          bne.s     DumpRegisters_26
00001828  4878 0031 2391          pea       49
0000182C  4E92      2392          jsr       (A2)
0000182E  584F      2393          addq.w    #4,A7
00001830  6008      2394          bra.s     DumpRegisters_27
                    2395   DumpRegisters_26:
00001832  4878 0030 2396          pea       48
00001836  4E92      2397          jsr       (A2)
00001838  584F      2398          addq.w    #4,A7
                    2399   DumpRegisters_27:
                    2400   ; if((SR & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100)) putchar('1') ; else putchar('0') ;      // IRQ0 Bit (bit 8)
0000183A  3014      2401          move.w    (A4),D0
0000183C  C07C 0100 2402          and.w     #256,D0
00001840  0C40 0100 2403          cmp.w     #256,D0
00001844  660A      2404          bne.s     DumpRegisters_28
00001846  4878 0031 2405          pea       49
0000184A  4E92      2406          jsr       (A2)
0000184C  584F      2407          addq.w    #4,A7
0000184E  6008      2408          bra.s     DumpRegisters_29
                    2409   DumpRegisters_28:
00001850  4878 0030 2410          pea       48
00001854  4E92      2411          jsr       (A2)
00001856  584F      2412          addq.w    #4,A7
                    2413   DumpRegisters_29:
                    2414   ; if((SR & (unsigned short int)(0x0010)) == (unsigned short int)(0x0010)) putchar('X') ; else putchar('-') ;      // X Bit (bit 4)
00001858  3014      2415          move.w    (A4),D0
0000185A  C07C 0010 2416          and.w     #16,D0
0000185E  0C40 0010 2417          cmp.w     #16,D0
00001862  660A      2418          bne.s     DumpRegisters_30
00001864  4878 0058 2419          pea       88
00001868  4E92      2420          jsr       (A2)
0000186A  584F      2421          addq.w    #4,A7
0000186C  6008      2422          bra.s     DumpRegisters_31
                    2423   DumpRegisters_30:
0000186E  4878 002D 2424          pea       45
00001872  4E92      2425          jsr       (A2)
00001874  584F      2426          addq.w    #4,A7
                    2427   DumpRegisters_31:
                    2428   ; if((SR & (unsigned short int)(0x0008)) == (unsigned short int)(0x0008)) putchar('N') ; else putchar('-') ;      // N Bit (bit 3)
00001876  3014      2429          move.w    (A4),D0
00001878  C07C 0008 2430          and.w     #8,D0
0000187C  0C40 0008 2431          cmp.w     #8,D0
00001880  660A      2432          bne.s     DumpRegisters_32
00001882  4878 004E 2433          pea       78
00001886  4E92      2434          jsr       (A2)
00001888  584F      2435          addq.w    #4,A7
0000188A  6008      2436          bra.s     DumpRegisters_33
                    2437   DumpRegisters_32:
0000188C  4878 002D 2438          pea       45
00001890  4E92      2439          jsr       (A2)
00001892  584F      2440          addq.w    #4,A7
                    2441   DumpRegisters_33:
                    2442   ; if((SR & (unsigned short int)(0x0004)) == (unsigned short int)(0x0004)) putchar('Z') ; else putchar('-') ;      // Z Bit (bit 2)
00001894  3014      2443          move.w    (A4),D0
00001896  C07C 0004 2444          and.w     #4,D0
0000189A  0C40 0004 2445          cmp.w     #4,D0
0000189E  660A      2446          bne.s     DumpRegisters_34
000018A0  4878 005A 2447          pea       90
000018A4  4E92      2448          jsr       (A2)
000018A6  584F      2449          addq.w    #4,A7
000018A8  6008      2450          bra.s     DumpRegisters_35
                    2451   DumpRegisters_34:
000018AA  4878 002D 2452          pea       45
000018AE  4E92      2453          jsr       (A2)
000018B0  584F      2454          addq.w    #4,A7
                    2455   DumpRegisters_35:
                    2456   ; if((SR & (unsigned short int)(0x0002)) == (unsigned short int)(0x0002)) putchar('V') ; else putchar('-') ;      // V Bit (bit 1)
000018B2  3014      2457          move.w    (A4),D0
000018B4  C07C 0002 2458          and.w     #2,D0
000018B8  0C40 0002 2459          cmp.w     #2,D0
000018BC  660A      2460          bne.s     DumpRegisters_36
000018BE  4878 0056 2461          pea       86
000018C2  4E92      2462          jsr       (A2)
000018C4  584F      2463          addq.w    #4,A7
000018C6  6008      2464          bra.s     DumpRegisters_37
                    2465   DumpRegisters_36:
000018C8  4878 002D 2466          pea       45
000018CC  4E92      2467          jsr       (A2)
000018CE  584F      2468          addq.w    #4,A7
                    2469   DumpRegisters_37:
                    2470   ; if((SR & (unsigned short int)(0x0001)) == (unsigned short int)(0x0001)) putchar('C') ; else putchar('-') ;      // C Bit (bit 0)
000018D0  3014      2471          move.w    (A4),D0
000018D2  C07C 0001 2472          and.w     #1,D0
000018D6  0C40 0001 2473          cmp.w     #1,D0
000018DA  660A      2474          bne.s     DumpRegisters_38
000018DC  4878 0043 2475          pea       67
000018E0  4E92      2476          jsr       (A2)
000018E2  584F      2477          addq.w    #4,A7
000018E4  6008      2478          bra.s     DumpRegisters_39
                    2479   DumpRegisters_38:
000018E6  4878 002D 2480          pea       45
000018EA  4E92      2481          jsr       (A2)
000018EC  584F      2482          addq.w    #4,A7
                    2483   DumpRegisters_39:
                    2484   ; putchar(']') ;
000018EE  4878 005D 2485          pea       93
000018F2  4E92      2486          jsr       (A2)
000018F4  584F      2487          addq.w    #4,A7
                    2488   ; printf("\r\n PC = $%08X  ", PC) ;
000018F6  2F39 0084 2489          move.l    _PC.L,-(A7)
000018FA  011A      
000018FC  4879 0084 2490          pea       @m68kde~1_61.L
00001900  0B3E      
00001902  4E93      2491          jsr       (A3)
00001904  504F      2492          addq.w    #8,A7
                    2493   ; if(*(unsigned short int *)(PC) != 0x4e4e)   {
00001906  2039 0084 2494          move.l    _PC.L,D0
0000190A  011A      
0000190C  2040      2495          move.l    D0,A0
0000190E  3010      2496          move.w    (A0),D0
00001910  0C40 4E4E 2497          cmp.w     #20046,D0
00001914  6724      2498          beq.s     DumpRegisters_40
                    2499   ; DisassembleInstruction(PC) ;
00001916  2F39 0084 2500          move.l    _PC.L,-(A7)
0000191A  011A      
0000191C  4EB9 0000 2501          jsr       _DisassembleInstruction
00001920  364C      
00001922  584F      2502          addq.w    #4,A7
                    2503   ; FormatInstructionForTrace() ;
00001924  4EB8 1450 2504          jsr       _FormatInstructionForTrace
                    2505   ; printf("%s", Instruction) ;
00001928  4879 0084 2506          pea       _Instruction.L
0000192C  04DC      
0000192E  4879 0084 2507          pea       @m68kde~1_62.L
00001932  0B4E      
00001934  4E93      2508          jsr       (A3)
00001936  504F      2509          addq.w    #8,A7
00001938  600A      2510          bra.s     DumpRegisters_41
                    2511   DumpRegisters_40:
                    2512   ; }
                    2513   ; else
                    2514   ; printf("[BREAKPOINT]") ;
0000193A  4879 0084 2515          pea       @m68kde~1_63.L
0000193E  0B52      
00001940  4E93      2516          jsr       (A3)
00001942  584F      2517          addq.w    #4,A7
                    2518   DumpRegisters_41:
                    2519   ; printf("\r\n") ;
00001944  4879 0084 2520          pea       @m68kde~1_64.L
00001948  0B60      
0000194A  4E93      2521          jsr       (A3)
0000194C  584F      2522          addq.w    #4,A7
                    2523   ; for(i=0; i < 8; i++)    {
0000194E  4244      2524          clr.w     D4
                    2525   DumpRegisters_42:
00001950  0C44 0008 2526          cmp.w     #8,D4
00001954  6C00 0040 2527          bge       DumpRegisters_44
                    2528   ; if(WatchPointSetOrCleared[i] == 1)
00001958  48C4      2529          ext.l     D4
0000195A  2004      2530          move.l    D4,D0
0000195C  E588      2531          lsl.l     #2,D0
0000195E  41F9 0084 2532          lea       _WatchPointSetOrCleared.L,A0
00001962  019C      
00001964  2030 0800 2533          move.l    0(A0,D0.L),D0
00001968  0C80 0000 2534          cmp.l     #1,D0
0000196C  0001      
0000196E  6622      2535          bne.s     DumpRegisters_45
                    2536   ; printf("\r\nWP%d = %s", i, WatchPointString[i]) ;
00001970  220D      2537          move.l    A5,D1
00001972  48C4      2538          ext.l     D4
00001974  2F00      2539          move.l    D0,-(A7)
00001976  2004      2540          move.l    D4,D0
00001978  C1FC 0064 2541          muls      #100,D0
0000197C  D280      2542          add.l     D0,D1
0000197E  201F      2543          move.l    (A7)+,D0
00001980  2F01      2544          move.l    D1,-(A7)
00001982  48C4      2545          ext.l     D4
00001984  2F04      2546          move.l    D4,-(A7)
00001986  4879 0084 2547          pea       @m68kde~1_65.L
0000198A  0B64      
0000198C  4E93      2548          jsr       (A3)
0000198E  DEFC 000C 2549          add.w     #12,A7
                    2550   DumpRegisters_45:
00001992  5244      2551          addq.w    #1,D4
00001994  60BA      2552          bra       DumpRegisters_42
                    2553   DumpRegisters_44:
00001996  4CDF 3CFC 2554          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
0000199A  4E75      2555          rts
                    2556   ; }
                    2557   ; }
                    2558   ; // Trace Exception Handler
                    2559   ; void DumpRegistersandPause(void)
                    2560   ; {
                    2561   _DumpRegistersandPause:
0000199C  2F0A      2562          move.l    A2,-(A7)
0000199E  45F9 0000 2563          lea       _printf.L,A2
000019A2  5644      
                    2564   ; printf("\r\n\r\n\r\n\r\n\r\n\r\nSingle Step  :[ON]") ;
000019A4  4879 0084 2565          pea       @m68kde~1_66.L
000019A8  0B70      
000019AA  4E92      2566          jsr       (A2)
000019AC  584F      2567          addq.w    #4,A7
                    2568   ; printf("\r\nBreak Points :[Disabled]") ;
000019AE  4879 0084 2569          pea       @m68kde~1_67.L
000019B2  0B90      
000019B4  4E92      2570          jsr       (A2)
000019B6  584F      2571          addq.w    #4,A7
                    2572   ; DumpRegisters() ;
000019B8  4EB8 14C4 2573          jsr       _DumpRegisters
                    2574   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
000019BC  4879 0084 2575          pea       @m68kde~1_68.L
000019C0  0BAC      
000019C2  4E92      2576          jsr       (A2)
000019C4  584F      2577          addq.w    #4,A7
                    2578   ; printf("\r\nPress <ESC> to Resume Program") ;
000019C6  4879 0084 2579          pea       @m68kde~1_69.L
000019CA  0BD8      
000019CC  4E92      2580          jsr       (A2)
000019CE  584F      2581          addq.w    #4,A7
                    2582   ; menu() ;
000019D0  4EB9 0000 2583          jsr       _menu
000019D4  2606      
000019D6  245F      2584          move.l    (A7)+,A2
000019D8  4E75      2585          rts
                    2586   ; }
                    2587   ; void ChangeRegisters(void)
                    2588   ; {
                    2589   _ChangeRegisters:
000019DA  4E56 FFFC 2590          link      A6,#-4
000019DE  48E7 303C 2591          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
000019E2  45F9 0000 2592          lea       _printf.L,A2
000019E6  5644      
000019E8  47EE FFFC 2593          lea       -4(A6),A3
000019EC  49F8 0CAC 2594          lea       _Get8HexDigits.L,A4
000019F0  4BF8 0B78 2595          lea       __getch.L,A5
                    2596   ; // get register name d0-d7, a0-a7, up, sp, sr, pc
                    2597   ; int reg_val ;
                    2598   ; char c, reg[3] ;
                    2599   ; reg[0] = tolower(_getch()) ;
000019F4  2F00      2600          move.l    D0,-(A7)
000019F6  4E95      2601          jsr       (A5)
000019F8  2200      2602          move.l    D0,D1
000019FA  201F      2603          move.l    (A7)+,D0
000019FC  2F01      2604          move.l    D1,-(A7)
000019FE  4EB9 0000 2605          jsr       _tolower
00001A02  55A2      
00001A04  584F      2606          addq.w    #4,A7
00001A06  1680      2607          move.b    D0,(A3)
                    2608   ; reg[1] = c = tolower(_getch()) ;
00001A08  2F00      2609          move.l    D0,-(A7)
00001A0A  4E95      2610          jsr       (A5)
00001A0C  2200      2611          move.l    D0,D1
00001A0E  201F      2612          move.l    (A7)+,D0
00001A10  2F01      2613          move.l    D1,-(A7)
00001A12  4EB9 0000 2614          jsr       _tolower
00001A16  55A2      
00001A18  584F      2615          addq.w    #4,A7
00001A1A  1400      2616          move.b    D0,D2
00001A1C  1740 0001 2617          move.b    D0,1(A3)
                    2618   ; if(reg[0] == (char)('d'))  {    // change data register
00001A20  1013      2619          move.b    (A3),D0
00001A22  0C00 0064 2620          cmp.b     #100,D0
00001A26  6600 00AE 2621          bne       ChangeRegisters_1
                    2622   ; if((reg[1] > (char)('7')) || (reg[1] < (char)('0'))) {
00001A2A  102B 0001 2623          move.b    1(A3),D0
00001A2E  0C00 0037 2624          cmp.b     #55,D0
00001A32  6E0A      2625          bgt.s     ChangeRegisters_5
00001A34  102B 0001 2626          move.b    1(A3),D0
00001A38  0C00 0030 2627          cmp.b     #48,D0
00001A3C  6C0E      2628          bge.s     ChangeRegisters_3
                    2629   ChangeRegisters_5:
                    2630   ; printf("\r\nIllegal Data Register : Use D0-D7.....\r\n") ;
00001A3E  4879 0084 2631          pea       @m68kde~1_70.L
00001A42  0BF8      
00001A44  4E92      2632          jsr       (A2)
00001A46  584F      2633          addq.w    #4,A7
                    2634   ; return ;
00001A48  6000 0244 2635          bra       ChangeRegisters_6
                    2636   ChangeRegisters_3:
                    2637   ; }
                    2638   ; else {
                    2639   ; printf("\r\nD%c = ", c) ;
00001A4C  4882      2640          ext.w     D2
00001A4E  48C2      2641          ext.l     D2
00001A50  2F02      2642          move.l    D2,-(A7)
00001A52  4879 0084 2643          pea       @m68kde~1_71.L
00001A56  0C24      
00001A58  4E92      2644          jsr       (A2)
00001A5A  504F      2645          addq.w    #8,A7
                    2646   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001A5C  42A7      2647          clr.l     -(A7)
00001A5E  4E94      2648          jsr       (A4)
00001A60  584F      2649          addq.w    #4,A7
00001A62  2600      2650          move.l    D0,D3
                    2651   ; }
                    2652   ; // bit cludgy but d0-d7 not stored as an array for good reason
                    2653   ; if(c == (char)('0'))
00001A64  0C02 0030 2654          cmp.b     #48,D2
00001A68  660A      2655          bne.s     ChangeRegisters_7
                    2656   ; d0 = reg_val ;
00001A6A  23C3 0084 2657          move.l    D3,_d0.L
00001A6E  00DE      
00001A70  6000 0060 2658          bra       ChangeRegisters_20
                    2659   ChangeRegisters_7:
                    2660   ; else if(c == (char)('1'))
00001A74  0C02 0031 2661          cmp.b     #49,D2
00001A78  660A      2662          bne.s     ChangeRegisters_9
                    2663   ; d1 = reg_val ;
00001A7A  23C3 0084 2664          move.l    D3,_d1.L
00001A7E  00E2      
00001A80  6000 0050 2665          bra       ChangeRegisters_20
                    2666   ChangeRegisters_9:
                    2667   ; else if(c == (char)('2'))
00001A84  0C02 0032 2668          cmp.b     #50,D2
00001A88  660A      2669          bne.s     ChangeRegisters_11
                    2670   ; d2 = reg_val ;
00001A8A  23C3 0084 2671          move.l    D3,_d2.L
00001A8E  00E6      
00001A90  6000 0040 2672          bra       ChangeRegisters_20
                    2673   ChangeRegisters_11:
                    2674   ; else if(c == (char)('3'))
00001A94  0C02 0033 2675          cmp.b     #51,D2
00001A98  6608      2676          bne.s     ChangeRegisters_13
                    2677   ; d3 = reg_val ;
00001A9A  23C3 0084 2678          move.l    D3,_d3.L
00001A9E  00EA      
00001AA0  6030      2679          bra.s     ChangeRegisters_20
                    2680   ChangeRegisters_13:
                    2681   ; else if(c == (char)('4'))
00001AA2  0C02 0034 2682          cmp.b     #52,D2
00001AA6  6608      2683          bne.s     ChangeRegisters_15
                    2684   ; d4 = reg_val ;
00001AA8  23C3 0084 2685          move.l    D3,_d4.L
00001AAC  00EE      
00001AAE  6022      2686          bra.s     ChangeRegisters_20
                    2687   ChangeRegisters_15:
                    2688   ; else if(c == (char)('5'))
00001AB0  0C02 0035 2689          cmp.b     #53,D2
00001AB4  6608      2690          bne.s     ChangeRegisters_17
                    2691   ; d5 = reg_val ;
00001AB6  23C3 0084 2692          move.l    D3,_d5.L
00001ABA  00F2      
00001ABC  6014      2693          bra.s     ChangeRegisters_20
                    2694   ChangeRegisters_17:
                    2695   ; else if(c == (char)('6'))
00001ABE  0C02 0036 2696          cmp.b     #54,D2
00001AC2  6608      2697          bne.s     ChangeRegisters_19
                    2698   ; d6 = reg_val ;
00001AC4  23C3 0084 2699          move.l    D3,_d6.L
00001AC8  00F6      
00001ACA  6006      2700          bra.s     ChangeRegisters_20
                    2701   ChangeRegisters_19:
                    2702   ; else
                    2703   ; d7 = reg_val ;
00001ACC  23C3 0084 2704          move.l    D3,_d7.L
00001AD0  00FA      
                    2705   ChangeRegisters_20:
00001AD2  6000 01B6 2706          bra       ChangeRegisters_51
                    2707   ChangeRegisters_1:
                    2708   ; }
                    2709   ; else if(reg[0] == (char)('a'))  {    // change address register, a7 is the user stack pointer, sp is the system stack pointer
00001AD6  1013      2710          move.b    (A3),D0
00001AD8  0C00 0061 2711          cmp.b     #97,D0
00001ADC  6600 00A6 2712          bne       ChangeRegisters_21
                    2713   ; if((c > (char)('7')) || (c < (char)('0'))) {
00001AE0  0C02 0037 2714          cmp.b     #55,D2
00001AE4  6E06      2715          bgt.s     ChangeRegisters_25
00001AE6  0C02 0030 2716          cmp.b     #48,D2
00001AEA  6C0E      2717          bge.s     ChangeRegisters_23
                    2718   ChangeRegisters_25:
                    2719   ; printf("\r\nIllegal Address Register : Use A0-A7.....\r\n") ;
00001AEC  4879 0084 2720          pea       @m68kde~1_72.L
00001AF0  0C2E      
00001AF2  4E92      2721          jsr       (A2)
00001AF4  584F      2722          addq.w    #4,A7
                    2723   ; return ;
00001AF6  6000 0196 2724          bra       ChangeRegisters_6
                    2725   ChangeRegisters_23:
                    2726   ; }
                    2727   ; else {
                    2728   ; printf("\r\nA%c = ", c) ;
00001AFA  4882      2729          ext.w     D2
00001AFC  48C2      2730          ext.l     D2
00001AFE  2F02      2731          move.l    D2,-(A7)
00001B00  4879 0084 2732          pea       @m68kde~1_73.L
00001B04  0C5C      
00001B06  4E92      2733          jsr       (A2)
00001B08  504F      2734          addq.w    #8,A7
                    2735   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001B0A  42A7      2736          clr.l     -(A7)
00001B0C  4E94      2737          jsr       (A4)
00001B0E  584F      2738          addq.w    #4,A7
00001B10  2600      2739          move.l    D0,D3
                    2740   ; }
                    2741   ; // bit cludgy but a0-a7 not stored as an array for good reason
                    2742   ; if(c == (char)('0'))
00001B12  0C02 0030 2743          cmp.b     #48,D2
00001B16  660A      2744          bne.s     ChangeRegisters_26
                    2745   ; a0 = reg_val ;
00001B18  23C3 0084 2746          move.l    D3,_a0.L
00001B1C  00FE      
00001B1E  6000 0060 2747          bra       ChangeRegisters_39
                    2748   ChangeRegisters_26:
                    2749   ; else if(c == (char)('1'))
00001B22  0C02 0031 2750          cmp.b     #49,D2
00001B26  660A      2751          bne.s     ChangeRegisters_28
                    2752   ; a1 = reg_val ;
00001B28  23C3 0084 2753          move.l    D3,_a1.L
00001B2C  0102      
00001B2E  6000 0050 2754          bra       ChangeRegisters_39
                    2755   ChangeRegisters_28:
                    2756   ; else if(c == (char)('2'))
00001B32  0C02 0032 2757          cmp.b     #50,D2
00001B36  660A      2758          bne.s     ChangeRegisters_30
                    2759   ; a2 = reg_val ;
00001B38  23C3 0084 2760          move.l    D3,_a2.L
00001B3C  0106      
00001B3E  6000 0040 2761          bra       ChangeRegisters_39
                    2762   ChangeRegisters_30:
                    2763   ; else if(c == (char)('3'))
00001B42  0C02 0033 2764          cmp.b     #51,D2
00001B46  6608      2765          bne.s     ChangeRegisters_32
                    2766   ; a3 = reg_val ;
00001B48  23C3 0084 2767          move.l    D3,_a3.L
00001B4C  010A      
00001B4E  6030      2768          bra.s     ChangeRegisters_39
                    2769   ChangeRegisters_32:
                    2770   ; else if(c == (char)('4'))
00001B50  0C02 0034 2771          cmp.b     #52,D2
00001B54  6608      2772          bne.s     ChangeRegisters_34
                    2773   ; a4 = reg_val ;
00001B56  23C3 0084 2774          move.l    D3,_a4.L
00001B5A  010E      
00001B5C  6022      2775          bra.s     ChangeRegisters_39
                    2776   ChangeRegisters_34:
                    2777   ; else if(c == (char)('5'))
00001B5E  0C02 0035 2778          cmp.b     #53,D2
00001B62  6608      2779          bne.s     ChangeRegisters_36
                    2780   ; a5 = reg_val ;
00001B64  23C3 0084 2781          move.l    D3,_a5.L
00001B68  0112      
00001B6A  6014      2782          bra.s     ChangeRegisters_39
                    2783   ChangeRegisters_36:
                    2784   ; else if(c == (char)('6'))
00001B6C  0C02 0036 2785          cmp.b     #54,D2
00001B70  6608      2786          bne.s     ChangeRegisters_38
                    2787   ; a6 = reg_val ;
00001B72  23C3 0084 2788          move.l    D3,_a6.L
00001B76  0116      
00001B78  6006      2789          bra.s     ChangeRegisters_39
                    2790   ChangeRegisters_38:
                    2791   ; else
                    2792   ; USP = reg_val ;
00001B7A  23C3 0084 2793          move.l    D3,_USP.L
00001B7E  0122      
                    2794   ChangeRegisters_39:
00001B80  6000 0108 2795          bra       ChangeRegisters_51
                    2796   ChangeRegisters_21:
                    2797   ; }
                    2798   ; else if((reg[0] == (char)('u')) && (c == (char)('s')))  {
00001B84  1013      2799          move.b    (A3),D0
00001B86  0C00 0075 2800          cmp.b     #117,D0
00001B8A  6600 004E 2801          bne       ChangeRegisters_40
00001B8E  0C02 0073 2802          cmp.b     #115,D2
00001B92  6600 0046 2803          bne       ChangeRegisters_40
                    2804   ; if(tolower(_getch()) == 'p')  {    // change user stack pointer
00001B96  2F00      2805          move.l    D0,-(A7)
00001B98  4E95      2806          jsr       (A5)
00001B9A  2200      2807          move.l    D0,D1
00001B9C  201F      2808          move.l    (A7)+,D0
00001B9E  2F01      2809          move.l    D1,-(A7)
00001BA0  4EB9 0000 2810          jsr       _tolower
00001BA4  55A2      
00001BA6  584F      2811          addq.w    #4,A7
00001BA8  0C80 0000 2812          cmp.l     #112,D0
00001BAC  0070      
00001BAE  6618      2813          bne.s     ChangeRegisters_42
                    2814   ; printf("\r\nUser SP = ") ;
00001BB0  4879 0084 2815          pea       @m68kde~1_74.L
00001BB4  0C66      
00001BB6  4E92      2816          jsr       (A2)
00001BB8  584F      2817          addq.w    #4,A7
                    2818   ; USP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001BBA  42A7      2819          clr.l     -(A7)
00001BBC  4E94      2820          jsr       (A4)
00001BBE  584F      2821          addq.w    #4,A7
00001BC0  23C0 0084 2822          move.l    D0,_USP.L
00001BC4  0122      
00001BC6  600E      2823          bra.s     ChangeRegisters_43
                    2824   ChangeRegisters_42:
                    2825   ; }
                    2826   ; else {
                    2827   ; printf("\r\nIllegal Register....") ;
00001BC8  4879 0084 2828          pea       @m68kde~1_75.L
00001BCC  0C74      
00001BCE  4E92      2829          jsr       (A2)
00001BD0  584F      2830          addq.w    #4,A7
                    2831   ; return ;
00001BD2  6000 00BA 2832          bra       ChangeRegisters_6
                    2833   ChangeRegisters_43:
00001BD6  6000 00B2 2834          bra       ChangeRegisters_51
                    2835   ChangeRegisters_40:
                    2836   ; }
                    2837   ; }
                    2838   ; else if((reg[0] == (char)('s')) && (c == (char)('s')))  {
00001BDA  1013      2839          move.b    (A3),D0
00001BDC  0C00 0073 2840          cmp.b     #115,D0
00001BE0  6600 004E 2841          bne       ChangeRegisters_44
00001BE4  0C02 0073 2842          cmp.b     #115,D2
00001BE8  6600 0046 2843          bne       ChangeRegisters_44
                    2844   ; if(tolower(_getch()) == 'p')  {    // change system stack pointer
00001BEC  2F00      2845          move.l    D0,-(A7)
00001BEE  4E95      2846          jsr       (A5)
00001BF0  2200      2847          move.l    D0,D1
00001BF2  201F      2848          move.l    (A7)+,D0
00001BF4  2F01      2849          move.l    D1,-(A7)
00001BF6  4EB9 0000 2850          jsr       _tolower
00001BFA  55A2      
00001BFC  584F      2851          addq.w    #4,A7
00001BFE  0C80 0000 2852          cmp.l     #112,D0
00001C02  0070      
00001C04  6618      2853          bne.s     ChangeRegisters_46
                    2854   ; printf("\r\nSystem SP = ") ;
00001C06  4879 0084 2855          pea       @m68kde~1_76.L
00001C0A  0C8C      
00001C0C  4E92      2856          jsr       (A2)
00001C0E  584F      2857          addq.w    #4,A7
                    2858   ; SSP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001C10  42A7      2859          clr.l     -(A7)
00001C12  4E94      2860          jsr       (A4)
00001C14  584F      2861          addq.w    #4,A7
00001C16  23C0 0084 2862          move.l    D0,_SSP.L
00001C1A  011E      
00001C1C  600E      2863          bra.s     ChangeRegisters_47
                    2864   ChangeRegisters_46:
                    2865   ; }
                    2866   ; else {
                    2867   ; printf("\r\nIllegal Register....") ;
00001C1E  4879 0084 2868          pea       @m68kde~1_77.L
00001C22  0C9C      
00001C24  4E92      2869          jsr       (A2)
00001C26  584F      2870          addq.w    #4,A7
                    2871   ; return ;
00001C28  6000 0064 2872          bra       ChangeRegisters_6
                    2873   ChangeRegisters_47:
00001C2C  6000 005C 2874          bra       ChangeRegisters_51
                    2875   ChangeRegisters_44:
                    2876   ; }
                    2877   ; }
                    2878   ; else if((reg[0] == (char)('p')) && (c == (char)('c')))  {    // change program counter
00001C30  1013      2879          move.b    (A3),D0
00001C32  0C00 0070 2880          cmp.b     #112,D0
00001C36  6620      2881          bne.s     ChangeRegisters_48
00001C38  0C02 0063 2882          cmp.b     #99,D2
00001C3C  661A      2883          bne.s     ChangeRegisters_48
                    2884   ; printf("\r\nPC = ") ;
00001C3E  4879 0084 2885          pea       @m68kde~1_78.L
00001C42  0CB4      
00001C44  4E92      2886          jsr       (A2)
00001C46  584F      2887          addq.w    #4,A7
                    2888   ; PC = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001C48  42A7      2889          clr.l     -(A7)
00001C4A  4E94      2890          jsr       (A4)
00001C4C  584F      2891          addq.w    #4,A7
00001C4E  23C0 0084 2892          move.l    D0,_PC.L
00001C52  011A      
00001C54  6000 0034 2893          bra       ChangeRegisters_51
                    2894   ChangeRegisters_48:
                    2895   ; }
                    2896   ; else if((reg[0] == (char)('s')) && (c == (char)('r')))  {    // change status register
00001C58  1013      2897          move.b    (A3),D0
00001C5A  0C00 0073 2898          cmp.b     #115,D0
00001C5E  6620      2899          bne.s     ChangeRegisters_50
00001C60  0C02 0072 2900          cmp.b     #114,D2
00001C64  661A      2901          bne.s     ChangeRegisters_50
                    2902   ; printf("\r\nSR = ") ;
00001C66  4879 0084 2903          pea       @m68kde~1_79.L
00001C6A  0CBC      
00001C6C  4E92      2904          jsr       (A2)
00001C6E  584F      2905          addq.w    #4,A7
                    2906   ; SR = Get4HexDigits(0) ;    // read 16 bit value from user keyboard
00001C70  42A7      2907          clr.l     -(A7)
00001C72  4EB8 0C60 2908          jsr       _Get4HexDigits
00001C76  584F      2909          addq.w    #4,A7
00001C78  33C0 0084 2910          move.w    D0,_SR.L
00001C7C  0126      
00001C7E  600A      2911          bra.s     ChangeRegisters_51
                    2912   ChangeRegisters_50:
                    2913   ; }
                    2914   ; else
                    2915   ; printf("\r\nIllegal Register: Use A0-A7, D0-D7, SSP, USP, PC or SR\r\n") ;
00001C80  4879 0084 2916          pea       @m68kde~1_80.L
00001C84  0CC4      
00001C86  4E92      2917          jsr       (A2)
00001C88  584F      2918          addq.w    #4,A7
                    2919   ChangeRegisters_51:
                    2920   ; DumpRegisters() ;
00001C8A  4EB8 14C4 2921          jsr       _DumpRegisters
                    2922   ChangeRegisters_6:
00001C8E  4CDF 3C0C 2923          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
00001C92  4E5E      2924          unlk      A6
00001C94  4E75      2925          rts
                    2926   ; }
                    2927   ; void BreakPointDisplay(void)
                    2928   ; {
                    2929   _BreakPointDisplay:
00001C96  48E7 3030 2930          movem.l   D2/D3/A2/A3,-(A7)
00001C9A  45F9 0000 2931          lea       _printf.L,A2
00001C9E  5644      
00001CA0  47F9 0084 2932          lea       _BreakPointAddress.L,A3
00001CA4  0128      
                    2933   ; int i, BreakPointsSet = 0 ;
00001CA6  4283      2934          clr.l     D3
                    2935   ; // any break points  set
                    2936   ; for(i = 0; i < 8; i++)  {
00001CA8  4282      2937          clr.l     D2
                    2938   BreakPointDisplay_1:
00001CAA  0C82 0000 2939          cmp.l     #8,D2
00001CAE  0008      
00001CB0  6C1C      2940          bge.s     BreakPointDisplay_3
                    2941   ; if(BreakPointSetOrCleared[i] == 1)
00001CB2  2002      2942          move.l    D2,D0
00001CB4  E588      2943          lsl.l     #2,D0
00001CB6  41F9 0084 2944          lea       _BreakPointSetOrCleared.L,A0
00001CBA  0158      
00001CBC  2030 0800 2945          move.l    0(A0,D0.L),D0
00001CC0  0C80 0000 2946          cmp.l     #1,D0
00001CC4  0001      
00001CC6  6602      2947          bne.s     BreakPointDisplay_4
                    2948   ; BreakPointsSet = 1;
00001CC8  7601      2949          moveq     #1,D3
                    2950   BreakPointDisplay_4:
00001CCA  5282      2951          addq.l    #1,D2
00001CCC  60DC      2952          bra       BreakPointDisplay_1
                    2953   BreakPointDisplay_3:
                    2954   ; }
                    2955   ; if(BreakPointsSet == 1) {
00001CCE  0C83 0000 2956          cmp.l     #1,D3
00001CD2  0001      
00001CD4  6616      2957          bne.s     BreakPointDisplay_6
                    2958   ; printf("\r\n\r\nNum     Address      Instruction") ;
00001CD6  4879 0084 2959          pea       @m68kde~1_81.L
00001CDA  0D00      
00001CDC  4E92      2960          jsr       (A2)
00001CDE  584F      2961          addq.w    #4,A7
                    2962   ; printf("\r\n---     ---------    -----------") ;
00001CE0  4879 0084 2963          pea       @m68kde~1_82.L
00001CE4  0D26      
00001CE6  4E92      2964          jsr       (A2)
00001CE8  584F      2965          addq.w    #4,A7
00001CEA  600A      2966          bra.s     BreakPointDisplay_7
                    2967   BreakPointDisplay_6:
                    2968   ; }
                    2969   ; else
                    2970   ; printf("\r\nNo BreakPoints Set") ;
00001CEC  4879 0084 2971          pea       @m68kde~1_83.L
00001CF0  0D4A      
00001CF2  4E92      2972          jsr       (A2)
00001CF4  584F      2973          addq.w    #4,A7
                    2974   BreakPointDisplay_7:
                    2975   ; for(i = 0; i < 8; i++)  {
00001CF6  4282      2976          clr.l     D2
                    2977   BreakPointDisplay_8:
00001CF8  0C82 0000 2978          cmp.l     #8,D2
00001CFC  0008      
00001CFE  6C00 0080 2979          bge       BreakPointDisplay_10
                    2980   ; // put opcode back to disassemble it, then put break point back
                    2981   ; if(BreakPointSetOrCleared[i] == 1)  {
00001D02  2002      2982          move.l    D2,D0
00001D04  E588      2983          lsl.l     #2,D0
00001D06  41F9 0084 2984          lea       _BreakPointSetOrCleared.L,A0
00001D0A  0158      
00001D0C  2030 0800 2985          move.l    0(A0,D0.L),D0
00001D10  0C80 0000 2986          cmp.l     #1,D0
00001D14  0001      
00001D16  6600 0062 2987          bne       BreakPointDisplay_11
                    2988   ; *(unsigned short int *)(BreakPointAddress[i]) = BreakPointInstruction[i];
00001D1A  2002      2989          move.l    D2,D0
00001D1C  E388      2990          lsl.l     #1,D0
00001D1E  41F9 0084 2991          lea       _BreakPointInstruction.L,A0
00001D22  0148      
00001D24  2202      2992          move.l    D2,D1
00001D26  E589      2993          lsl.l     #2,D1
00001D28  2233 1800 2994          move.l    0(A3,D1.L),D1
00001D2C  2241      2995          move.l    D1,A1
00001D2E  32B0 0800 2996          move.w    0(A0,D0.L),(A1)
                    2997   ; DisassembleInstruction(BreakPointAddress[i]) ;
00001D32  2202      2998          move.l    D2,D1
00001D34  E589      2999          lsl.l     #2,D1
00001D36  2F33 1800 3000          move.l    0(A3,D1.L),-(A7)
00001D3A  4EB9 0000 3001          jsr       _DisassembleInstruction
00001D3E  364C      
00001D40  584F      3002          addq.w    #4,A7
                    3003   ; FormatInstructionForTrace() ;
00001D42  4EB8 1450 3004          jsr       _FormatInstructionForTrace
                    3005   ; *(unsigned short int *)(BreakPointAddress[i]) = (unsigned short int)(0x4e4e) ;
00001D46  2002      3006          move.l    D2,D0
00001D48  E588      3007          lsl.l     #2,D0
00001D4A  2033 0800 3008          move.l    0(A3,D0.L),D0
00001D4E  2040      3009          move.l    D0,A0
00001D50  30BC 4E4E 3010          move.w    #20046,(A0)
                    3011   ; printf("\r\n%3d     $%08x",i, BreakPointAddress[i]) ;
00001D54  2202      3012          move.l    D2,D1
00001D56  E589      3013          lsl.l     #2,D1
00001D58  2F33 1800 3014          move.l    0(A3,D1.L),-(A7)
00001D5C  2F02      3015          move.l    D2,-(A7)
00001D5E  4879 0084 3016          pea       @m68kde~1_84.L
00001D62  0D60      
00001D64  4E92      3017          jsr       (A2)
00001D66  DEFC 000C 3018          add.w     #12,A7
                    3019   ; printf("    %s", Instruction);
00001D6A  4879 0084 3020          pea       _Instruction.L
00001D6E  04DC      
00001D70  4879 0084 3021          pea       @m68kde~1_85.L
00001D74  0D70      
00001D76  4E92      3022          jsr       (A2)
00001D78  504F      3023          addq.w    #8,A7
                    3024   BreakPointDisplay_11:
00001D7A  5282      3025          addq.l    #1,D2
00001D7C  6000 FF7A 3026          bra       BreakPointDisplay_8
                    3027   BreakPointDisplay_10:
                    3028   ; }
                    3029   ; }
                    3030   ; printf("\r\n") ;
00001D80  4879 0084 3031          pea       @m68kde~1_86.L
00001D84  0D78      
00001D86  4E92      3032          jsr       (A2)
00001D88  584F      3033          addq.w    #4,A7
00001D8A  4CDF 0C0C 3034          movem.l   (A7)+,D2/D3/A2/A3
00001D8E  4E75      3035          rts
                    3036   ; }
                    3037   ; void WatchPointDisplay(void)
                    3038   ; {
                    3039   _WatchPointDisplay:
00001D90  48E7 3020 3040          movem.l   D2/D3/A2,-(A7)
00001D94  45F9 0000 3041          lea       _printf.L,A2
00001D98  5644      
                    3042   ; int i ;
                    3043   ; int WatchPointsSet = 0 ;
00001D9A  4283      3044          clr.l     D3
                    3045   ; // any watchpoints set
                    3046   ; for(i = 0; i < 8; i++)  {
00001D9C  4282      3047          clr.l     D2
                    3048   WatchPointDisplay_1:
00001D9E  0C82 0000 3049          cmp.l     #8,D2
00001DA2  0008      
00001DA4  6C1C      3050          bge.s     WatchPointDisplay_3
                    3051   ; if(WatchPointSetOrCleared[i] == 1)
00001DA6  2002      3052          move.l    D2,D0
00001DA8  E588      3053          lsl.l     #2,D0
00001DAA  41F9 0084 3054          lea       _WatchPointSetOrCleared.L,A0
00001DAE  019C      
00001DB0  2030 0800 3055          move.l    0(A0,D0.L),D0
00001DB4  0C80 0000 3056          cmp.l     #1,D0
00001DB8  0001      
00001DBA  6602      3057          bne.s     WatchPointDisplay_4
                    3058   ; WatchPointsSet = 1;
00001DBC  7601      3059          moveq     #1,D3
                    3060   WatchPointDisplay_4:
00001DBE  5282      3061          addq.l    #1,D2
00001DC0  60DC      3062          bra       WatchPointDisplay_1
                    3063   WatchPointDisplay_3:
                    3064   ; }
                    3065   ; if(WatchPointsSet == 1) {
00001DC2  0C83 0000 3066          cmp.l     #1,D3
00001DC6  0001      
00001DC8  6616      3067          bne.s     WatchPointDisplay_6
                    3068   ; printf("\r\nNum     Address") ;
00001DCA  4879 0084 3069          pea       @m68kde~1_87.L
00001DCE  0D7C      
00001DD0  4E92      3070          jsr       (A2)
00001DD2  584F      3071          addq.w    #4,A7
                    3072   ; printf("\r\n---     ---------") ;
00001DD4  4879 0084 3073          pea       @m68kde~1_88.L
00001DD8  0D8E      
00001DDA  4E92      3074          jsr       (A2)
00001DDC  584F      3075          addq.w    #4,A7
00001DDE  600A      3076          bra.s     WatchPointDisplay_7
                    3077   WatchPointDisplay_6:
                    3078   ; }
                    3079   ; else
                    3080   ; printf("\r\nNo WatchPoints Set") ;
00001DE0  4879 0084 3081          pea       @m68kde~1_89.L
00001DE4  0DA2      
00001DE6  4E92      3082          jsr       (A2)
00001DE8  584F      3083          addq.w    #4,A7
                    3084   WatchPointDisplay_7:
                    3085   ; for(i = 0; i < 8; i++)  {
00001DEA  4282      3086          clr.l     D2
                    3087   WatchPointDisplay_8:
00001DEC  0C82 0000 3088          cmp.l     #8,D2
00001DF0  0008      
00001DF2  6C00 0038 3089          bge       WatchPointDisplay_10
                    3090   ; if(WatchPointSetOrCleared[i] == 1)
00001DF6  2002      3091          move.l    D2,D0
00001DF8  E588      3092          lsl.l     #2,D0
00001DFA  41F9 0084 3093          lea       _WatchPointSetOrCleared.L,A0
00001DFE  019C      
00001E00  2030 0800 3094          move.l    0(A0,D0.L),D0
00001E04  0C80 0000 3095          cmp.l     #1,D0
00001E08  0001      
00001E0A  661C      3096          bne.s     WatchPointDisplay_11
                    3097   ; printf("\r\n%3d     $%08x",i, WatchPointAddress[i]) ;
00001E0C  2202      3098          move.l    D2,D1
00001E0E  E589      3099          lsl.l     #2,D1
00001E10  41F9 0084 3100          lea       _WatchPointAddress.L,A0
00001E14  017C      
00001E16  2F30 1800 3101          move.l    0(A0,D1.L),-(A7)
00001E1A  2F02      3102          move.l    D2,-(A7)
00001E1C  4879 0084 3103          pea       @m68kde~1_90.L
00001E20  0DB8      
00001E22  4E92      3104          jsr       (A2)
00001E24  DEFC 000C 3105          add.w     #12,A7
                    3106   WatchPointDisplay_11:
00001E28  5282      3107          addq.l    #1,D2
00001E2A  60C0      3108          bra       WatchPointDisplay_8
                    3109   WatchPointDisplay_10:
                    3110   ; }
                    3111   ; printf("\r\n") ;
00001E2C  4879 0084 3112          pea       @m68kde~1_91.L
00001E30  0DC8      
00001E32  4E92      3113          jsr       (A2)
00001E34  584F      3114          addq.w    #4,A7
00001E36  4CDF 040C 3115          movem.l   (A7)+,D2/D3/A2
00001E3A  4E75      3116          rts
                    3117   ; }
                    3118   ; void BreakPointClear(void)
                    3119   ; {
                    3120   _BreakPointClear:
00001E3C  4E56 FFFC 3121          link      A6,#-4
00001E40  48E7 2020 3122          movem.l   D2/A2,-(A7)
00001E44  45F9 0000 3123          lea       _printf.L,A2
00001E48  5644      
                    3124   ; unsigned int i ;
                    3125   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3126   ; BreakPointDisplay() ;
00001E4A  4EB8 1C96 3127          jsr       _BreakPointDisplay
                    3128   ; printf("\r\nEnter Break Point Number: ") ;
00001E4E  4879 0084 3129          pea       @m68kde~1_92.L
00001E52  0DCC      
00001E54  4E92      3130          jsr       (A2)
00001E56  584F      3131          addq.w    #4,A7
                    3132   ; i = xtod(_getch()) ;           // get break pointer number
00001E58  2F00      3133          move.l    D0,-(A7)
00001E5A  4EB8 0B78 3134          jsr       __getch
00001E5E  2200      3135          move.l    D0,D1
00001E60  201F      3136          move.l    (A7)+,D0
00001E62  2F01      3137          move.l    D1,-(A7)
00001E64  4EB8 0BDA 3138          jsr       _xtod
00001E68  584F      3139          addq.w    #4,A7
00001E6A  C0BC 0000 3140          and.l     #255,D0
00001E6E  00FF      
00001E70  2400      3141          move.l    D0,D2
                    3142   ; if((i < 0) || (i > 7))   {
00001E72  0C82 0000 3143          cmp.l     #0,D2
00001E76  0000      
00001E78  6508      3144          blo.s     BreakPointClear_3
00001E7A  0C82 0000 3145          cmp.l     #7,D2
00001E7E  0007      
00001E80  630E      3146          bls.s     BreakPointClear_1
                    3147   BreakPointClear_3:
                    3148   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00001E82  4879 0084 3149          pea       @m68kde~1_93.L
00001E86  0DEA      
00001E88  4E92      3150          jsr       (A2)
00001E8A  584F      3151          addq.w    #4,A7
                    3152   ; return ;
00001E8C  6000 0080 3153          bra       BreakPointClear_4
                    3154   BreakPointClear_1:
                    3155   ; }
                    3156   ; if(BreakPointSetOrCleared[i] == 1)  {       // if break point set
00001E90  2002      3157          move.l    D2,D0
00001E92  E588      3158          lsl.l     #2,D0
00001E94  41F9 0084 3159          lea       _BreakPointSetOrCleared.L,A0
00001E98  0158      
00001E9A  2030 0800 3160          move.l    0(A0,D0.L),D0
00001E9E  0C80 0000 3161          cmp.l     #1,D0
00001EA2  0001      
00001EA4  6600 005A 3162          bne       BreakPointClear_5
                    3163   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program we are about to change
00001EA8  2002      3164          move.l    D2,D0
00001EAA  E588      3165          lsl.l     #2,D0
00001EAC  41F9 0084 3166          lea       _BreakPointAddress.L,A0
00001EB0  0128      
00001EB2  2D70 0800 3167          move.l    0(A0,D0.L),-4(A6)
00001EB6  FFFC      
                    3168   ; BreakPointAddress[i] = 0 ;
00001EB8  2002      3169          move.l    D2,D0
00001EBA  E588      3170          lsl.l     #2,D0
00001EBC  41F9 0084 3171          lea       _BreakPointAddress.L,A0
00001EC0  0128      
00001EC2  42B0 0800 3172          clr.l     0(A0,D0.L)
                    3173   ; BreakPointSetOrCleared[i] = 0 ;
00001EC6  2002      3174          move.l    D2,D0
00001EC8  E588      3175          lsl.l     #2,D0
00001ECA  41F9 0084 3176          lea       _BreakPointSetOrCleared.L,A0
00001ECE  0158      
00001ED0  42B0 0800 3177          clr.l     0(A0,D0.L)
                    3178   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
00001ED4  2002      3179          move.l    D2,D0
00001ED6  E388      3180          lsl.l     #1,D0
00001ED8  41F9 0084 3181          lea       _BreakPointInstruction.L,A0
00001EDC  0148      
00001EDE  226E FFFC 3182          move.l    -4(A6),A1
00001EE2  32B0 0800 3183          move.w    0(A0,D0.L),(A1)
                    3184   ; BreakPointInstruction[i] = 0 ;
00001EE6  2002      3185          move.l    D2,D0
00001EE8  E388      3186          lsl.l     #1,D0
00001EEA  41F9 0084 3187          lea       _BreakPointInstruction.L,A0
00001EEE  0148      
00001EF0  4270 0800 3188          clr.w     0(A0,D0.L)
                    3189   ; printf("\r\nBreak Point Cleared.....\r\n") ;
00001EF4  4879 0084 3190          pea       @m68kde~1_94.L
00001EF8  0E06      
00001EFA  4E92      3191          jsr       (A2)
00001EFC  584F      3192          addq.w    #4,A7
00001EFE  600A      3193          bra.s     BreakPointClear_6
                    3194   BreakPointClear_5:
                    3195   ; }
                    3196   ; else
                    3197   ; printf("\r\nBreak Point wasn't Set.....") ;
00001F00  4879 0084 3198          pea       @m68kde~1_95.L
00001F04  0E24      
00001F06  4E92      3199          jsr       (A2)
00001F08  584F      3200          addq.w    #4,A7
                    3201   BreakPointClear_6:
                    3202   ; BreakPointDisplay() ;
00001F0A  4EB8 1C96 3203          jsr       _BreakPointDisplay
                    3204   ; return ;
                    3205   BreakPointClear_4:
00001F0E  4CDF 0404 3206          movem.l   (A7)+,D2/A2
00001F12  4E5E      3207          unlk      A6
00001F14  4E75      3208          rts
                    3209   ; }
                    3210   ; void WatchPointClear(void)
                    3211   ; {
                    3212   _WatchPointClear:
00001F16  48E7 2020 3213          movem.l   D2/A2,-(A7)
00001F1A  45F9 0000 3214          lea       _printf.L,A2
00001F1E  5644      
                    3215   ; unsigned int i ;
                    3216   ; WatchPointDisplay() ;
00001F20  4EB8 1D90 3217          jsr       _WatchPointDisplay
                    3218   ; printf("\r\nEnter Watch Point Number: ") ;
00001F24  4879 0084 3219          pea       @m68kde~1_96.L
00001F28  0E42      
00001F2A  4E92      3220          jsr       (A2)
00001F2C  584F      3221          addq.w    #4,A7
                    3222   ; i = xtod(_getch()) ;           // get watch pointer number
00001F2E  2F00      3223          move.l    D0,-(A7)
00001F30  4EB8 0B78 3224          jsr       __getch
00001F34  2200      3225          move.l    D0,D1
00001F36  201F      3226          move.l    (A7)+,D0
00001F38  2F01      3227          move.l    D1,-(A7)
00001F3A  4EB8 0BDA 3228          jsr       _xtod
00001F3E  584F      3229          addq.w    #4,A7
00001F40  C0BC 0000 3230          and.l     #255,D0
00001F44  00FF      
00001F46  2400      3231          move.l    D0,D2
                    3232   ; if((i < 0) || (i > 7))   {
00001F48  0C82 0000 3233          cmp.l     #0,D2
00001F4C  0000      
00001F4E  6508      3234          blo.s     WatchPointClear_3
00001F50  0C82 0000 3235          cmp.l     #7,D2
00001F54  0007      
00001F56  630E      3236          bls.s     WatchPointClear_1
                    3237   WatchPointClear_3:
                    3238   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00001F58  4879 0084 3239          pea       @m68kde~1_97.L
00001F5C  0E60      
00001F5E  4E92      3240          jsr       (A2)
00001F60  584F      3241          addq.w    #4,A7
                    3242   ; return ;
00001F62  6000 004E 3243          bra       WatchPointClear_4
                    3244   WatchPointClear_1:
                    3245   ; }
                    3246   ; if(WatchPointSetOrCleared[i] == 1)  {       // if watch point set
00001F66  2002      3247          move.l    D2,D0
00001F68  E588      3248          lsl.l     #2,D0
00001F6A  41F9 0084 3249          lea       _WatchPointSetOrCleared.L,A0
00001F6E  019C      
00001F70  2030 0800 3250          move.l    0(A0,D0.L),D0
00001F74  0C80 0000 3251          cmp.l     #1,D0
00001F78  0001      
00001F7A  6628      3252          bne.s     WatchPointClear_5
                    3253   ; WatchPointAddress[i] = 0 ;
00001F7C  2002      3254          move.l    D2,D0
00001F7E  E588      3255          lsl.l     #2,D0
00001F80  41F9 0084 3256          lea       _WatchPointAddress.L,A0
00001F84  017C      
00001F86  42B0 0800 3257          clr.l     0(A0,D0.L)
                    3258   ; WatchPointSetOrCleared[i] = 0 ;
00001F8A  2002      3259          move.l    D2,D0
00001F8C  E588      3260          lsl.l     #2,D0
00001F8E  41F9 0084 3261          lea       _WatchPointSetOrCleared.L,A0
00001F92  019C      
00001F94  42B0 0800 3262          clr.l     0(A0,D0.L)
                    3263   ; printf("\r\nWatch Point Cleared.....\r\n") ;
00001F98  4879 0084 3264          pea       @m68kde~1_98.L
00001F9C  0E7C      
00001F9E  4E92      3265          jsr       (A2)
00001FA0  584F      3266          addq.w    #4,A7
00001FA2  600A      3267          bra.s     WatchPointClear_6
                    3268   WatchPointClear_5:
                    3269   ; }
                    3270   ; else
                    3271   ; printf("\r\nWatch Point Was not Set.....") ;
00001FA4  4879 0084 3272          pea       @m68kde~1_99.L
00001FA8  0E9A      
00001FAA  4E92      3273          jsr       (A2)
00001FAC  584F      3274          addq.w    #4,A7
                    3275   WatchPointClear_6:
                    3276   ; WatchPointDisplay() ;
00001FAE  4EB8 1D90 3277          jsr       _WatchPointDisplay
                    3278   ; return ;
                    3279   WatchPointClear_4:
00001FB2  4CDF 0404 3280          movem.l   (A7)+,D2/A2
00001FB6  4E75      3281          rts
                    3282   ; }
                    3283   ; void DisableBreakPoints(void)
                    3284   ; {
                    3285   _DisableBreakPoints:
00001FB8  4E56 FFFC 3286          link      A6,#-4
00001FBC  2F02      3287          move.l    D2,-(A7)
                    3288   ; int i ;
                    3289   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3290   ; for(i = 0; i < 8; i++)  {
00001FBE  4282      3291          clr.l     D2
                    3292   DisableBreakPoints_1:
00001FC0  0C82 0000 3293          cmp.l     #8,D2
00001FC4  0008      
00001FC6  6C00 003E 3294          bge       DisableBreakPoints_3
                    3295   ; if(BreakPointSetOrCleared[i] == 1)    {                                                    // if break point set
00001FCA  2002      3296          move.l    D2,D0
00001FCC  E588      3297          lsl.l     #2,D0
00001FCE  41F9 0084 3298          lea       _BreakPointSetOrCleared.L,A0
00001FD2  0158      
00001FD4  2030 0800 3299          move.l    0(A0,D0.L),D0
00001FD8  0C80 0000 3300          cmp.l     #1,D0
00001FDC  0001      
00001FDE  6622      3301          bne.s     DisableBreakPoints_4
                    3302   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001FE0  2002      3303          move.l    D2,D0
00001FE2  E588      3304          lsl.l     #2,D0
00001FE4  41F9 0084 3305          lea       _BreakPointAddress.L,A0
00001FE8  0128      
00001FEA  2D70 0800 3306          move.l    0(A0,D0.L),-4(A6)
00001FEE  FFFC      
                    3307   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program overwritting the $4e4e
00001FF0  2002      3308          move.l    D2,D0
00001FF2  E388      3309          lsl.l     #1,D0
00001FF4  41F9 0084 3310          lea       _BreakPointInstruction.L,A0
00001FF8  0148      
00001FFA  226E FFFC 3311          move.l    -4(A6),A1
00001FFE  32B0 0800 3312          move.w    0(A0,D0.L),(A1)
                    3313   DisableBreakPoints_4:
00002002  5282      3314          addq.l    #1,D2
00002004  60BA      3315          bra       DisableBreakPoints_1
                    3316   DisableBreakPoints_3:
00002006  241F      3317          move.l    (A7)+,D2
00002008  4E5E      3318          unlk      A6
0000200A  4E75      3319          rts
                    3320   ; }
                    3321   ; }
                    3322   ; }
                    3323   ; void EnableBreakPoints(void)
                    3324   ; {
                    3325   _EnableBreakPoints:
0000200C  4E56 FFFC 3326          link      A6,#-4
00002010  2F02      3327          move.l    D2,-(A7)
                    3328   ; int i ;
                    3329   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3330   ; for(i = 0; i < 8; i++)  {
00002012  4282      3331          clr.l     D2
                    3332   EnableBreakPoints_1:
00002014  0C82 0000 3333          cmp.l     #8,D2
00002018  0008      
0000201A  6C32      3334          bge.s     EnableBreakPoints_3
                    3335   ; if(BreakPointSetOrCleared[i] == 1)    {                                                     // if break point set
0000201C  2002      3336          move.l    D2,D0
0000201E  E588      3337          lsl.l     #2,D0
00002020  41F9 0084 3338          lea       _BreakPointSetOrCleared.L,A0
00002024  0158      
00002026  2030 0800 3339          move.l    0(A0,D0.L),D0
0000202A  0C80 0000 3340          cmp.l     #1,D0
0000202E  0001      
00002030  6618      3341          bne.s     EnableBreakPoints_4
                    3342   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00002032  2002      3343          move.l    D2,D0
00002034  E588      3344          lsl.l     #2,D0
00002036  41F9 0084 3345          lea       _BreakPointAddress.L,A0
0000203A  0128      
0000203C  2D70 0800 3346          move.l    0(A0,D0.L),-4(A6)
00002040  FFFC      
                    3347   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e);                              // put the breakpoint back in user program
00002042  206E FFFC 3348          move.l    -4(A6),A0
00002046  30BC 4E4E 3349          move.w    #20046,(A0)
                    3350   EnableBreakPoints_4:
0000204A  5282      3351          addq.l    #1,D2
0000204C  60C6      3352          bra       EnableBreakPoints_1
                    3353   EnableBreakPoints_3:
0000204E  241F      3354          move.l    (A7)+,D2
00002050  4E5E      3355          unlk      A6
00002052  4E75      3356          rts
                    3357   ; }
                    3358   ; }
                    3359   ; }
                    3360   ; void KillAllBreakPoints(void)
                    3361   ; {
                    3362   _KillAllBreakPoints:
00002054  4E56 FFFC 3363          link      A6,#-4
00002058  2F02      3364          move.l    D2,-(A7)
                    3365   ; int i ;
                    3366   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3367   ; for(i = 0; i < 8; i++)  {
0000205A  4282      3368          clr.l     D2
                    3369   KillAllBreakPoints_1:
0000205C  0C82 0000 3370          cmp.l     #8,D2
00002060  0008      
00002062  6C00 0052 3371          bge       KillAllBreakPoints_3
                    3372   ; // clear BP
                    3373   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00002066  2002      3374          move.l    D2,D0
00002068  E588      3375          lsl.l     #2,D0
0000206A  41F9 0084 3376          lea       _BreakPointAddress.L,A0
0000206E  0128      
00002070  2D70 0800 3377          move.l    0(A0,D0.L),-4(A6)
00002074  FFFC      
                    3378   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program
00002076  2002      3379          move.l    D2,D0
00002078  E388      3380          lsl.l     #1,D0
0000207A  41F9 0084 3381          lea       _BreakPointInstruction.L,A0
0000207E  0148      
00002080  226E FFFC 3382          move.l    -4(A6),A1
00002084  32B0 0800 3383          move.w    0(A0,D0.L),(A1)
                    3384   ; BreakPointAddress[i] = 0 ;                                                             // set BP address to NULL
00002088  2002      3385          move.l    D2,D0
0000208A  E588      3386          lsl.l     #2,D0
0000208C  41F9 0084 3387          lea       _BreakPointAddress.L,A0
00002090  0128      
00002092  42B0 0800 3388          clr.l     0(A0,D0.L)
                    3389   ; BreakPointInstruction[i] = 0 ;
00002096  2002      3390          move.l    D2,D0
00002098  E388      3391          lsl.l     #1,D0
0000209A  41F9 0084 3392          lea       _BreakPointInstruction.L,A0
0000209E  0148      
000020A0  4270 0800 3393          clr.w     0(A0,D0.L)
                    3394   ; BreakPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
000020A4  2002      3395          move.l    D2,D0
000020A6  E588      3396          lsl.l     #2,D0
000020A8  41F9 0084 3397          lea       _BreakPointSetOrCleared.L,A0
000020AC  0158      
000020AE  42B0 0800 3398          clr.l     0(A0,D0.L)
000020B2  5282      3399          addq.l    #1,D2
000020B4  60A6      3400          bra       KillAllBreakPoints_1
                    3401   KillAllBreakPoints_3:
000020B6  241F      3402          move.l    (A7)+,D2
000020B8  4E5E      3403          unlk      A6
000020BA  4E75      3404          rts
                    3405   ; }
                    3406   ; //BreakPointDisplay() ;       // display the break points
                    3407   ; }
                    3408   ; void KillAllWatchPoints(void)
                    3409   ; {
                    3410   _KillAllWatchPoints:
000020BC  2F02      3411          move.l    D2,-(A7)
                    3412   ; int i ;
                    3413   ; for(i = 0; i < 8; i++)  {
000020BE  4282      3414          clr.l     D2
                    3415   KillAllWatchPoints_1:
000020C0  0C82 0000 3416          cmp.l     #8,D2
000020C4  0008      
000020C6  6C20      3417          bge.s     KillAllWatchPoints_3
                    3418   ; WatchPointAddress[i] = 0 ;                                                             // set BP address to NULL
000020C8  2002      3419          move.l    D2,D0
000020CA  E588      3420          lsl.l     #2,D0
000020CC  41F9 0084 3421          lea       _WatchPointAddress.L,A0
000020D0  017C      
000020D2  42B0 0800 3422          clr.l     0(A0,D0.L)
                    3423   ; WatchPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
000020D6  2002      3424          move.l    D2,D0
000020D8  E588      3425          lsl.l     #2,D0
000020DA  41F9 0084 3426          lea       _WatchPointSetOrCleared.L,A0
000020DE  019C      
000020E0  42B0 0800 3427          clr.l     0(A0,D0.L)
000020E4  5282      3428          addq.l    #1,D2
000020E6  60D8      3429          bra       KillAllWatchPoints_1
                    3430   KillAllWatchPoints_3:
000020E8  241F      3431          move.l    (A7)+,D2
000020EA  4E75      3432          rts
                    3433   ; }
                    3434   ; //WatchPointDisplay() ;       // display the break points
                    3435   ; }
                    3436   ; void SetBreakPoint(void)
                    3437   ; {
                    3438   _SetBreakPoint:
000020EC  4E56 FFFC 3439          link      A6,#-4
000020F0  48E7 3830 3440          movem.l   D2/D3/D4/A2/A3,-(A7)
000020F4  45F9 0000 3441          lea       _printf.L,A2
000020F8  5644      
000020FA  47F9 0084 3442          lea       _BreakPointSetOrCleared.L,A3
000020FE  0158      
                    3443   ; int i ;
                    3444   ; int BPNumber;
                    3445   ; int BPAddress;
                    3446   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3447   ; // see if any free break points
                    3448   ; for(i = 0; i < 8; i ++) {
00002100  4282      3449          clr.l     D2
                    3450   SetBreakPoint_1:
00002102  0C82 0000 3451          cmp.l     #8,D2
00002106  0008      
00002108  6C10      3452          bge.s     SetBreakPoint_3
                    3453   ; if( BreakPointSetOrCleared[i] == 0)
0000210A  2002      3454          move.l    D2,D0
0000210C  E588      3455          lsl.l     #2,D0
0000210E  2033 0800 3456          move.l    0(A3,D0.L),D0
00002112  6602      3457          bne.s     SetBreakPoint_4
                    3458   ; break ;         // if spare BP found allow user to set it
00002114  6004      3459          bra.s     SetBreakPoint_3
                    3460   SetBreakPoint_4:
00002116  5282      3461          addq.l    #1,D2
00002118  60E8      3462          bra       SetBreakPoint_1
                    3463   SetBreakPoint_3:
                    3464   ; }
                    3465   ; if(i == 8) {
0000211A  0C82 0000 3466          cmp.l     #8,D2
0000211E  0008      
00002120  660E      3467          bne.s     SetBreakPoint_6
                    3468   ; printf("\r\nNo FREE Break Points.....") ;
00002122  4879 0084 3469          pea       @m68kde~1_100.L
00002126  0EBA      
00002128  4E92      3470          jsr       (A2)
0000212A  584F      3471          addq.w    #4,A7
                    3472   ; return ;
0000212C  6000 00EC 3473          bra       SetBreakPoint_15
                    3474   SetBreakPoint_6:
                    3475   ; }
                    3476   ; printf("\r\nBreak Point Address: ") ;
00002130  4879 0084 3477          pea       @m68kde~1_101.L
00002134  0ED6      
00002136  4E92      3478          jsr       (A2)
00002138  584F      3479          addq.w    #4,A7
                    3480   ; BPAddress = Get8HexDigits(0) ;
0000213A  42A7      3481          clr.l     -(A7)
0000213C  4EB8 0CAC 3482          jsr       _Get8HexDigits
00002140  584F      3483          addq.w    #4,A7
00002142  2600      3484          move.l    D0,D3
                    3485   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BPAddress) ;     // point to the instruction in the user program we are about to change
00002144  2803      3486          move.l    D3,D4
                    3487   ; if((BPAddress & 0x00000001) == 0x00000001)  {   // cannot set BP at an odd address
00002146  2003      3488          move.l    D3,D0
00002148  C0BC 0000 3489          and.l     #1,D0
0000214C  0001      
0000214E  0C80 0000 3490          cmp.l     #1,D0
00002152  0001      
00002154  660E      3491          bne.s     SetBreakPoint_9
                    3492   ; printf("\r\nError : Break Points CANNOT be set at ODD addresses") ;
00002156  4879 0084 3493          pea       @m68kde~1_102.L
0000215A  0EEE      
0000215C  4E92      3494          jsr       (A2)
0000215E  584F      3495          addq.w    #4,A7
                    3496   ; return ;
00002160  6000 00B8 3497          bra       SetBreakPoint_15
                    3498   SetBreakPoint_9:
                    3499   ; }
                    3500   ; if(BPAddress < 0x00008000)  {   // cannot set BP at an odd address
00002164  0C83 0000 3501          cmp.l     #32768,D3
00002168  8000      
0000216A  640E      3502          bhs.s     SetBreakPoint_11
                    3503   ; printf("\r\nError : Break Points CANNOT be set for ROM in Range : [$0-$00007FFF]") ;
0000216C  4879 0084 3504          pea       @m68kde~1_103.L
00002170  0F24      
00002172  4E92      3505          jsr       (A2)
00002174  584F      3506          addq.w    #4,A7
                    3507   ; return ;
00002176  6000 00A2 3508          bra       SetBreakPoint_15
                    3509   SetBreakPoint_11:
                    3510   ; }
                    3511   ; // search for first free bp or existing same BP
                    3512   ; for(i = 0; i < 8; i++)  {
0000217A  4282      3513          clr.l     D2
                    3514   SetBreakPoint_13:
0000217C  0C82 0000 3515          cmp.l     #8,D2
00002180  0008      
00002182  6C00 0096 3516          bge       SetBreakPoint_15
                    3517   ; if(BreakPointAddress[i] == BPAddress)   {
00002186  2002      3518          move.l    D2,D0
00002188  E588      3519          lsl.l     #2,D0
0000218A  41F9 0084 3520          lea       _BreakPointAddress.L,A0
0000218E  0128      
00002190  B6B0 0800 3521          cmp.l     0(A0,D0.L),D3
00002194  6610      3522          bne.s     SetBreakPoint_16
                    3523   ; printf("\r\nError: Break Point Already Exists at Address : %08x\r\n", BPAddress) ;
00002196  2F03      3524          move.l    D3,-(A7)
00002198  4879 0084 3525          pea       @m68kde~1_104.L
0000219C  0F6C      
0000219E  4E92      3526          jsr       (A2)
000021A0  504F      3527          addq.w    #8,A7
                    3528   ; return ;
000021A2  6000 0076 3529          bra       SetBreakPoint_15
                    3530   SetBreakPoint_16:
                    3531   ; }
                    3532   ; if(BreakPointSetOrCleared[i] == 0) {
000021A6  2002      3533          move.l    D2,D0
000021A8  E588      3534          lsl.l     #2,D0
000021AA  2033 0800 3535          move.l    0(A3,D0.L),D0
000021AE  6600 0064 3536          bne       SetBreakPoint_18
                    3537   ; // set BP here
                    3538   ; BreakPointSetOrCleared[i] = 1 ;                                 // mark this breakpoint as set
000021B2  2002      3539          move.l    D2,D0
000021B4  E588      3540          lsl.l     #2,D0
000021B6  27BC 0000 3541          move.l    #1,0(A3,D0.L)
000021BA  0001 0800 
                    3542   ; BreakPointInstruction[i] = *ProgramBreakPointAddress ;          // copy the user program instruction here so we can put it back afterwards
000021BE  2044      3543          move.l    D4,A0
000021C0  2002      3544          move.l    D2,D0
000021C2  E388      3545          lsl.l     #1,D0
000021C4  43F9 0084 3546          lea       _BreakPointInstruction.L,A1
000021C8  0148      
000021CA  3390 0800 3547          move.w    (A0),0(A1,D0.L)
                    3548   ; DisassembleInstruction(ProgramBreakPointAddress) ;
000021CE  2F04      3549          move.l    D4,-(A7)
000021D0  4EB9 0000 3550          jsr       _DisassembleInstruction
000021D4  364C      
000021D6  584F      3551          addq.w    #4,A7
                    3552   ; FormatInstructionForTrace() ;
000021D8  4EB8 1450 3553          jsr       _FormatInstructionForTrace
                    3554   ; printf("\r\nBreak Point Set at Address: [$%08x], Instruction = %s", ProgramBreakPointAddress, Instruction) ;
000021DC  4879 0084 3555          pea       _Instruction.L
000021E0  04DC      
000021E2  2F04      3556          move.l    D4,-(A7)
000021E4  4879 0084 3557          pea       @m68kde~1_105.L
000021E8  0FA4      
000021EA  4E92      3558          jsr       (A2)
000021EC  DEFC 000C 3559          add.w     #12,A7
                    3560   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e)    ;   // put a Trap14 instruction at the user specified address
000021F0  2044      3561          move.l    D4,A0
000021F2  30BC 4E4E 3562          move.w    #20046,(A0)
                    3563   ; BreakPointAddress[i] = BPAddress ;                              // record the address of this break point in the debugger
000021F6  2002      3564          move.l    D2,D0
000021F8  E588      3565          lsl.l     #2,D0
000021FA  41F9 0084 3566          lea       _BreakPointAddress.L,A0
000021FE  0128      
00002200  2183 0800 3567          move.l    D3,0(A0,D0.L)
                    3568   ; printf("\r\n") ;
00002204  4879 0084 3569          pea       @m68kde~1_106.L
00002208  0FDC      
0000220A  4E92      3570          jsr       (A2)
0000220C  584F      3571          addq.w    #4,A7
                    3572   ; BreakPointDisplay() ;       // display the break points
0000220E  4EB8 1C96 3573          jsr       _BreakPointDisplay
                    3574   ; return ;
00002212  6006      3575          bra.s     SetBreakPoint_15
                    3576   SetBreakPoint_18:
00002214  5282      3577          addq.l    #1,D2
00002216  6000 FF64 3578          bra       SetBreakPoint_13
                    3579   SetBreakPoint_15:
0000221A  4CDF 0C1C 3580          movem.l   (A7)+,D2/D3/D4/A2/A3
0000221E  4E5E      3581          unlk      A6
00002220  4E75      3582          rts
                    3583   ; }
                    3584   ; }
                    3585   ; }
                    3586   ; void SetWatchPoint(void)
                    3587   ; {
                    3588   _SetWatchPoint:
00002222  4E56 FFF8 3589          link      A6,#-8
00002226  48E7 3030 3590          movem.l   D2/D3/A2/A3,-(A7)
0000222A  45F9 0000 3591          lea       _printf.L,A2
0000222E  5644      
00002230  47F9 0084 3592          lea       _WatchPointSetOrCleared.L,A3
00002234  019C      
                    3593   ; int i ;
                    3594   ; int WPNumber;
                    3595   ; int WPAddress;
                    3596   ; volatile unsigned short int *ProgramWatchPointAddress ;
                    3597   ; // see if any free break points
                    3598   ; for(i = 0; i < 8; i ++) {
00002236  4282      3599          clr.l     D2
                    3600   SetWatchPoint_1:
00002238  0C82 0000 3601          cmp.l     #8,D2
0000223C  0008      
0000223E  6C10      3602          bge.s     SetWatchPoint_3
                    3603   ; if( WatchPointSetOrCleared[i] == 0)
00002240  2002      3604          move.l    D2,D0
00002242  E588      3605          lsl.l     #2,D0
00002244  2033 0800 3606          move.l    0(A3,D0.L),D0
00002248  6602      3607          bne.s     SetWatchPoint_4
                    3608   ; break ;         // if spare WP found allow user to set it
0000224A  6004      3609          bra.s     SetWatchPoint_3
                    3610   SetWatchPoint_4:
0000224C  5282      3611          addq.l    #1,D2
0000224E  60E8      3612          bra       SetWatchPoint_1
                    3613   SetWatchPoint_3:
                    3614   ; }
                    3615   ; if(i == 8) {
00002250  0C82 0000 3616          cmp.l     #8,D2
00002254  0008      
00002256  660E      3617          bne.s     SetWatchPoint_6
                    3618   ; printf("\r\nNo FREE Watch Points.....") ;
00002258  4879 0084 3619          pea       @m68kde~1_107.L
0000225C  0FE0      
0000225E  4E92      3620          jsr       (A2)
00002260  584F      3621          addq.w    #4,A7
                    3622   ; return ;
00002262  6000 008C 3623          bra       SetWatchPoint_11
                    3624   SetWatchPoint_6:
                    3625   ; }
                    3626   ; printf("\r\nWatch Point Address: ") ;
00002266  4879 0084 3627          pea       @m68kde~1_108.L
0000226A  0FFC      
0000226C  4E92      3628          jsr       (A2)
0000226E  584F      3629          addq.w    #4,A7
                    3630   ; WPAddress = Get8HexDigits(0) ;
00002270  42A7      3631          clr.l     -(A7)
00002272  4EB8 0CAC 3632          jsr       _Get8HexDigits
00002276  584F      3633          addq.w    #4,A7
00002278  2600      3634          move.l    D0,D3
                    3635   ; // search for first free wp or existing same wp
                    3636   ; for(i = 0; i < 8; i++)  {
0000227A  4282      3637          clr.l     D2
                    3638   SetWatchPoint_9:
0000227C  0C82 0000 3639          cmp.l     #8,D2
00002280  0008      
00002282  6C00 006C 3640          bge       SetWatchPoint_11
                    3641   ; if(WatchPointAddress[i] == WPAddress && WPAddress != 0)   {     //so we can set a wp at 0
00002286  2002      3642          move.l    D2,D0
00002288  E588      3643          lsl.l     #2,D0
0000228A  41F9 0084 3644          lea       _WatchPointAddress.L,A0
0000228E  017C      
00002290  B6B0 0800 3645          cmp.l     0(A0,D0.L),D3
00002294  6614      3646          bne.s     SetWatchPoint_12
00002296  4A83      3647          tst.l     D3
00002298  6710      3648          beq.s     SetWatchPoint_12
                    3649   ; printf("\r\nError: Watch Point Already Set at Address : %08x\r\n", WPAddress) ;
0000229A  2F03      3650          move.l    D3,-(A7)
0000229C  4879 0084 3651          pea       @m68kde~1_109.L
000022A0  1014      
000022A2  4E92      3652          jsr       (A2)
000022A4  504F      3653          addq.w    #8,A7
                    3654   ; return ;
000022A6  6000 0048 3655          bra       SetWatchPoint_11
                    3656   SetWatchPoint_12:
                    3657   ; }
                    3658   ; if(WatchPointSetOrCleared[i] == 0) {
000022AA  2002      3659          move.l    D2,D0
000022AC  E588      3660          lsl.l     #2,D0
000022AE  2033 0800 3661          move.l    0(A3,D0.L),D0
000022B2  6600 0038 3662          bne       SetWatchPoint_14
                    3663   ; WatchPointSetOrCleared[i] = 1 ;                                 // mark this watchpoint as set
000022B6  2002      3664          move.l    D2,D0
000022B8  E588      3665          lsl.l     #2,D0
000022BA  27BC 0000 3666          move.l    #1,0(A3,D0.L)
000022BE  0001 0800 
                    3667   ; printf("\r\nWatch Point Set at Address: [$%08x]", WPAddress) ;
000022C2  2F03      3668          move.l    D3,-(A7)
000022C4  4879 0084 3669          pea       @m68kde~1_110.L
000022C8  104A      
000022CA  4E92      3670          jsr       (A2)
000022CC  504F      3671          addq.w    #8,A7
                    3672   ; WatchPointAddress[i] = WPAddress ;                              // record the address of this watch point in the debugger
000022CE  2002      3673          move.l    D2,D0
000022D0  E588      3674          lsl.l     #2,D0
000022D2  41F9 0084 3675          lea       _WatchPointAddress.L,A0
000022D6  017C      
000022D8  2183 0800 3676          move.l    D3,0(A0,D0.L)
                    3677   ; printf("\r\n") ;
000022DC  4879 0084 3678          pea       @m68kde~1_111.L
000022E0  1070      
000022E2  4E92      3679          jsr       (A2)
000022E4  584F      3680          addq.w    #4,A7
                    3681   ; WatchPointDisplay() ;       // display the break points
000022E6  4EB8 1D90 3682          jsr       _WatchPointDisplay
                    3683   ; return ;
000022EA  6004      3684          bra.s     SetWatchPoint_11
                    3685   SetWatchPoint_14:
000022EC  5282      3686          addq.l    #1,D2
000022EE  608C      3687          bra       SetWatchPoint_9
                    3688   SetWatchPoint_11:
000022F0  4CDF 0C0C 3689          movem.l   (A7)+,D2/D3/A2/A3
000022F4  4E5E      3690          unlk      A6
000022F6  4E75      3691          rts
                    3692   ; }
                    3693   ; }
                    3694   ; }
                    3695   ; void HandleBreakPoint(void)
                    3696   ; {
                    3697   _HandleBreakPoint:
000022F8  4E56 FFFC 3698          link      A6,#-4
000022FC  48E7 0038 3699          movem.l   A2/A3/A4,-(A7)
00002300  45F9 0084 3700          lea       _i.L,A2
00002304  00C2      
00002306  47F9 0000 3701          lea       _printf.L,A3
0000230A  5644      
0000230C  49F9 0084 3702          lea       _PC.L,A4
00002310  011A      
                    3703   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3704   ; // now we have to put the break point back to run the instruction
                    3705   ; // PC will contain the address of the TRAP instruction but advanced by two bytes so lets play with that
                    3706   ; PC = PC - 2 ;  // ready for user to resume after reaching breakpoint
00002312  5594      3707          subq.l    #2,(A4)
                    3708   ; printf("\r\n\r\n\r\n\r\n@BREAKPOINT") ;
00002314  4879 0084 3709          pea       @m68kde~1_112.L
00002318  1074      
0000231A  4E93      3710          jsr       (A3)
0000231C  584F      3711          addq.w    #4,A7
                    3712   ; printf("\r\nSingle Step : [ON]") ;
0000231E  4879 0084 3713          pea       @m68kde~1_113.L
00002322  1088      
00002324  4E93      3714          jsr       (A3)
00002326  584F      3715          addq.w    #4,A7
                    3716   ; printf("\r\nBreakPoints : [Enabled]") ;
00002328  4879 0084 3717          pea       @m68kde~1_114.L
0000232C  109E      
0000232E  4E93      3718          jsr       (A3)
00002330  584F      3719          addq.w    #4,A7
                    3720   ; // now clear the break point (put original instruction back)
                    3721   ; ProgramBreakPointAddress = PC ;
00002332  2D54 FFFC 3722          move.l    (A4),-4(A6)
                    3723   ; for(i = 0; i < 8; i ++) {
00002336  4292      3724          clr.l     (A2)
                    3725   HandleBreakPoint_1:
00002338  2012      3726          move.l    (A2),D0
0000233A  0C80 0000 3727          cmp.l     #8,D0
0000233E  0008      
00002340  6400 0056 3728          bhs       HandleBreakPoint_3
                    3729   ; if(BreakPointAddress[i] == PC) {        // if we have found the breakpoint
00002344  2012      3730          move.l    (A2),D0
00002346  E588      3731          lsl.l     #2,D0
00002348  41F9 0084 3732          lea       _BreakPointAddress.L,A0
0000234C  0128      
0000234E  2230 0800 3733          move.l    0(A0,D0.L),D1
00002352  B294      3734          cmp.l     (A4),D1
00002354  6600 003E 3735          bne       HandleBreakPoint_4
                    3736   ; BreakPointAddress[i] = 0 ;
00002358  2012      3737          move.l    (A2),D0
0000235A  E588      3738          lsl.l     #2,D0
0000235C  41F9 0084 3739          lea       _BreakPointAddress.L,A0
00002360  0128      
00002362  42B0 0800 3740          clr.l     0(A0,D0.L)
                    3741   ; BreakPointSetOrCleared[i] = 0 ;
00002366  2012      3742          move.l    (A2),D0
00002368  E588      3743          lsl.l     #2,D0
0000236A  41F9 0084 3744          lea       _BreakPointSetOrCleared.L,A0
0000236E  0158      
00002370  42B0 0800 3745          clr.l     0(A0,D0.L)
                    3746   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
00002374  2012      3747          move.l    (A2),D0
00002376  E388      3748          lsl.l     #1,D0
00002378  41F9 0084 3749          lea       _BreakPointInstruction.L,A0
0000237C  0148      
0000237E  226E FFFC 3750          move.l    -4(A6),A1
00002382  32B0 0800 3751          move.w    0(A0,D0.L),(A1)
                    3752   ; BreakPointInstruction[i] = 0 ;
00002386  2012      3753          move.l    (A2),D0
00002388  E388      3754          lsl.l     #1,D0
0000238A  41F9 0084 3755          lea       _BreakPointInstruction.L,A0
0000238E  0148      
00002390  4270 0800 3756          clr.w     0(A0,D0.L)
                    3757   HandleBreakPoint_4:
00002394  5292      3758          addq.l    #1,(A2)
00002396  60A0      3759          bra       HandleBreakPoint_1
                    3760   HandleBreakPoint_3:
                    3761   ; }
                    3762   ; }
                    3763   ; DumpRegisters() ;
00002398  4EB8 14C4 3764          jsr       _DumpRegisters
                    3765   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
0000239C  4879 0084 3766          pea       @m68kde~1_115.L
000023A0  10B8      
000023A2  4E93      3767          jsr       (A3)
000023A4  584F      3768          addq.w    #4,A7
                    3769   ; printf("\r\nPress <ESC> to Resume User Program\r\n") ;
000023A6  4879 0084 3770          pea       @m68kde~1_116.L
000023AA  10E4      
000023AC  4E93      3771          jsr       (A3)
000023AE  584F      3772          addq.w    #4,A7
                    3773   ; menu() ;
000023B0  4EB9 0000 3774          jsr       _menu
000023B4  2606      
000023B6  4CDF 1C00 3775          movem.l   (A7)+,A2/A3/A4
000023BA  4E5E      3776          unlk      A6
000023BC  4E75      3777          rts
                    3778   ; }
                    3779   ; void UnknownCommand()
                    3780   ; {
                    3781   _UnknownCommand:
                    3782   ; printf("\r\nUnknown Command.....\r\n") ;
000023BE  4879 0084 3783          pea       @m68kde~1_117.L
000023C2  110C      
000023C4  4EB9 0000 3784          jsr       _printf
000023C8  5644      
000023CA  584F      3785          addq.w    #4,A7
                    3786   ; Help() ;
000023CC  4EB9 0000 3787          jsr       _Help
000023D0  2522      
000023D2  4E75      3788          rts
                    3789   ; }
                    3790   ; // system when the users program executes a TRAP #15 instruction to halt program and return to debug monitor
                    3791   ; void CallDebugMonitor(void)
                    3792   ; {
                    3793   _CallDebugMonitor:
                    3794   ; printf("\r\nProgram Ended (TRAP #15)....") ;
000023D4  4879 0084 3795          pea       @m68kde~1_118.L
000023D8  1126      
000023DA  4EB9 0000 3796          jsr       _printf
000023DE  5644      
000023E0  584F      3797          addq.w    #4,A7
                    3798   ; menu();
000023E2  4EB9 0000 3799          jsr       _menu
000023E6  2606      
000023E8  4E75      3800          rts
                    3801   ; }
                    3802   ; void Breakpoint(void)
                    3803   ; {
                    3804   _Breakpoint:
000023EA  2F02      3805          move.l    D2,-(A7)
                    3806   ; char c;
                    3807   ; c = toupper(_getch());
000023EC  2F00      3808          move.l    D0,-(A7)
000023EE  4EB8 0B78 3809          jsr       __getch
000023F2  2200      3810          move.l    D0,D1
000023F4  201F      3811          move.l    (A7)+,D0
000023F6  2F01      3812          move.l    D1,-(A7)
000023F8  4EB9 0000 3813          jsr       _toupper
000023FC  5618      
000023FE  584F      3814          addq.w    #4,A7
00002400  1400      3815          move.b    D0,D2
                    3816   ; if( c == (char)('D'))                                      // BreakPoint Display
00002402  0C02 0044 3817          cmp.b     #68,D2
00002406  6608      3818          bne.s     Breakpoint_1
                    3819   ; BreakPointDisplay() ;
00002408  4EB8 1C96 3820          jsr       _BreakPointDisplay
0000240C  6000 0054 3821          bra       Breakpoint_10
                    3822   Breakpoint_1:
                    3823   ; else if(c == (char)('K')) {                                 // breakpoint Kill
00002410  0C02 004B 3824          cmp.b     #75,D2
00002414  6630      3825          bne.s     Breakpoint_3
                    3826   ; printf("\r\nKill All Break Points...(y/n)?") ;
00002416  4879 0084 3827          pea       @m68kde~1_119.L
0000241A  1146      
0000241C  4EB9 0000 3828          jsr       _printf
00002420  5644      
00002422  584F      3829          addq.w    #4,A7
                    3830   ; c = toupper(_getch());
00002424  2F00      3831          move.l    D0,-(A7)
00002426  4EB8 0B78 3832          jsr       __getch
0000242A  2200      3833          move.l    D0,D1
0000242C  201F      3834          move.l    (A7)+,D0
0000242E  2F01      3835          move.l    D1,-(A7)
00002430  4EB9 0000 3836          jsr       _toupper
00002434  5618      
00002436  584F      3837          addq.w    #4,A7
00002438  1400      3838          move.b    D0,D2
                    3839   ; if(c == (char)('Y'))
0000243A  0C02 0059 3840          cmp.b     #89,D2
0000243E  6604      3841          bne.s     Breakpoint_5
                    3842   ; KillAllBreakPoints() ;
00002440  4EB8 2054 3843          jsr       _KillAllBreakPoints
                    3844   Breakpoint_5:
00002444  601C      3845          bra.s     Breakpoint_10
                    3846   Breakpoint_3:
                    3847   ; }
                    3848   ; else if(c == (char)('S')) {
00002446  0C02 0053 3849          cmp.b     #83,D2
0000244A  6606      3850          bne.s     Breakpoint_7
                    3851   ; SetBreakPoint() ;
0000244C  4EB8 20EC 3852          jsr       _SetBreakPoint
00002450  6010      3853          bra.s     Breakpoint_10
                    3854   Breakpoint_7:
                    3855   ; }
                    3856   ; else if(c == (char)('C')) {
00002452  0C02 0043 3857          cmp.b     #67,D2
00002456  6606      3858          bne.s     Breakpoint_9
                    3859   ; BreakPointClear() ;
00002458  4EB8 1E3C 3860          jsr       _BreakPointClear
0000245C  6004      3861          bra.s     Breakpoint_10
                    3862   Breakpoint_9:
                    3863   ; }
                    3864   ; else
                    3865   ; UnknownCommand() ;
0000245E  4EB8 23BE 3866          jsr       _UnknownCommand
                    3867   Breakpoint_10:
00002462  241F      3868          move.l    (A7)+,D2
00002464  4E75      3869          rts
                    3870   ; }
                    3871   ; void Watchpoint(void)
                    3872   ; {
                    3873   _Watchpoint:
00002466  2F02      3874          move.l    D2,-(A7)
                    3875   ; char c;
                    3876   ; c = toupper(_getch());
00002468  2F00      3877          move.l    D0,-(A7)
0000246A  4EB8 0B78 3878          jsr       __getch
0000246E  2200      3879          move.l    D0,D1
00002470  201F      3880          move.l    (A7)+,D0
00002472  2F01      3881          move.l    D1,-(A7)
00002474  4EB9 0000 3882          jsr       _toupper
00002478  5618      
0000247A  584F      3883          addq.w    #4,A7
0000247C  1400      3884          move.b    D0,D2
                    3885   ; if( c == (char)('D'))                                      // WatchPoint Display
0000247E  0C02 0044 3886          cmp.b     #68,D2
00002482  6608      3887          bne.s     Watchpoint_1
                    3888   ; WatchPointDisplay() ;
00002484  4EB8 1D90 3889          jsr       _WatchPointDisplay
00002488  6000 0054 3890          bra       Watchpoint_10
                    3891   Watchpoint_1:
                    3892   ; else if(c == (char)('K')) {                                 // wtahcpoint Kill
0000248C  0C02 004B 3893          cmp.b     #75,D2
00002490  6630      3894          bne.s     Watchpoint_3
                    3895   ; printf("\r\nKill All Watch Points...(y/n)?") ;
00002492  4879 0084 3896          pea       @m68kde~1_120.L
00002496  1168      
00002498  4EB9 0000 3897          jsr       _printf
0000249C  5644      
0000249E  584F      3898          addq.w    #4,A7
                    3899   ; c = toupper(_getch());
000024A0  2F00      3900          move.l    D0,-(A7)
000024A2  4EB8 0B78 3901          jsr       __getch
000024A6  2200      3902          move.l    D0,D1
000024A8  201F      3903          move.l    (A7)+,D0
000024AA  2F01      3904          move.l    D1,-(A7)
000024AC  4EB9 0000 3905          jsr       _toupper
000024B0  5618      
000024B2  584F      3906          addq.w    #4,A7
000024B4  1400      3907          move.b    D0,D2
                    3908   ; if(c == (char)('Y'))
000024B6  0C02 0059 3909          cmp.b     #89,D2
000024BA  6604      3910          bne.s     Watchpoint_5
                    3911   ; KillAllWatchPoints() ;
000024BC  4EB8 20BC 3912          jsr       _KillAllWatchPoints
                    3913   Watchpoint_5:
000024C0  601C      3914          bra.s     Watchpoint_10
                    3915   Watchpoint_3:
                    3916   ; }
                    3917   ; else if(c == (char)('S')) {
000024C2  0C02 0053 3918          cmp.b     #83,D2
000024C6  6606      3919          bne.s     Watchpoint_7
                    3920   ; SetWatchPoint() ;
000024C8  4EB8 2222 3921          jsr       _SetWatchPoint
000024CC  6010      3922          bra.s     Watchpoint_10
                    3923   Watchpoint_7:
                    3924   ; }
                    3925   ; else if(c == (char)('C')) {
000024CE  0C02 0043 3926          cmp.b     #67,D2
000024D2  6606      3927          bne.s     Watchpoint_9
                    3928   ; WatchPointClear() ;
000024D4  4EB8 1F16 3929          jsr       _WatchPointClear
000024D8  6004      3930          bra.s     Watchpoint_10
                    3931   Watchpoint_9:
                    3932   ; }
                    3933   ; else
                    3934   ; UnknownCommand() ;
000024DA  4EB8 23BE 3935          jsr       _UnknownCommand
                    3936   Watchpoint_10:
000024DE  241F      3937          move.l    (A7)+,D2
000024E0  4E75      3938          rts
                    3939   ; }
                    3940   ; void DMenu(void)
                    3941   ; {
                    3942   _DMenu:
000024E2  2F02      3943          move.l    D2,-(A7)
                    3944   ; char c;
                    3945   ; c = toupper(_getch());
000024E4  2F00      3946          move.l    D0,-(A7)
000024E6  4EB8 0B78 3947          jsr       __getch
000024EA  2200      3948          move.l    D0,D1
000024EC  201F      3949          move.l    (A7)+,D0
000024EE  2F01      3950          move.l    D1,-(A7)
000024F0  4EB9 0000 3951          jsr       _toupper
000024F4  5618      
000024F6  584F      3952          addq.w    #4,A7
000024F8  1400      3953          move.b    D0,D2
                    3954   ; if( c == (char)('U'))                                     // Dump Memory
000024FA  0C02 0055 3955          cmp.b     #85,D2
000024FE  6606      3956          bne.s     DMenu_1
                    3957   ; DumpMemory() ;
00002500  4EB8 0EE8 3958          jsr       _DumpMemory
00002504  6018      3959          bra.s     DMenu_4
                    3960   DMenu_1:
                    3961   ; else if(c == (char)('I'))   {
00002506  0C02 0049 3962          cmp.b     #73,D2
0000250A  660E      3963          bne.s     DMenu_3
                    3964   ; DisableBreakPoints() ;
0000250C  4EB8 1FB8 3965          jsr       _DisableBreakPoints
                    3966   ; DisassembleProgram() ;
00002510  4EB8 0D08 3967          jsr       _DisassembleProgram
                    3968   ; EnableBreakPoints() ;
00002514  4EB8 200C 3969          jsr       _EnableBreakPoints
00002518  6004      3970          bra.s     DMenu_4
                    3971   DMenu_3:
                    3972   ; }
                    3973   ; else
                    3974   ; UnknownCommand() ;
0000251A  4EB8 23BE 3975          jsr       _UnknownCommand
                    3976   DMenu_4:
0000251E  241F      3977          move.l    (A7)+,D2
00002520  4E75      3978          rts
                    3979   ; }
                    3980   ; void Help(void)
                    3981   ; {
                    3982   _Help:
00002522  48E7 2020 3983          movem.l   D2/A2,-(A7)
00002526  45F9 0000 3984          lea       _printf.L,A2
0000252A  5644      
                    3985   ; char *banner = "\r\n----------------------------------------------------------------" ;
0000252C  41F9 0084 3986          lea       @m68kde~1_121.L,A0
00002530  118A      
00002532  2408      3987          move.l    A0,D2
                    3988   ; printf(banner) ;
00002534  2F02      3989          move.l    D2,-(A7)
00002536  4E92      3990          jsr       (A2)
00002538  584F      3991          addq.w    #4,A7
                    3992   ; printf("\r\n  Debugger Command Summary") ;
0000253A  4879 0084 3993          pea       @m68kde~1_122.L
0000253E  11CE      
00002540  4E92      3994          jsr       (A2)
00002542  584F      3995          addq.w    #4,A7
                    3996   ; printf(banner) ;
00002544  2F02      3997          move.l    D2,-(A7)
00002546  4E92      3998          jsr       (A2)
00002548  584F      3999          addq.w    #4,A7
                    4000   ; printf("\r\n  .(reg)       - Change Registers: e.g A0-A7,D0-D7,PC,SSP,USP,SR");
0000254A  4879 0084 4001          pea       @m68kde~1_123.L
0000254E  11EC      
00002550  4E92      4002          jsr       (A2)
00002552  584F      4003          addq.w    #4,A7
                    4004   ; printf("\r\n  BD/BS/BC/BK  - Break Point: Display/Set/Clear/Kill") ;
00002554  4879 0084 4005          pea       @m68kde~1_124.L
00002558  1230      
0000255A  4E92      4006          jsr       (A2)
0000255C  584F      4007          addq.w    #4,A7
                    4008   ; printf("\r\n  C            - Copy Program from Flash to Main Memory") ;
0000255E  4879 0084 4009          pea       @m68kde~1_125.L
00002562  1268      
00002564  4E92      4010          jsr       (A2)
00002566  584F      4011          addq.w    #4,A7
                    4012   ; printf("\r\n  DI           - Disassemble Program");
00002568  4879 0084 4013          pea       @m68kde~1_126.L
0000256C  12A2      
0000256E  4E92      4014          jsr       (A2)
00002570  584F      4015          addq.w    #4,A7
                    4016   ; printf("\r\n  DU           - Dump Memory Contents to Screen") ;
00002572  4879 0084 4017          pea       @m68kde~1_127.L
00002576  12CA      
00002578  4E92      4018          jsr       (A2)
0000257A  584F      4019          addq.w    #4,A7
                    4020   ; printf("\r\n  E            - Enter String into Memory") ;
0000257C  4879 0084 4021          pea       @m68kde~1_128.L
00002580  12FC      
00002582  4E92      4022          jsr       (A2)
00002584  584F      4023          addq.w    #4,A7
                    4024   ; printf("\r\n  F            - Fill Memory with Data") ;
00002586  4879 0084 4025          pea       @m68kde~1_129.L
0000258A  1328      
0000258C  4E92      4026          jsr       (A2)
0000258E  584F      4027          addq.w    #4,A7
                    4028   ; printf("\r\n  G            - Go Program Starting at Address: $%08X", PC) ;
00002590  2F39 0084 4029          move.l    _PC.L,-(A7)
00002594  011A      
00002596  4879 0084 4030          pea       @m68kde~1_130.L
0000259A  1352      
0000259C  4E92      4031          jsr       (A2)
0000259E  504F      4032          addq.w    #8,A7
                    4033   ; printf("\r\n  L            - Load Program (.HEX file) from Laptop") ;
000025A0  4879 0084 4034          pea       @m68kde~1_131.L
000025A4  138C      
000025A6  4E92      4035          jsr       (A2)
000025A8  584F      4036          addq.w    #4,A7
                    4037   ; printf("\r\n  M            - Memory Examine and Change");
000025AA  4879 0084 4038          pea       @m68kde~1_132.L
000025AE  13C4      
000025B0  4E92      4039          jsr       (A2)
000025B2  584F      4040          addq.w    #4,A7
                    4041   ; printf("\r\n  P            - Program Flash Memory with User Program") ;
000025B4  4879 0084 4042          pea       @m68kde~1_133.L
000025B8  13F2      
000025BA  4E92      4043          jsr       (A2)
000025BC  584F      4044          addq.w    #4,A7
                    4045   ; printf("\r\n  R            - Display 68000 Registers") ;
000025BE  4879 0084 4046          pea       @m68kde~1_134.L
000025C2  142C      
000025C4  4E92      4047          jsr       (A2)
000025C6  584F      4048          addq.w    #4,A7
                    4049   ; printf("\r\n  S            - Toggle ON/OFF Single Step Mode") ;
000025C8  4879 0084 4050          pea       @m68kde~1_135.L
000025CC  1458      
000025CE  4E92      4051          jsr       (A2)
000025D0  584F      4052          addq.w    #4,A7
                    4053   ; printf("\r\n  TM           - Test Memory") ;
000025D2  4879 0084 4054          pea       @m68kde~1_136.L
000025D6  148A      
000025D8  4E92      4055          jsr       (A2)
000025DA  584F      4056          addq.w    #4,A7
                    4057   ; printf("\r\n  TS           - Test DE2 Switches: SW0-SW15") ;
000025DC  4879 0084 4058          pea       @m68kde~1_137.L
000025E0  14AA      
000025E2  4E92      4059          jsr       (A2)
000025E4  584F      4060          addq.w    #4,A7
                    4061   ; printf("\r\n  TD           - Test DE2 Displays: LEDs and 7-Segment") ;
000025E6  4879 0084 4062          pea       @m68kde~1_138.L
000025EA  14DA      
000025EC  4E92      4063          jsr       (A2)
000025EE  584F      4064          addq.w    #4,A7
                    4065   ; printf("\r\n  WD/WS/WC/WK  - Watch Point: Display/Set/Clear/Kill") ;
000025F0  4879 0084 4066          pea       @m68kde~1_139.L
000025F4  1514      
000025F6  4E92      4067          jsr       (A2)
000025F8  584F      4068          addq.w    #4,A7
                    4069   ; printf(banner) ;
000025FA  2F02      4070          move.l    D2,-(A7)
000025FC  4E92      4071          jsr       (A2)
000025FE  584F      4072          addq.w    #4,A7
00002600  4CDF 0404 4073          movem.l   (A7)+,D2/A2
00002604  4E75      4074          rts
                    4075   ; }
                    4076   ; void menu(void)
                    4077   ; {
                    4078   _menu:
00002606  48E7 303C 4079          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
0000260A  45F9 0000 4080          lea       _printf.L,A2
0000260E  5644      
00002610  47F9 0084 4081          lea       _Trace.L,A3
00002614  00D6      
00002616  49F9 0084 4082          lea       _x.L,A4
0000261A  00C6      
0000261C  4BF9 0084 4083          lea       _SR.L,A5
00002620  0126      
                    4084   ; char c,c1 ;
                    4085   ; while(1)    {
                    4086   menu_1:
                    4087   ; FlushKeyboard() ;               // dump unread characters from keyboard
00002622  4EB8 0BAE 4088          jsr       _FlushKeyboard
                    4089   ; printf("\r\n#") ;
00002626  4879 0084 4090          pea       @m68kde~1_140.L
0000262A  154C      
0000262C  4E92      4091          jsr       (A2)
0000262E  584F      4092          addq.w    #4,A7
                    4093   ; c = toupper(_getch());
00002630  2F00      4094          move.l    D0,-(A7)
00002632  4EB8 0B78 4095          jsr       __getch
00002636  2200      4096          move.l    D0,D1
00002638  201F      4097          move.l    (A7)+,D0
0000263A  2F01      4098          move.l    D1,-(A7)
0000263C  4EB9 0000 4099          jsr       _toupper
00002640  5618      
00002642  584F      4100          addq.w    #4,A7
00002644  1400      4101          move.b    D0,D2
                    4102   ; if( c == (char)('L'))                  // load s record file
00002646  0C02 004C 4103          cmp.b     #76,D2
0000264A  6608      4104          bne.s     menu_4
                    4105   ; Load_SRecordFile() ;
0000264C  4EB8 1052 4106          jsr       _Load_SRecordFile
00002650  6000 021E 4107          bra       menu_46
                    4108   menu_4:
                    4109   ; else if( c == (char)('D'))             // dump memory
00002654  0C02 0044 4110          cmp.b     #68,D2
00002658  6608      4111          bne.s     menu_6
                    4112   ; DMenu() ;
0000265A  4EB8 24E2 4113          jsr       _DMenu
0000265E  6000 0210 4114          bra       menu_46
                    4115   menu_6:
                    4116   ; else if( c == (char)('E'))             // Enter String into memory
00002662  0C02 0045 4117          cmp.b     #69,D2
00002666  660A      4118          bne.s     menu_8
                    4119   ; EnterString() ;
00002668  4EB9 0000 4120          jsr       _EnterString
0000266C  29B8      
0000266E  6000 0200 4121          bra       menu_46
                    4122   menu_8:
                    4123   ; else if( c == (char)('F'))             // fill memory
00002672  0C02 0046 4124          cmp.b     #70,D2
00002676  6608      4125          bne.s     menu_10
                    4126   ; FillMemory() ;
00002678  4EB8 0FD8 4127          jsr       _FillMemory
0000267C  6000 01F2 4128          bra       menu_46
                    4129   menu_10:
                    4130   ; else if( c == (char)('G'))  {           // go user program
00002680  0C02 0047 4131          cmp.b     #71,D2
00002684  6626      4132          bne.s     menu_12
                    4133   ; printf("\r\nProgram Running.....") ;
00002686  4879 0084 4134          pea       @m68kde~1_141.L
0000268A  1550      
0000268C  4E92      4135          jsr       (A2)
0000268E  584F      4136          addq.w    #4,A7
                    4137   ; printf("\r\nPress <RESET> button <Key0> on DE2 to stop") ;
00002690  4879 0084 4138          pea       @m68kde~1_142.L
00002694  1568      
00002696  4E92      4139          jsr       (A2)
00002698  584F      4140          addq.w    #4,A7
                    4141   ; GoFlag = 1 ;
0000269A  23FC 0000 4142          move.l    #1,_GoFlag.L
0000269E  0001 0084 
000026A2  00DA      
                    4143   ; go() ;
000026A4  4EB8 08D4 4144          jsr       _go
000026A8  6000 01C6 4145          bra       menu_46
                    4146   menu_12:
                    4147   ; }
                    4148   ; else if( c == (char)('M'))           // memory examine and modify
000026AC  0C02 004D 4149          cmp.b     #77,D2
000026B0  6608      4150          bne.s     menu_14
                    4151   ; MemoryChange() ;
000026B2  4EB8 11B6 4152          jsr       _MemoryChange
000026B6  6000 01B8 4153          bra       menu_46
                    4154   menu_14:
                    4155   ; else if( c == (char)('P'))            // Program Flash Chip
000026BA  0C02 0050 4156          cmp.b     #80,D2
000026BE  6608      4157          bne.s     menu_16
                    4158   ; ProgramFlashChip() ;
000026C0  4EB8 12B6 4159          jsr       _ProgramFlashChip
000026C4  6000 01AA 4160          bra       menu_46
                    4161   menu_16:
                    4162   ; else if( c == (char)('C'))             // copy flash chip to ram and go
000026C8  0C02 0043 4163          cmp.b     #67,D2
000026CC  6608      4164          bne.s     menu_18
                    4165   ; LoadFromFlashChip();
000026CE  4EB8 13CA 4166          jsr       _LoadFromFlashChip
000026D2  6000 019C 4167          bra       menu_46
                    4168   menu_18:
                    4169   ; else if( c == (char)('R'))             // dump registers
000026D6  0C02 0052 4170          cmp.b     #82,D2
000026DA  6608      4171          bne.s     menu_20
                    4172   ; DumpRegisters() ;
000026DC  4EB8 14C4 4173          jsr       _DumpRegisters
000026E0  6000 018E 4174          bra       menu_46
                    4175   menu_20:
                    4176   ; else if( c == (char)('.'))           // change registers
000026E4  0C02 002E 4177          cmp.b     #46,D2
000026E8  6608      4178          bne.s     menu_22
                    4179   ; ChangeRegisters() ;
000026EA  4EB8 19DA 4180          jsr       _ChangeRegisters
000026EE  6000 0180 4181          bra       menu_46
                    4182   menu_22:
                    4183   ; else if( c == (char)('B'))              // breakpoint command
000026F2  0C02 0042 4184          cmp.b     #66,D2
000026F6  6608      4185          bne.s     menu_24
                    4186   ; Breakpoint() ;
000026F8  4EB8 23EA 4187          jsr       _Breakpoint
000026FC  6000 0172 4188          bra       menu_46
                    4189   menu_24:
                    4190   ; else if( c == (char)('T'))  {          // Test command
00002700  0C02 0054 4191          cmp.b     #84,D2
00002704  6600 0046 4192          bne       menu_26
                    4193   ; c1 = toupper(_getch()) ;
00002708  2F00      4194          move.l    D0,-(A7)
0000270A  4EB8 0B78 4195          jsr       __getch
0000270E  2200      4196          move.l    D0,D1
00002710  201F      4197          move.l    (A7)+,D0
00002712  2F01      4198          move.l    D1,-(A7)
00002714  4EB9 0000 4199          jsr       _toupper
00002718  5618      
0000271A  584F      4200          addq.w    #4,A7
0000271C  1600      4201          move.b    D0,D3
                    4202   ; if(c1 == (char)('M'))                    // memory test
0000271E  0C03 004D 4203          cmp.b     #77,D3
00002722  6608      4204          bne.s     menu_28
                    4205   ; MemoryTest() ;
00002724  4EB9 0000 4206          jsr       _MemoryTest
00002728  2A08      
0000272A  601C      4207          bra.s     menu_33
                    4208   menu_28:
                    4209   ; else if( c1 == (char)('S'))              // Switch Test command
0000272C  0C03 0053 4210          cmp.b     #83,D3
00002730  6606      4211          bne.s     menu_30
                    4212   ; SwitchTest() ;
00002732  4EB8 0ABE 4213          jsr       _SwitchTest
00002736  6010      4214          bra.s     menu_33
                    4215   menu_30:
                    4216   ; else if( c1 == (char)('D'))              // display Test command
00002738  0C03 0044 4217          cmp.b     #68,D3
0000273C  6606      4218          bne.s     menu_32
                    4219   ; TestLEDS() ;
0000273E  4EB8 0A6C 4220          jsr       _TestLEDS
00002742  6004      4221          bra.s     menu_33
                    4222   menu_32:
                    4223   ; else
                    4224   ; UnknownCommand() ;
00002744  4EB8 23BE 4225          jsr       _UnknownCommand
                    4226   menu_33:
00002748  6000 0126 4227          bra       menu_46
                    4228   menu_26:
                    4229   ; }
                    4230   ; else if( c == (char)(' ')) {             // Next instruction command
0000274C  0C02 0020 4231          cmp.b     #32,D2
00002750  6636      4232          bne.s     menu_34
                    4233   ; DisableBreakPoints() ;
00002752  4EB8 1FB8 4234          jsr       _DisableBreakPoints
                    4235   ; if(Trace == 1 && GoFlag == 1)   {    // if the program is running and trace mode on then 'N' is valid
00002756  2013      4236          move.l    (A3),D0
00002758  0C80 0000 4237          cmp.l     #1,D0
0000275C  0001      
0000275E  661A      4238          bne.s     menu_36
00002760  2039 0084 4239          move.l    _GoFlag.L,D0
00002764  00DA      
00002766  0C80 0000 4240          cmp.l     #1,D0
0000276A  0001      
0000276C  660C      4241          bne.s     menu_36
                    4242   ; TraceException = 1 ;             // generate a trace exception for the next instruction if user wants to single step though next instruction
0000276E  13FC 0001 4243          move.b    #1,4194314
00002772  0040 000A 
                    4244   ; return ;
00002776  6000 00FC 4245          bra       menu_38
                    4246   menu_36:
                    4247   ; }
                    4248   ; else
                    4249   ; printf("\r\nError: Press 'G' first to start program") ;
0000277A  4879 0084 4250          pea       @m68kde~1_143.L
0000277E  1596      
00002780  4E92      4251          jsr       (A2)
00002782  584F      4252          addq.w    #4,A7
00002784  6000 00EA 4253          bra       menu_46
                    4254   menu_34:
                    4255   ; }
                    4256   ; else if( c == (char)('S')) {             // single step
00002788  0C02 0053 4257          cmp.b     #83,D2
0000278C  6600 008C 4258          bne       menu_39
                    4259   ; if(Trace == 0) {
00002790  2013      4260          move.l    (A3),D0
00002792  6600 0050 4261          bne       menu_41
                    4262   ; DisableBreakPoints() ;
00002796  4EB8 1FB8 4263          jsr       _DisableBreakPoints
                    4264   ; printf("\r\nSingle Step  :[ON]") ;
0000279A  4879 0084 4265          pea       @m68kde~1_144.L
0000279E  15C0      
000027A0  4E92      4266          jsr       (A2)
000027A2  584F      4267          addq.w    #4,A7
                    4268   ; printf("\r\nBreak Points :[Disabled]") ;
000027A4  4879 0084 4269          pea       @m68kde~1_145.L
000027A8  15D6      
000027AA  4E92      4270          jsr       (A2)
000027AC  584F      4271          addq.w    #4,A7
                    4272   ; SR = SR | (unsigned short int)(0x8000) ;    // set T bit in status register
000027AE  0055 8000 4273          or.w      #32768,(A5)
                    4274   ; printf("\r\nPress 'G' to Trace Program from address $%X.....",PC) ;
000027B2  2F39 0084 4275          move.l    _PC.L,-(A7)
000027B6  011A      
000027B8  4879 0084 4276          pea       @m68kde~1_146.L
000027BC  15F2      
000027BE  4E92      4277          jsr       (A2)
000027C0  504F      4278          addq.w    #8,A7
                    4279   ; printf("\r\nPush <RESET Button> to Stop.....") ;
000027C2  4879 0084 4280          pea       @m68kde~1_147.L
000027C6  1626      
000027C8  4E92      4281          jsr       (A2)
000027CA  584F      4282          addq.w    #4,A7
                    4283   ; DumpRegisters() ;
000027CC  4EB8 14C4 4284          jsr       _DumpRegisters
                    4285   ; Trace = 1;
000027D0  26BC 0000 4286          move.l    #1,(A3)
000027D4  0001      
                    4287   ; TraceException = 1;
000027D6  13FC 0001 4288          move.b    #1,4194314
000027DA  0040 000A 
                    4289   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
000027DE  28B8 0074 4290          move.l    116,(A4)
000027E2  6032      4291          bra.s     menu_42
                    4292   menu_41:
                    4293   ; }
                    4294   ; else {
                    4295   ; Trace = 0 ;
000027E4  4293      4296          clr.l     (A3)
                    4297   ; TraceException = 0 ;
000027E6  4239 0040 4298          clr.b     4194314
000027EA  000A      
                    4299   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
000027EC  28B8 0074 4300          move.l    116,(A4)
                    4301   ; EnableBreakPoints() ;
000027F0  4EB8 200C 4302          jsr       _EnableBreakPoints
                    4303   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
000027F4  0255 7FFF 4304          and.w     #32767,(A5)
                    4305   ; printf("\r\nSingle Step : [OFF]") ;
000027F8  4879 0084 4306          pea       @m68kde~1_148.L
000027FC  164A      
000027FE  4E92      4307          jsr       (A2)
00002800  584F      4308          addq.w    #4,A7
                    4309   ; printf("\r\nBreak Points :[Enabled]") ;
00002802  4879 0084 4310          pea       @m68kde~1_149.L
00002806  1660      
00002808  4E92      4311          jsr       (A2)
0000280A  584F      4312          addq.w    #4,A7
                    4313   ; printf("\r\nPress <ESC> to Resume User Program.....") ;
0000280C  4879 0084 4314          pea       @m68kde~1_150.L
00002810  167A      
00002812  4E92      4315          jsr       (A2)
00002814  584F      4316          addq.w    #4,A7
                    4317   menu_42:
00002816  6000 0058 4318          bra       menu_46
                    4319   menu_39:
                    4320   ; }
                    4321   ; }
                    4322   ; else if(c == (char)(0x1b))  {   // if user choses to end trace and run program
0000281A  0C02 001B 4323          cmp.b     #27,D2
0000281E  6600 0040 4324          bne       menu_43
                    4325   ; Trace = 0;
00002822  4293      4326          clr.l     (A3)
                    4327   ; TraceException = 0;
00002824  4239 0040 4328          clr.b     4194314
00002828  000A      
                    4329   ; x = *(unsigned int *)(0x00000074) ;   // read IRQ 5 vector to reset trace vector generator
0000282A  28B8 0074 4330          move.l    116,(A4)
                    4331   ; EnableBreakPoints() ;
0000282E  4EB8 200C 4332          jsr       _EnableBreakPoints
                    4333   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
00002832  0255 7FFF 4334          and.w     #32767,(A5)
                    4335   ; printf("\r\nSingle Step  :[OFF]") ;
00002836  4879 0084 4336          pea       @m68kde~1_151.L
0000283A  16A4      
0000283C  4E92      4337          jsr       (A2)
0000283E  584F      4338          addq.w    #4,A7
                    4339   ; printf("\r\nBreak Points :[Enabled]");
00002840  4879 0084 4340          pea       @m68kde~1_152.L
00002844  16BA      
00002846  4E92      4341          jsr       (A2)
00002848  584F      4342          addq.w    #4,A7
                    4343   ; printf("\r\nProgram Running.....") ;
0000284A  4879 0084 4344          pea       @m68kde~1_153.L
0000284E  16D4      
00002850  4E92      4345          jsr       (A2)
00002852  584F      4346          addq.w    #4,A7
                    4347   ; printf("\r\nPress <RESET> button <Key0> on DE2 to stop") ;
00002854  4879 0084 4348          pea       @m68kde~1_154.L
00002858  16EC      
0000285A  4E92      4349          jsr       (A2)
0000285C  584F      4350          addq.w    #4,A7
                    4351   ; return ;
0000285E  6014      4352          bra.s     menu_38
                    4353   menu_43:
                    4354   ; }
                    4355   ; else if( c == (char)('W'))              // Watchpoint command
00002860  0C02 0057 4356          cmp.b     #87,D2
00002864  6606      4357          bne.s     menu_45
                    4358   ; Watchpoint() ;
00002866  4EB8 2466 4359          jsr       _Watchpoint
0000286A  6004      4360          bra.s     menu_46
                    4361   menu_45:
                    4362   ; else
                    4363   ; UnknownCommand() ;
0000286C  4EB8 23BE 4364          jsr       _UnknownCommand
                    4365   menu_46:
00002870  6000 FDB0 4366          bra       menu_1
                    4367   menu_38:
00002874  4CDF 3C0C 4368          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
00002878  4E75      4369          rts
                    4370   ; }
                    4371   ; }
                    4372   ; void PrintErrorMessageandAbort(char *string) {
                    4373   _PrintErrorMessageandAbort:
0000287A  4E56 0000 4374          link      A6,#0
                    4375   ; printf("\r\n\r\nProgram ABORT !!!!!!\r\n") ;
0000287E  4879 0084 4376          pea       @m68kde~1_155.L
00002882  171A      
00002884  4EB9 0000 4377          jsr       _printf
00002888  5644      
0000288A  584F      4378          addq.w    #4,A7
                    4379   ; printf("%s\r\n", string) ;
0000288C  2F2E 0008 4380          move.l    8(A6),-(A7)
00002890  4879 0084 4381          pea       @m68kde~1_156.L
00002894  1736      
00002896  4EB9 0000 4382          jsr       _printf
0000289A  5644      
0000289C  504F      4383          addq.w    #8,A7
                    4384   ; menu() ;
0000289E  4EB8 2606 4385          jsr       _menu
000028A2  4E5E      4386          unlk      A6
000028A4  4E75      4387          rts
                    4388   ; }
                    4389   ; void IRQMessage(int level) {
                    4390   _IRQMessage:
000028A6  4E56 0000 4391          link      A6,#0
                    4392   ; printf("\r\n\r\nProgram ABORT !!!!!");
000028AA  4879 0084 4393          pea       @m68kde~1_157.L
000028AE  173C      
000028B0  4EB9 0000 4394          jsr       _printf
000028B4  5644      
000028B6  584F      4395          addq.w    #4,A7
                    4396   ; printf("\r\nUnhandled Interrupt: IRQ%d !!!!!", level) ;
000028B8  2F2E 0008 4397          move.l    8(A6),-(A7)
000028BC  4879 0084 4398          pea       @m68kde~1_158.L
000028C0  1754      
000028C2  4EB9 0000 4399          jsr       _printf
000028C6  5644      
000028C8  504F      4400          addq.w    #8,A7
                    4401   ; menu() ;
000028CA  4EB8 2606 4402          jsr       _menu
000028CE  4E5E      4403          unlk      A6
000028D0  4E75      4404          rts
                    4405   ; }
                    4406   ; void UnhandledIRQ1(void) {
                    4407   _UnhandledIRQ1:
                    4408   ; IRQMessage(1);
000028D2  4878 0001 4409          pea       1
000028D6  4EB8 28A6 4410          jsr       _IRQMessage
000028DA  584F      4411          addq.w    #4,A7
000028DC  4E75      4412          rts
                    4413   ; }
                    4414   ; void UnhandledIRQ2(void) {
                    4415   _UnhandledIRQ2:
                    4416   ; IRQMessage(2);
000028DE  4878 0002 4417          pea       2
000028E2  4EB8 28A6 4418          jsr       _IRQMessage
000028E6  584F      4419          addq.w    #4,A7
000028E8  4E75      4420          rts
                    4421   ; }
                    4422   ; void UnhandledIRQ3(void){
                    4423   _UnhandledIRQ3:
                    4424   ; IRQMessage(3);
000028EA  4878 0003 4425          pea       3
000028EE  4EB8 28A6 4426          jsr       _IRQMessage
000028F2  584F      4427          addq.w    #4,A7
000028F4  4E75      4428          rts
                    4429   ; }
                    4430   ; void UnhandledIRQ4(void) {
                    4431   _UnhandledIRQ4:
                    4432   ; IRQMessage(4);
000028F6  4878 0004 4433          pea       4
000028FA  4EB8 28A6 4434          jsr       _IRQMessage
000028FE  584F      4435          addq.w    #4,A7
00002900  4E75      4436          rts
                    4437   ; }
                    4438   ; void UnhandledIRQ5(void) {
                    4439   _UnhandledIRQ5:
                    4440   ; IRQMessage(5);
00002902  4878 0005 4441          pea       5
00002906  4EB8 28A6 4442          jsr       _IRQMessage
0000290A  584F      4443          addq.w    #4,A7
0000290C  4E75      4444          rts
                    4445   ; }
                    4446   ; void UnhandledIRQ6(void) {
                    4447   _UnhandledIRQ6:
                    4448   ; PrintErrorMessageandAbort("ADDRESS ERROR: 16 or 32 Bit Transfer to/from an ODD Address....") ;
0000290E  4879 0084 4449          pea       @m68kde~1_159.L
00002912  1778      
00002914  4EB8 287A 4450          jsr       _PrintErrorMessageandAbort
00002918  584F      4451          addq.w    #4,A7
                    4452   ; menu() ;
0000291A  4EB8 2606 4453          jsr       _menu
0000291E  4E75      4454          rts
                    4455   ; }
                    4456   ; void UnhandledIRQ7(void) {
                    4457   _UnhandledIRQ7:
                    4458   ; IRQMessage(7);
00002920  4878 0007 4459          pea       7
00002924  4EB8 28A6 4460          jsr       _IRQMessage
00002928  584F      4461          addq.w    #4,A7
0000292A  4E75      4462          rts
                    4463   ; }
                    4464   ; void UnhandledTrap(void) {
                    4465   _UnhandledTrap:
                    4466   ; PrintErrorMessageandAbort("Unhandled Trap !!!!!") ;
0000292C  4879 0084 4467          pea       @m68kde~1_160.L
00002930  17B8      
00002932  4EB8 287A 4468          jsr       _PrintErrorMessageandAbort
00002936  584F      4469          addq.w    #4,A7
00002938  4E75      4470          rts
                    4471   ; }
                    4472   ; void BusError() {
                    4473   _BusError:
                    4474   ; PrintErrorMessageandAbort("BUS Error!") ;
0000293A  4879 0084 4475          pea       @m68kde~1_161.L
0000293E  17CE      
00002940  4EB8 287A 4476          jsr       _PrintErrorMessageandAbort
00002944  584F      4477          addq.w    #4,A7
00002946  4E75      4478          rts
                    4479   ; }
                    4480   ; void AddressError() {
                    4481   _AddressError:
                    4482   ; PrintErrorMessageandAbort("ADDRESS Error!") ;
00002948  4879 0084 4483          pea       @m68kde~1_162.L
0000294C  17DA      
0000294E  4EB8 287A 4484          jsr       _PrintErrorMessageandAbort
00002952  584F      4485          addq.w    #4,A7
00002954  4E75      4486          rts
                    4487   ; }
                    4488   ; void IllegalInstruction() {
                    4489   _IllegalInstruction:
                    4490   ; PrintErrorMessageandAbort("ILLEGAL INSTRUCTION") ;
00002956  4879 0084 4491          pea       @m68kde~1_163.L
0000295A  17EA      
0000295C  4EB8 287A 4492          jsr       _PrintErrorMessageandAbort
00002960  584F      4493          addq.w    #4,A7
00002962  4E75      4494          rts
                    4495   ; }
                    4496   ; void Dividebyzero() {
                    4497   _Dividebyzero:
                    4498   ; PrintErrorMessageandAbort("DIVIDE BY ZERO") ;
00002964  4879 0084 4499          pea       @m68kde~1_164.L
00002968  17FE      
0000296A  4EB8 287A 4500          jsr       _PrintErrorMessageandAbort
0000296E  584F      4501          addq.w    #4,A7
00002970  4E75      4502          rts
                    4503   ; }
                    4504   ; void Check() {
                    4505   _Check:
                    4506   ; PrintErrorMessageandAbort("'CHK' INSTRUCTION") ;
00002972  4879 0084 4507          pea       @m68kde~1_165.L
00002976  180E      
00002978  4EB8 287A 4508          jsr       _PrintErrorMessageandAbort
0000297C  584F      4509          addq.w    #4,A7
0000297E  4E75      4510          rts
                    4511   ; }
                    4512   ; void Trapv() {
                    4513   _Trapv:
                    4514   ; PrintErrorMessageandAbort("TRAPV INSTRUCTION") ;
00002980  4879 0084 4515          pea       @m68kde~1_166.L
00002984  1820      
00002986  4EB8 287A 4516          jsr       _PrintErrorMessageandAbort
0000298A  584F      4517          addq.w    #4,A7
0000298C  4E75      4518          rts
                    4519   ; }
                    4520   ; void PrivError() {
                    4521   _PrivError:
                    4522   ; PrintErrorMessageandAbort("PRIVILEGE VIOLATION") ;
0000298E  4879 0084 4523          pea       @m68kde~1_167.L
00002992  1832      
00002994  4EB8 287A 4524          jsr       _PrintErrorMessageandAbort
00002998  584F      4525          addq.w    #4,A7
0000299A  4E75      4526          rts
                    4527   ; }
                    4528   ; void UnitIRQ() {
                    4529   _UnitIRQ:
                    4530   ; PrintErrorMessageandAbort("UNINITIALISED IRQ") ;
0000299C  4879 0084 4531          pea       @m68kde~1_168.L
000029A0  1846      
000029A2  4EB8 287A 4532          jsr       _PrintErrorMessageandAbort
000029A6  584F      4533          addq.w    #4,A7
000029A8  4E75      4534          rts
                    4535   ; }
                    4536   ; void Spurious() {
                    4537   _Spurious:
                    4538   ; PrintErrorMessageandAbort("SPURIOUS IRQ") ;
000029AA  4879 0084 4539          pea       @m68kde~1_169.L
000029AE  1858      
000029B0  4EB8 287A 4540          jsr       _PrintErrorMessageandAbort
000029B4  584F      4541          addq.w    #4,A7
000029B6  4E75      4542          rts
                    4543   ; }
                    4544   ; void EnterString(void)
                    4545   ; {
                    4546   _EnterString:
000029B8  4E56 FFFC 4547          link      A6,#-4
000029BC  2F02      4548          move.l    D2,-(A7)
                    4549   ; unsigned char *Start;
                    4550   ; unsigned char c;
                    4551   ; printf("\r\nStart Address in Memory: ") ;
000029BE  4879 0084 4552          pea       @m68kde~1_170.L
000029C2  1866      
000029C4  4EB9 0000 4553          jsr       _printf
000029C8  5644      
000029CA  584F      4554          addq.w    #4,A7
                    4555   ; Start = Get8HexDigits(0) ;
000029CC  42A7      4556          clr.l     -(A7)
000029CE  4EB8 0CAC 4557          jsr       _Get8HexDigits
000029D2  584F      4558          addq.w    #4,A7
000029D4  2400      4559          move.l    D0,D2
                    4560   ; printf("\r\nEnter String (ESC to end) :") ;
000029D6  4879 0084 4561          pea       @m68kde~1_171.L
000029DA  1882      
000029DC  4EB9 0000 4562          jsr       _printf
000029E0  5644      
000029E2  584F      4563          addq.w    #4,A7
                    4564   ; while((c = getchar()) != 0x1b)
                    4565   EnterString_1:
000029E4  4EB9 0000 4566          jsr       _getch
000029E8  5566      
000029EA  1D40 FFFF 4567          move.b    D0,-1(A6)
000029EE  0C00 001B 4568          cmp.b     #27,D0
000029F2  670A      4569          beq.s     EnterString_3
                    4570   ; *Start++ = c ;
000029F4  2042      4571          move.l    D2,A0
000029F6  5282      4572          addq.l    #1,D2
000029F8  10AE FFFF 4573          move.b    -1(A6),(A0)
000029FC  60E6      4574          bra       EnterString_1
                    4575   EnterString_3:
                    4576   ; *Start = 0x00;  // terminate with a null
000029FE  2042      4577          move.l    D2,A0
00002A00  4210      4578          clr.b     (A0)
00002A02  241F      4579          move.l    (A7)+,D2
00002A04  4E5E      4580          unlk      A6
00002A06  4E75      4581          rts
                    4582   ; }
                    4583   ; void MemoryTest(void)
                    4584   ; {
                    4585   _MemoryTest:
00002A08  4E56 FFE8 4586          link      A6,#-24
                    4587   ; unsigned int *RamPtr, counter1=1 ;
00002A0C  2D7C 0000 4588          move.l    #1,-18(A6)
00002A10  0001 FFEE 
                    4589   ; register unsigned int i ;
                    4590   ; unsigned int Start, End ;
                    4591   ; char c ;
                    4592   ; printf("\r\nStart Address: ") ;
00002A14  4879 0084 4593          pea       @m68kde~1_172.L
00002A18  18A0      
00002A1A  4EB9 0000 4594          jsr       _printf
00002A1E  5644      
00002A20  584F      4595          addq.w    #4,A7
                    4596   ; Start = Get8HexDigits(0) ;
00002A22  42A7      4597          clr.l     -(A7)
00002A24  4EB8 0CAC 4598          jsr       _Get8HexDigits
00002A28  584F      4599          addq.w    #4,A7
00002A2A  2D40 FFF6 4600          move.l    D0,-10(A6)
                    4601   ; printf("\r\nEnd Address: ") ;
00002A2E  4879 0084 4602          pea       @m68kde~1_173.L
00002A32  18B2      
00002A34  4EB9 0000 4603          jsr       _printf
00002A38  5644      
00002A3A  584F      4604          addq.w    #4,A7
                    4605   ; End = Get8HexDigits(0) ;
00002A3C  42A7      4606          clr.l     -(A7)
00002A3E  4EB8 0CAC 4607          jsr       _Get8HexDigits
00002A42  584F      4608          addq.w    #4,A7
00002A44  2D40 FFFA 4609          move.l    D0,-6(A6)
00002A48  4E5E      4610          unlk      A6
00002A4A  4E75      4611          rts
                    4612   ; // TODO
                    4613   ; // add your code to test memory here using 32 bit reads and writes of data between the start and end of memory
                    4614   ; }
                    4615   ; void main(void)
                    4616   ; {
                    4617   _main:
00002A4C  4E56 FFF4 4618          link      A6,#-12
00002A50  48E7 3030 4619          movem.l   D2/D3/A2/A3,-(A7)
00002A54  45F8 0A4C 4620          lea       _InstallExceptionHandler.L,A2
00002A58  47F9 0000 4621          lea       _printf.L,A3
00002A5C  5644      
                    4622   ; char c ;
                    4623   ; unsigned char *SramPtr = (unsigned char *)(0x00010000) ;
00002A5E  2D7C 0001 4624          move.l    #65536,-8(A6)
00002A62  0000 FFF8 
                    4625   ; int i ;
                    4626   ; char *BugMessage = "68k Bug V1.74";
00002A66  41F9 0084 4627          lea       @m68kde~1_174.L,A0
00002A6A  18C2      
00002A6C  2608      4628          move.l    A0,D3
                    4629   ; char *CopyrightMessage = "Copyright (C) PJ Davies 2012";
00002A6E  41F9 0084 4630          lea       @m68kde~1_175.L,A0
00002A72  18D0      
00002A74  2D48 FFFC 4631          move.l    A0,-4(A6)
                    4632   ; KillAllBreakPoints() ;
00002A78  4EB8 2054 4633          jsr       _KillAllBreakPoints
                    4634   ; i = x = y = z = PortA_Count = 0;
00002A7C  42B9 0084 4635          clr.l     _PortA_Count.L
00002A80  00D2      
00002A82  42B9 0084 4636          clr.l     _z.L
00002A86  00CE      
00002A88  42B9 0084 4637          clr.l     _y.L
00002A8C  00CA      
00002A8E  42B9 0084 4638          clr.l     _x.L
00002A92  00C6      
00002A94  4282      4639          clr.l     D2
                    4640   ; Trace = GoFlag = 0;                       // used in tracing/single stepping
00002A96  42B9 0084 4641          clr.l     _GoFlag.L
00002A9A  00DA      
00002A9C  42B9 0084 4642          clr.l     _Trace.L
00002AA0  00D6      
                    4643   ; d0=d1=d2=d3=d4=d5=d6=d7=0 ;
00002AA2  42B9 0084 4644          clr.l     _d7.L
00002AA6  00FA      
00002AA8  42B9 0084 4645          clr.l     _d6.L
00002AAC  00F6      
00002AAE  42B9 0084 4646          clr.l     _d5.L
00002AB2  00F2      
00002AB4  42B9 0084 4647          clr.l     _d4.L
00002AB8  00EE      
00002ABA  42B9 0084 4648          clr.l     _d3.L
00002ABE  00EA      
00002AC0  42B9 0084 4649          clr.l     _d2.L
00002AC4  00E6      
00002AC6  42B9 0084 4650          clr.l     _d1.L
00002ACA  00E2      
00002ACC  42B9 0084 4651          clr.l     _d0.L
00002AD0  00DE      
                    4652   ; a0=a1=a2=a3=a4=a5=a6=0 ;
00002AD2  42B9 0084 4653          clr.l     _a6.L
00002AD6  0116      
00002AD8  42B9 0084 4654          clr.l     _a5.L
00002ADC  0112      
00002ADE  42B9 0084 4655          clr.l     _a4.L
00002AE2  010E      
00002AE4  42B9 0084 4656          clr.l     _a3.L
00002AE8  010A      
00002AEA  42B9 0084 4657          clr.l     _a2.L
00002AEE  0106      
00002AF0  42B9 0084 4658          clr.l     _a1.L
00002AF4  0102      
00002AF6  42B9 0084 4659          clr.l     _a0.L
00002AFA  00FE      
                    4660   ; PC = ProgramStart, SSP=0x00880000, USP = 0x00870000;
00002AFC  23FC 0080 4661          move.l    #8388608,_PC.L
00002B00  0000 0084 
00002B04  011A      
00002B06  23FC 0088 4662          move.l    #8912896,_SSP.L
00002B0A  0000 0084 
00002B0E  011E      
00002B10  23FC 0087 4663          move.l    #8847360,_USP.L
00002B14  0000 0084 
00002B18  0122      
                    4664   ; SR = 0x2000;                            // clear interrupts enable tracing  uses IRQ6
00002B1A  33FC 2000 4665          move.w    #8192,_SR.L
00002B1E  0084 0126 
                    4666   ; // Initialise Breakpoint variables
                    4667   ; for(i = 0; i < 8; i++)  {
00002B22  4282      4668          clr.l     D2
                    4669   main_1:
00002B24  0C82 0000 4670          cmp.l     #8,D2
00002B28  0008      
00002B2A  6C00 004C 4671          bge       main_3
                    4672   ; BreakPointAddress[i] = 0;               //array of 8 breakpoint addresses
00002B2E  2002      4673          move.l    D2,D0
00002B30  E588      4674          lsl.l     #2,D0
00002B32  41F9 0084 4675          lea       _BreakPointAddress.L,A0
00002B36  0128      
00002B38  42B0 0800 4676          clr.l     0(A0,D0.L)
                    4677   ; WatchPointAddress[i] = 0 ;
00002B3C  2002      4678          move.l    D2,D0
00002B3E  E588      4679          lsl.l     #2,D0
00002B40  41F9 0084 4680          lea       _WatchPointAddress.L,A0
00002B44  017C      
00002B46  42B0 0800 4681          clr.l     0(A0,D0.L)
                    4682   ; BreakPointInstruction[i] = 0;           // to hold the instruction at the break point
00002B4A  2002      4683          move.l    D2,D0
00002B4C  E388      4684          lsl.l     #1,D0
00002B4E  41F9 0084 4685          lea       _BreakPointInstruction.L,A0
00002B52  0148      
00002B54  4270 0800 4686          clr.w     0(A0,D0.L)
                    4687   ; BreakPointSetOrCleared[i] = 0;          // indicates if break point set
00002B58  2002      4688          move.l    D2,D0
00002B5A  E588      4689          lsl.l     #2,D0
00002B5C  41F9 0084 4690          lea       _BreakPointSetOrCleared.L,A0
00002B60  0158      
00002B62  42B0 0800 4691          clr.l     0(A0,D0.L)
                    4692   ; WatchPointSetOrCleared[i] = 0;
00002B66  2002      4693          move.l    D2,D0
00002B68  E588      4694          lsl.l     #2,D0
00002B6A  41F9 0084 4695          lea       _WatchPointSetOrCleared.L,A0
00002B6E  019C      
00002B70  42B0 0800 4696          clr.l     0(A0,D0.L)
00002B74  5282      4697          addq.l    #1,D2
00002B76  60AC      4698          bra       main_1
                    4699   main_3:
                    4700   ; }
                    4701   ; // clear memory in static ram at address 00010000 for 16k
                    4702   ; for(i = 0; i < 16384; i++)
00002B78  4282      4703          clr.l     D2
                    4704   main_4:
00002B7A  0C82 0000 4705          cmp.l     #16384,D2
00002B7E  4000      
00002B80  6C0E      4706          bge.s     main_6
                    4707   ; *SramPtr++ = (unsigned char)(0) ;
00002B82  206E FFF8 4708          move.l    -8(A6),A0
00002B86  52AE FFF8 4709          addq.l    #1,-8(A6)
00002B8A  4210      4710          clr.b     (A0)
00002B8C  5282      4711          addq.l    #1,D2
00002B8E  60EA      4712          bra       main_4
                    4713   main_6:
                    4714   ; Init_RS232() ;     // initialise the RS232 port
00002B90  4EB8 0B22 4715          jsr       _Init_RS232
                    4716   ; Init_LCD() ;
00002B94  4EB8 097A 4717          jsr       _Init_LCD
                    4718   ; for( i = 32; i < 48; i++)
00002B98  7420      4719          moveq     #32,D2
                    4720   main_7:
00002B9A  0C82 0000 4721          cmp.l     #48,D2
00002B9E  0030      
00002BA0  6C0E      4722          bge.s     main_9
                    4723   ; InstallExceptionHandler(UnhandledTrap, i) ;		        // install Trap exception handler on vector 32-47
00002BA2  2F02      4724          move.l    D2,-(A7)
00002BA4  4878 292C 4725          pea       _UnhandledTrap.L
00002BA8  4E92      4726          jsr       (A2)
00002BAA  504F      4727          addq.w    #8,A7
00002BAC  5282      4728          addq.l    #1,D2
00002BAE  60EA      4729          bra       main_7
                    4730   main_9:
                    4731   ; InstallExceptionHandler(menu, 47) ;		                   // TRAP #15 call debug and end program
00002BB0  4878 002F 4732          pea       47
00002BB4  4878 2606 4733          pea       _menu.L
00002BB8  4E92      4734          jsr       (A2)
00002BBA  504F      4735          addq.w    #8,A7
                    4736   ; InstallExceptionHandler(UnhandledIRQ1, 25) ;		      // install handler for interrupts
00002BBC  4878 0019 4737          pea       25
00002BC0  4878 28D2 4738          pea       _UnhandledIRQ1.L
00002BC4  4E92      4739          jsr       (A2)
00002BC6  504F      4740          addq.w    #8,A7
                    4741   ; InstallExceptionHandler(UnhandledIRQ2, 26) ;		      // install handler for interrupts
00002BC8  4878 001A 4742          pea       26
00002BCC  4878 28DE 4743          pea       _UnhandledIRQ2.L
00002BD0  4E92      4744          jsr       (A2)
00002BD2  504F      4745          addq.w    #8,A7
                    4746   ; InstallExceptionHandler(UnhandledIRQ3, 27) ;		      // install handler for interrupts
00002BD4  4878 001B 4747          pea       27
00002BD8  4878 28EA 4748          pea       _UnhandledIRQ3.L
00002BDC  4E92      4749          jsr       (A2)
00002BDE  504F      4750          addq.w    #8,A7
                    4751   ; InstallExceptionHandler(UnhandledIRQ4, 28) ;		      // install handler for interrupts
00002BE0  4878 001C 4752          pea       28
00002BE4  4878 28F6 4753          pea       _UnhandledIRQ4.L
00002BE8  4E92      4754          jsr       (A2)
00002BEA  504F      4755          addq.w    #8,A7
                    4756   ; InstallExceptionHandler(UnhandledIRQ5, 29) ;		      // install handler for interrupts
00002BEC  4878 001D 4757          pea       29
00002BF0  4878 2902 4758          pea       _UnhandledIRQ5.L
00002BF4  4E92      4759          jsr       (A2)
00002BF6  504F      4760          addq.w    #8,A7
                    4761   ; InstallExceptionHandler(UnhandledIRQ6, 30) ;		      // install handler for interrupts
00002BF8  4878 001E 4762          pea       30
00002BFC  4878 290E 4763          pea       _UnhandledIRQ6.L
00002C00  4E92      4764          jsr       (A2)
00002C02  504F      4765          addq.w    #8,A7
                    4766   ; InstallExceptionHandler(UnhandledIRQ7, 31) ;		      // install handler for interrupts
00002C04  4878 001F 4767          pea       31
00002C08  4878 2920 4768          pea       _UnhandledIRQ7.L
00002C0C  4E92      4769          jsr       (A2)
00002C0E  504F      4770          addq.w    #8,A7
                    4771   ; InstallExceptionHandler(HandleBreakPoint, 46) ;		           // install Trap 14 Break Point exception handler on vector 46
00002C10  4878 002E 4772          pea       46
00002C14  4878 22F8 4773          pea       _HandleBreakPoint.L
00002C18  4E92      4774          jsr       (A2)
00002C1A  504F      4775          addq.w    #8,A7
                    4776   ; InstallExceptionHandler(DumpRegistersandPause, 29) ;		   // install TRACE handler for IRQ5 on vector 29
00002C1C  4878 001D 4777          pea       29
00002C20  4878 199C 4778          pea       _DumpRegistersandPause.L
00002C24  4E92      4779          jsr       (A2)
00002C26  504F      4780          addq.w    #8,A7
                    4781   ; InstallExceptionHandler(BusError,2) ;                          // install Bus error handler
00002C28  4878 0002 4782          pea       2
00002C2C  4878 293A 4783          pea       _BusError.L
00002C30  4E92      4784          jsr       (A2)
00002C32  504F      4785          addq.w    #8,A7
                    4786   ; InstallExceptionHandler(AddressError,3) ;                      // install address error handler (doesn't work on soft core 68k implementation)
00002C34  4878 0003 4787          pea       3
00002C38  4878 2948 4788          pea       _AddressError.L
00002C3C  4E92      4789          jsr       (A2)
00002C3E  504F      4790          addq.w    #8,A7
                    4791   ; InstallExceptionHandler(IllegalInstruction,4) ;                // install illegal instruction exception handler
00002C40  4878 0004 4792          pea       4
00002C44  4878 2956 4793          pea       _IllegalInstruction.L
00002C48  4E92      4794          jsr       (A2)
00002C4A  504F      4795          addq.w    #8,A7
                    4796   ; InstallExceptionHandler(Dividebyzero,5) ;                      // install /0 exception handler
00002C4C  4878 0005 4797          pea       5
00002C50  4878 2964 4798          pea       _Dividebyzero.L
00002C54  4E92      4799          jsr       (A2)
00002C56  504F      4800          addq.w    #8,A7
                    4801   ; InstallExceptionHandler(Check,6) ;                             // install check instruction exception handler
00002C58  4878 0006 4802          pea       6
00002C5C  4878 2972 4803          pea       _Check.L
00002C60  4E92      4804          jsr       (A2)
00002C62  504F      4805          addq.w    #8,A7
                    4806   ; InstallExceptionHandler(Trapv,7) ;                             // install trapv instruction exception handler
00002C64  4878 0007 4807          pea       7
00002C68  4878 2980 4808          pea       _Trapv.L
00002C6C  4E92      4809          jsr       (A2)
00002C6E  504F      4810          addq.w    #8,A7
                    4811   ; InstallExceptionHandler(PrivError,8) ;                         // install Priv Violation exception handler
00002C70  4878 0008 4812          pea       8
00002C74  4878 298E 4813          pea       _PrivError.L
00002C78  4E92      4814          jsr       (A2)
00002C7A  504F      4815          addq.w    #8,A7
                    4816   ; InstallExceptionHandler(UnitIRQ,15) ;                          // install uninitialised IRQ exception handler
00002C7C  4878 000F 4817          pea       15
00002C80  4878 299C 4818          pea       _UnitIRQ.L
00002C84  4E92      4819          jsr       (A2)
00002C86  504F      4820          addq.w    #8,A7
                    4821   ; InstallExceptionHandler(Check,24) ;                            // install spurious IRQ exception handler
00002C88  4878 0018 4822          pea       24
00002C8C  4878 2972 4823          pea       _Check.L
00002C90  4E92      4824          jsr       (A2)
00002C92  504F      4825          addq.w    #8,A7
                    4826   ; FlushKeyboard() ;                        // dump unread characters from keyboard
00002C94  4EB8 0BAE 4827          jsr       _FlushKeyboard
                    4828   ; TraceException = 0 ;                     // clear trace exception port to remove any software generated single step/trace
00002C98  4239 0040 4829          clr.b     4194314
00002C9C  000A      
                    4830   ; // test for auto flash boot and run from Flash by reading switch 17 on DE1 board. If set, copy program from flash into Dram and run
                    4831   ; while(((char)(PortC & 0x02)) == (char)(0x02))    {
                    4832   main_10:
00002C9E  1039 0040 4833          move.b    4194308,D0
00002CA2  0004      
00002CA4  C03C 0002 4834          and.b     #2,D0
00002CA8  0C00 0002 4835          cmp.b     #2,D0
00002CAC  662A      4836          bne.s     main_12
                    4837   ; LoadFromFlashChip();
00002CAE  4EB8 13CA 4838          jsr       _LoadFromFlashChip
                    4839   ; printf("\r\nRunning.....") ;
00002CB2  4879 0084 4840          pea       @m68kde~1_176.L
00002CB6  18EE      
00002CB8  4E93      4841          jsr       (A3)
00002CBA  584F      4842          addq.w    #4,A7
                    4843   ; Oline1("Running.....") ;
00002CBC  4879 0084 4844          pea       @m68kde~1_177.L
00002CC0  18FE      
00002CC2  4EB8 0A1E 4845          jsr       _Oline1
00002CC6  584F      4846          addq.w    #4,A7
                    4847   ; GoFlag = 1;
00002CC8  23FC 0000 4848          move.l    #1,_GoFlag.L
00002CCC  0001 0084 
00002CD0  00DA      
                    4849   ; go() ;
00002CD2  4EB8 08D4 4850          jsr       _go
00002CD6  60C6      4851          bra       main_10
                    4852   main_12:
                    4853   ; }
                    4854   ; // otherwise start the debug monitor
                    4855   ; Oline0(BugMessage) ;
00002CD8  2F03      4856          move.l    D3,-(A7)
00002CDA  4EB8 09F0 4857          jsr       _Oline0
00002CDE  584F      4858          addq.w    #4,A7
                    4859   ; Oline1("By: PJ Davies") ;
00002CE0  4879 0084 4860          pea       @m68kde~1_178.L
00002CE4  190C      
00002CE6  4EB8 0A1E 4861          jsr       _Oline1
00002CEA  584F      4862          addq.w    #4,A7
                    4863   ; printf("\r\n%s", BugMessage) ;
00002CEC  2F03      4864          move.l    D3,-(A7)
00002CEE  4879 0084 4865          pea       @m68kde~1_179.L
00002CF2  191A      
00002CF4  4E93      4866          jsr       (A3)
00002CF6  504F      4867          addq.w    #8,A7
                    4868   ; printf("\r\n%s", CopyrightMessage) ;
00002CF8  2F2E FFFC 4869          move.l    -4(A6),-(A7)
00002CFC  4879 0084 4870          pea       @m68kde~1_180.L
00002D00  1920      
00002D02  4E93      4871          jsr       (A3)
00002D04  504F      4872          addq.w    #8,A7
                    4873   ; menu();
00002D06  4EB8 2606 4874          jsr       _menu
00002D0A  4CDF 0C0C 4875          movem.l   (A7)+,D2/D3/A2/A3
00002D0E  4E5E      4876          unlk      A6
00002D10  4E75      4877          rts
                    4878   ; }
                    4879   ; void FormatInstruction(void)    // for disassembly
                    4880   ; {
                    4881   _FormatInstruction:
00002D12  4E56 FEC0 4882          link      A6,#-320
00002D16  48E7 3C20 4883          movem.l   D2/D3/D4/D5/A2,-(A7)
00002D1A  45EE FEC0 4884          lea       -320(A6),A2
                    4885   ; short i, ilen = 0 ;
00002D1E  4245      4886          clr.w     D5
                    4887   ; char *iptr = Instruction ;
00002D20  41F9 0084 4888          lea       _Instruction.L,A0
00002D24  04DC      
00002D26  2608      4889          move.l    A0,D3
                    4890   ; char *Formatted[80], *fptr ;
                    4891   ; fptr = Formatted ;
00002D28  280A      4892          move.l    A2,D4
                    4893   ; for(i = 0; i < (short)(80); i ++)
00002D2A  4242      4894          clr.w     D2
                    4895   FormatInstruction_1:
00002D2C  0C42 0050 4896          cmp.w     #80,D2
00002D30  6C0E      4897          bge.s     FormatInstruction_3
                    4898   ; Formatted[i] = (char)(0);          // set formatted string to null
00002D32  48C2      4899          ext.l     D2
00002D34  2002      4900          move.l    D2,D0
00002D36  E588      4901          lsl.l     #2,D0
00002D38  42B2 0800 4902          clr.l     0(A2,D0.L)
00002D3C  5242      4903          addq.w    #1,D2
00002D3E  60EC      4904          bra       FormatInstruction_1
                    4905   FormatInstruction_3:
                    4906   ; while((*iptr != ' '))   {   // while ot a space char
                    4907   FormatInstruction_4:
00002D40  2043      4908          move.l    D3,A0
00002D42  1010      4909          move.b    (A0),D0
00002D44  0C00 0020 4910          cmp.b     #32,D0
00002D48  6718      4911          beq.s     FormatInstruction_6
                    4912   ; *fptr++ = *iptr++ ;     // copy string until space or end encountered
00002D4A  2043      4913          move.l    D3,A0
00002D4C  5283      4914          addq.l    #1,D3
00002D4E  2244      4915          move.l    D4,A1
00002D50  5284      4916          addq.l    #1,D4
00002D52  1290      4917          move.b    (A0),(A1)
                    4918   ; ilen ++ ;               // count length of string as we go
00002D54  5245      4919          addq.w    #1,D5
                    4920   ; if(*iptr == 0)          // if we got the end and copied the NUL then return
00002D56  2043      4921          move.l    D3,A0
00002D58  1010      4922          move.b    (A0),D0
00002D5A  6604      4923          bne.s     FormatInstruction_7
                    4924   ; return ;
00002D5C  6000 003E 4925          bra       FormatInstruction_9
                    4926   FormatInstruction_7:
00002D60  60DE      4927          bra       FormatInstruction_4
                    4928   FormatInstruction_6:
                    4929   ; }
                    4930   ; // must still be more text to process otherwise we would have returned above if got to the end
                    4931   ; for(i = 0; i < ((short)(8) - ilen); i++)
00002D62  4242      4932          clr.w     D2
                    4933   FormatInstruction_10:
00002D64  7008      4934          moveq     #8,D0
00002D66  4880      4935          ext.w     D0
00002D68  9045      4936          sub.w     D5,D0
00002D6A  B440      4937          cmp.w     D0,D2
00002D6C  6C0C      4938          bge.s     FormatInstruction_12
                    4939   ; *fptr++ = ' ' ;        // make sure first operand appears in field 8 of formatted string
00002D6E  2044      4940          move.l    D4,A0
00002D70  5284      4941          addq.l    #1,D4
00002D72  10BC 0020 4942          move.b    #32,(A0)
00002D76  5242      4943          addq.w    #1,D2
00002D78  60EA      4944          bra       FormatInstruction_10
                    4945   FormatInstruction_12:
                    4946   ; // now skip over any spaces in original unformatted string before copying the rest
                    4947   ; while((*iptr == ' '))
                    4948   FormatInstruction_13:
00002D7A  2043      4949          move.l    D3,A0
00002D7C  1010      4950          move.b    (A0),D0
00002D7E  0C00 0020 4951          cmp.b     #32,D0
00002D82  6604      4952          bne.s     FormatInstruction_15
                    4953   ; iptr++ ;
00002D84  5283      4954          addq.l    #1,D3
00002D86  60F2      4955          bra       FormatInstruction_13
                    4956   FormatInstruction_15:
                    4957   ; strcat(fptr,iptr) ;
00002D88  2F03      4958          move.l    D3,-(A7)
00002D8A  2F04      4959          move.l    D4,-(A7)
00002D8C  4EB9 0000 4960          jsr       _strcat
00002D90  5602      
00002D92  504F      4961          addq.w    #8,A7
                    4962   ; strcpyInstruction(Formatted) ;
00002D94  2F0A      4963          move.l    A2,-(A7)
00002D96  4EB8 0CEE 4964          jsr       _strcpyInstruction
00002D9A  584F      4965          addq.w    #4,A7
                    4966   FormatInstruction_9:
00002D9C  4CDF 043C 4967          movem.l   (A7)+,D2/D3/D4/D5/A2
00002DA0  4E5E      4968          unlk      A6
00002DA2  4E75      4969          rts
                    4970   ; }
                    4971   ; unsigned short int Decode2BitOperandSize(unsigned short int OpCode)
                    4972   ; {
                    4973   _Decode2BitOperandSize:
00002DA4  4E56 0000 4974          link      A6,#0
00002DA8  48E7 3020 4975          movem.l   D2/D3/A2,-(A7)
00002DAC  362E 000A 4976          move.w    10(A6),D3
00002DB0  C6BC 0000 4977          and.l     #65535,D3
00002DB4  FFFF      
00002DB6  45F8 0CD4 4978          lea       _strcatInstruction.L,A2
                    4979   ; unsigned short int DataSize ;       // used to determine the size of data following say an immediate instruction such as addi etc
                    4980   ; OpCode = (OpCode & (unsigned short int)(0x00C0)) >> 6 ;             // get bits 7 and 6 into positions 1,0
00002DBA  3003      4981          move.w    D3,D0
00002DBC  C07C 00C0 4982          and.w     #192,D0
00002DC0  EC48      4983          lsr.w     #6,D0
00002DC2  3600      4984          move.w    D0,D3
                    4985   ; if(OpCode == (unsigned short int)(0))   {
00002DC4  4A43      4986          tst.w     D3
00002DC6  660E      4987          bne.s     Decode2BitOperandSize_1
                    4988   ; strcatInstruction(".B ") ;
00002DC8  4879 0084 4989          pea       @m68kde~1_181.L
00002DCC  1926      
00002DCE  4E92      4990          jsr       (A2)
00002DD0  584F      4991          addq.w    #4,A7
                    4992   ; DataSize = 1 ;
00002DD2  7401      4993          moveq     #1,D2
00002DD4  6020      4994          bra.s     Decode2BitOperandSize_4
                    4995   Decode2BitOperandSize_1:
                    4996   ; }
                    4997   ; else if(OpCode == (unsigned short int)(1)) {
00002DD6  0C43 0001 4998          cmp.w     #1,D3
00002DDA  660E      4999          bne.s     Decode2BitOperandSize_3
                    5000   ; strcatInstruction(".W ") ;
00002DDC  4879 0084 5001          pea       @m68kde~1_182.L
00002DE0  192A      
00002DE2  4E92      5002          jsr       (A2)
00002DE4  584F      5003          addq.w    #4,A7
                    5004   ; DataSize = 1 ;
00002DE6  7401      5005          moveq     #1,D2
00002DE8  600C      5006          bra.s     Decode2BitOperandSize_4
                    5007   Decode2BitOperandSize_3:
                    5008   ; }
                    5009   ; else {
                    5010   ; strcatInstruction(".L ") ;
00002DEA  4879 0084 5011          pea       @m68kde~1_183.L
00002DEE  192E      
00002DF0  4E92      5012          jsr       (A2)
00002DF2  584F      5013          addq.w    #4,A7
                    5014   ; DataSize = 2 ;
00002DF4  7402      5015          moveq     #2,D2
                    5016   Decode2BitOperandSize_4:
                    5017   ; }
                    5018   ; return DataSize;
00002DF6  3002      5019          move.w    D2,D0
00002DF8  4CDF 040C 5020          movem.l   (A7)+,D2/D3/A2
00002DFC  4E5E      5021          unlk      A6
00002DFE  4E75      5022          rts
                    5023   ; }
                    5024   ; void Decode3BitDataRegister(unsigned short int OpCode)                // Data Register in Bits 11, 10 and 9
                    5025   ; {
                    5026   _Decode3BitDataRegister:
00002E00  4E56 FFFC 5027          link      A6,#-4
00002E04  2F0A      5028          move.l    A2,-(A7)
00002E06  45EE FFFC 5029          lea       -4(A6),A2
                    5030   ; unsigned char RegNumber[3] ;
                    5031   ; RegNumber[0] = 'D' ;
00002E0A  14BC 0044 5032          move.b    #68,(A2)
                    5033   ; RegNumber[1] = (unsigned char)(0x30) + (unsigned char)((OpCode & 0x0E00) >> 9) ;   // get data register number in bits 2,1,0 and convert to ASCII equiv
00002E0E  7030      5034          moveq     #48,D0
00002E10  322E 000A 5035          move.w    10(A6),D1
00002E14  C27C 0E00 5036          and.w     #3584,D1
00002E18  E049      5037          lsr.w     #8,D1
00002E1A  E249      5038          lsr.w     #1,D1
00002E1C  D001      5039          add.b     D1,D0
00002E1E  1540 0001 5040          move.b    D0,1(A2)
                    5041   ; RegNumber[2] = 0 ;
00002E22  422A 0002 5042          clr.b     2(A2)
                    5043   ; strcatInstruction(RegNumber) ;        // write register number to the disassembled instruction
00002E26  2F0A      5044          move.l    A2,-(A7)
00002E28  4EB8 0CD4 5045          jsr       _strcatInstruction
00002E2C  584F      5046          addq.w    #4,A7
00002E2E  245F      5047          move.l    (A7)+,A2
00002E30  4E5E      5048          unlk      A6
00002E32  4E75      5049          rts
                    5050   ; }
                    5051   ; void Decode3BitAddressRegister(unsigned short int Reg)                // Address Register in Bits 2,1,0
                    5052   ; {
                    5053   _Decode3BitAddressRegister:
00002E34  4E56 FFFC 5054          link      A6,#-4
00002E38  2F0A      5055          move.l    A2,-(A7)
00002E3A  45EE FFFC 5056          lea       -4(A6),A2
                    5057   ; unsigned char RegNumber[3];
                    5058   ; RegNumber[0] = 'A' ;
00002E3E  14BC 0041 5059          move.b    #65,(A2)
                    5060   ; RegNumber[1] = (unsigned char)(0x30) + (unsigned char)(Reg) ;   // get data register number in bits 2,1,0 and convert to ASCII equiv
00002E42  7030      5061          moveq     #48,D0
00002E44  322E 000A 5062          move.w    10(A6),D1
00002E48  D001      5063          add.b     D1,D0
00002E4A  1540 0001 5064          move.b    D0,1(A2)
                    5065   ; RegNumber[2] = 0 ;
00002E4E  422A 0002 5066          clr.b     2(A2)
                    5067   ; strcatInstruction(RegNumber) ;        // write register number to the disassembled instruction
00002E52  2F0A      5068          move.l    A2,-(A7)
00002E54  4EB8 0CD4 5069          jsr       _strcatInstruction
00002E58  584F      5070          addq.w    #4,A7
00002E5A  245F      5071          move.l    (A7)+,A2
00002E5C  4E5E      5072          unlk      A6
00002E5E  4E75      5073          rts
                    5074   ; }
                    5075   ; //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5076   ; // Special function is used to print 8,16, 32 bit operands after move #
                    5077   ; //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5078   ; void DecodeBWLDataAfterOpCodeForMove(unsigned short int *OpCode )
                    5079   ; {
                    5080   _DecodeBWLDataAfterOpCodeForMove:
00002E60  4E56 0000 5081          link      A6,#0
00002E64  48E7 3030 5082          movem.l   D2/D3/A2/A3,-(A7)
00002E68  242E 0008 5083          move.l    8(A6),D2
00002E6C  45F9 0084 5084          lea       _TempString.L,A2
00002E70  0540      
00002E72  47F9 0000 5085          lea       _sprintf.L,A3
00002E76  55CE      
                    5086   ; unsigned char OperandSize ;
                    5087   ; OperandSize = (*OpCode >> 12) & (unsigned short int)(0x0003) ;               // get bits 13,12 into 1,0 as these define size of #operand
00002E78  2042      5088          move.l    D2,A0
00002E7A  3010      5089          move.w    (A0),D0
00002E7C  E048      5090          lsr.w     #8,D0
00002E7E  E848      5091          lsr.w     #4,D0
00002E80  C07C 0003 5092          and.w     #3,D0
00002E84  1600      5093          move.b    D0,D3
                    5094   ; InstructionSize += 1;
00002E86  52B9 0084 5095          addq.l    #1,_InstructionSize.L
00002E8A  0178      
                    5096   ; if(OperandSize == (char)(1))                // #byte value
00002E8C  0C03 0001 5097          cmp.b     #1,D3
00002E90  6620      5098          bne.s     DecodeBWLDataAfterOpCodeForMove_1
                    5099   ; sprintf(TempString, "#$%X", (unsigned int)(OpCode[1]));
00002E92  2042      5100          move.l    D2,A0
00002E94  3228 0002 5101          move.w    2(A0),D1
00002E98  C2BC 0000 5102          and.l     #65535,D1
00002E9C  FFFF      
00002E9E  2F01      5103          move.l    D1,-(A7)
00002EA0  4879 0084 5104          pea       @m68kde~1_184.L
00002EA4  1932      
00002EA6  2F0A      5105          move.l    A2,-(A7)
00002EA8  4E93      5106          jsr       (A3)
00002EAA  DEFC 000C 5107          add.w     #12,A7
00002EAE  6000 0068 5108          bra       DecodeBWLDataAfterOpCodeForMove_5
                    5109   DecodeBWLDataAfterOpCodeForMove_1:
                    5110   ; else if(OperandSize == (char)(3))          // #word value
00002EB2  0C03 0003 5111          cmp.b     #3,D3
00002EB6  6620      5112          bne.s     DecodeBWLDataAfterOpCodeForMove_3
                    5113   ; sprintf(TempString, "#$%X", (unsigned int)(OpCode[1]));
00002EB8  2042      5114          move.l    D2,A0
00002EBA  3228 0002 5115          move.w    2(A0),D1
00002EBE  C2BC 0000 5116          and.l     #65535,D1
00002EC2  FFFF      
00002EC4  2F01      5117          move.l    D1,-(A7)
00002EC6  4879 0084 5118          pea       @m68kde~1_185.L
00002ECA  1938      
00002ECC  2F0A      5119          move.l    A2,-(A7)
00002ECE  4E93      5120          jsr       (A3)
00002ED0  DEFC 000C 5121          add.w     #12,A7
00002ED4  6000 0042 5122          bra       DecodeBWLDataAfterOpCodeForMove_5
                    5123   DecodeBWLDataAfterOpCodeForMove_3:
                    5124   ; else if(OperandSize == (char)(2)) {                                       // long value
00002ED8  0C03 0002 5125          cmp.b     #2,D3
00002EDC  6600 003A 5126          bne       DecodeBWLDataAfterOpCodeForMove_5
                    5127   ; sprintf(TempString, "#$%X", ((unsigned int)(OpCode[1]) << 16) | (unsigned int)(OpCode[2])); // create 3
00002EE0  2042      5128          move.l    D2,A0
00002EE2  3228 0002 5129          move.w    2(A0),D1
00002EE6  C2BC 0000 5130          and.l     #65535,D1
00002EEA  FFFF      
00002EEC  E189      5131          lsl.l     #8,D1
00002EEE  E189      5132          lsl.l     #8,D1
00002EF0  2042      5133          move.l    D2,A0
00002EF2  2F00      5134          move.l    D0,-(A7)
00002EF4  3028 0004 5135          move.w    4(A0),D0
00002EF8  C0BC 0000 5136          and.l     #65535,D0
00002EFC  FFFF      
00002EFE  8280      5137          or.l      D0,D1
00002F00  201F      5138          move.l    (A7)+,D0
00002F02  2F01      5139          move.l    D1,-(A7)
00002F04  4879 0084 5140          pea       @m68kde~1_186.L
00002F08  193E      
00002F0A  2F0A      5141          move.l    A2,-(A7)
00002F0C  4E93      5142          jsr       (A3)
00002F0E  DEFC 000C 5143          add.w     #12,A7
                    5144   ; InstructionSize += 1;
00002F12  52B9 0084 5145          addq.l    #1,_InstructionSize.L
00002F16  0178      
                    5146   DecodeBWLDataAfterOpCodeForMove_5:
                    5147   ; }
                    5148   ; strcatInstruction(TempString) ;
00002F18  2F0A      5149          move.l    A2,-(A7)
00002F1A  4EB8 0CD4 5150          jsr       _strcatInstruction
00002F1E  584F      5151          addq.w    #4,A7
00002F20  4CDF 0C0C 5152          movem.l   (A7)+,D2/D3/A2/A3
00002F24  4E5E      5153          unlk      A6
00002F26  4E75      5154          rts
                    5155   ; }
                    5156   ; /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5157   ; // This function is used to print 8,16, 32 bit operands after the opcode, this is in instruction like ADD # where immediate addressing is used as source
                    5158   ; /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5159   ; void DecodeBWLDataAfterOpCode(unsigned short int *OpCode )
                    5160   ; {
                    5161   _DecodeBWLDataAfterOpCode:
00002F28  4E56 0000 5162          link      A6,#0
00002F2C  48E7 3038 5163          movem.l   D2/D3/A2/A3/A4,-(A7)
00002F30  262E 0008 5164          move.l    8(A6),D3
00002F34  45F9 0084 5165          lea       _TempString.L,A2
00002F38  0540      
00002F3A  47F9 0000 5166          lea       _sprintf.L,A3
00002F3E  55CE      
00002F40  49F9 0084 5167          lea       _InstructionSize.L,A4
00002F44  0178      
                    5168   ; unsigned char OperandSize ;
                    5169   ; OperandSize = (*OpCode & (unsigned short int)(0x01C0)) >> 6 ;               // get bits 8,7 and 6 into positions 1,0, these define size of operand
00002F46  2043      5170          move.l    D3,A0
00002F48  3010      5171          move.w    (A0),D0
00002F4A  C07C 01C0 5172          and.w     #448,D0
00002F4E  EC48      5173          lsr.w     #6,D0
00002F50  1400      5174          move.b    D0,D2
                    5175   ; InstructionSize += 1;
00002F52  5294      5176          addq.l    #1,(A4)
                    5177   ; if((OperandSize == (char)(0)) || (OperandSize == (char)(4)))                // #byte value
00002F54  4A02      5178          tst.b     D2
00002F56  6706      5179          beq.s     DecodeBWLDataAfterOpCode_3
00002F58  0C02 0004 5180          cmp.b     #4,D2
00002F5C  6620      5181          bne.s     DecodeBWLDataAfterOpCode_1
                    5182   DecodeBWLDataAfterOpCode_3:
                    5183   ; sprintf(TempString, "#$%X", (unsigned int)(OpCode[1]));
00002F5E  2043      5184          move.l    D3,A0
00002F60  3228 0002 5185          move.w    2(A0),D1
00002F64  C2BC 0000 5186          and.l     #65535,D1
00002F68  FFFF      
00002F6A  2F01      5187          move.l    D1,-(A7)
00002F6C  4879 0084 5188          pea       @m68kde~1_187.L
00002F70  1944      
00002F72  2F0A      5189          move.l    A2,-(A7)
00002F74  4E93      5190          jsr       (A3)
00002F76  DEFC 000C 5191          add.w     #12,A7
00002F7A  6000 007C 5192          bra       DecodeBWLDataAfterOpCode_7
                    5193   DecodeBWLDataAfterOpCode_1:
                    5194   ; // #word value 7 is used by divs.w instruction (not divu)
                    5195   ; // however used by instructions like adda, cmpa, suba # to mean long value -
                    5196   ; // bugger - have to build a special case and look at opcode to see what instruction is
                    5197   ; else if((OperandSize == (char)(1)) || (OperandSize == (char)(5)) || (OperandSize == (char)(3)))         //# byte or word value
00002F7E  0C02 0001 5198          cmp.b     #1,D2
00002F82  670C      5199          beq.s     DecodeBWLDataAfterOpCode_6
00002F84  0C02 0005 5200          cmp.b     #5,D2
00002F88  6706      5201          beq.s     DecodeBWLDataAfterOpCode_6
00002F8A  0C02 0003 5202          cmp.b     #3,D2
00002F8E  6620      5203          bne.s     DecodeBWLDataAfterOpCode_4
                    5204   DecodeBWLDataAfterOpCode_6:
                    5205   ; sprintf(TempString, "#$%X", (unsigned int)(OpCode[1]));
00002F90  2043      5206          move.l    D3,A0
00002F92  3228 0002 5207          move.w    2(A0),D1
00002F96  C2BC 0000 5208          and.l     #65535,D1
00002F9A  FFFF      
00002F9C  2F01      5209          move.l    D1,-(A7)
00002F9E  4879 0084 5210          pea       @m68kde~1_188.L
00002FA2  194A      
00002FA4  2F0A      5211          move.l    A2,-(A7)
00002FA6  4E93      5212          jsr       (A3)
00002FA8  DEFC 000C 5213          add.w     #12,A7
00002FAC  6000 004A 5214          bra       DecodeBWLDataAfterOpCode_7
                    5215   DecodeBWLDataAfterOpCode_4:
                    5216   ; else if((OperandSize == (char)(2))  || (OperandSize == (char)(6)) || (OperandSize == (char)(7)))    {    //# long value
00002FB0  0C02 0002 5217          cmp.b     #2,D2
00002FB4  670E      5218          beq.s     DecodeBWLDataAfterOpCode_9
00002FB6  0C02 0006 5219          cmp.b     #6,D2
00002FBA  6708      5220          beq.s     DecodeBWLDataAfterOpCode_9
00002FBC  0C02 0007 5221          cmp.b     #7,D2
00002FC0  6600 0036 5222          bne       DecodeBWLDataAfterOpCode_7
                    5223   DecodeBWLDataAfterOpCode_9:
                    5224   ; sprintf(TempString, "#$%X", ((unsigned int)(OpCode[1]) << 16) | (unsigned int)(OpCode[2]) ); // create 3
00002FC4  2043      5225          move.l    D3,A0
00002FC6  3228 0002 5226          move.w    2(A0),D1
00002FCA  C2BC 0000 5227          and.l     #65535,D1
00002FCE  FFFF      
00002FD0  E189      5228          lsl.l     #8,D1
00002FD2  E189      5229          lsl.l     #8,D1
00002FD4  2043      5230          move.l    D3,A0
00002FD6  2F00      5231          move.l    D0,-(A7)
00002FD8  3028 0004 5232          move.w    4(A0),D0
00002FDC  C0BC 0000 5233          and.l     #65535,D0
00002FE0  FFFF      
00002FE2  8280      5234          or.l      D0,D1
00002FE4  201F      5235          move.l    (A7)+,D0
00002FE6  2F01      5236          move.l    D1,-(A7)
00002FE8  4879 0084 5237          pea       @m68kde~1_189.L
00002FEC  1950      
00002FEE  2F0A      5238          move.l    A2,-(A7)
00002FF0  4E93      5239          jsr       (A3)
00002FF2  DEFC 000C 5240          add.w     #12,A7
                    5241   ; InstructionSize += 1;
00002FF6  5294      5242          addq.l    #1,(A4)
                    5243   DecodeBWLDataAfterOpCode_7:
                    5244   ; }
                    5245   ; // special case for divs - bugger!!!
                    5246   ; if((*OpCode & (unsigned short int)(0xF1C0)) == (unsigned short int)(0x81C0)) // it's the divs instruction
00002FF8  2043      5247          move.l    D3,A0
00002FFA  3010      5248          move.w    (A0),D0
00002FFC  C07C F1C0 5249          and.w     #61888,D0
00003000  0C40 81C0 5250          cmp.w     #33216,D0
00003004  6622      5251          bne.s     DecodeBWLDataAfterOpCode_10
                    5252   ; {
                    5253   ; InstructionSize = 2 ;
00003006  28BC 0000 5254          move.l    #2,(A4)
0000300A  0002      
                    5255   ; sprintf(TempString, "#$%X", (unsigned int)(OpCode[1]));
0000300C  2043      5256          move.l    D3,A0
0000300E  3228 0002 5257          move.w    2(A0),D1
00003012  C2BC 0000 5258          and.l     #65535,D1
00003016  FFFF      
00003018  2F01      5259          move.l    D1,-(A7)
0000301A  4879 0084 5260          pea       @m68kde~1_190.L
0000301E  1956      
00003020  2F0A      5261          move.l    A2,-(A7)
00003022  4E93      5262          jsr       (A3)
00003024  DEFC 000C 5263          add.w     #12,A7
                    5264   DecodeBWLDataAfterOpCode_10:
                    5265   ; }
                    5266   ; strcatInstruction(TempString) ;
00003028  2F0A      5267          move.l    A2,-(A7)
0000302A  4EB8 0CD4 5268          jsr       _strcatInstruction
0000302E  584F      5269          addq.w    #4,A7
00003030  4CDF 1C0C 5270          movem.l   (A7)+,D2/D3/A2/A3/A4
00003034  4E5E      5271          unlk      A6
00003036  4E75      5272          rts
                    5273   ; }
                    5274   ; //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5275   ; // This function decodes the MODE|EA bits opcode in bits 5,4,3,2,1,0 or 11-6
                    5276   ; // DataSize is used to gain access to the operand used by EA, e.g. ADDI  #$2344422,$234234
                    5277   ; // since the data following the opcode is actually the immediate data which could be 1 or 2 words
                    5278   ; //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5279   ; void Decode6BitEA(unsigned short int *OpCode, int EAChoice, unsigned short int DataSize, unsigned short int IsItMoveInstruction)     // decode Mode/Register
                    5280   ; {
                    5281   _Decode6BitEA:
00003038  4E56 FFF4 5282          link      A6,#-12
0000303C  48E7 3F3C 5283          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00003040  45F8 0CD4 5284          lea       _strcatInstruction.L,A2
00003044  47F9 0084 5285          lea       _TempString.L,A3
00003048  0540      
0000304A  282E 0008 5286          move.l    8(A6),D4
0000304E  49F9 0000 5287          lea       _sprintf.L,A4
00003052  55CE      
00003054  4BF9 0084 5288          lea       _InstructionSize.L,A5
00003058  0178      
0000305A  3C2E 0012 5289          move.w    18(A6),D6
0000305E  CCBC 0000 5290          and.l     #65535,D6
00003062  FFFF      
                    5291   ; unsigned char OperandMode, OperandRegister, OperandSize;
                    5292   ; short int ExWord1, ExWord2 ;                       // get any extra 16 bit word associated with EA
                    5293   ; unsigned char RegNumber[3];
                    5294   ; signed char offset ;
                    5295   ; unsigned short int Xn, XnSize ;
                    5296   ; if(EAChoice == 0)   {   // if EA in bits 5-0
00003064  202E 000C 5297          move.l    12(A6),D0
00003068  6620      5298          bne.s     Decode6BitEA_1
                    5299   ; OperandMode = ((unsigned char)(*OpCode >> 3) & (unsigned short int)(0x7)) ;    // get bits 5,4,3 into position 2,1,0
0000306A  2044      5300          move.l    D4,A0
0000306C  3010      5301          move.w    (A0),D0
0000306E  E648      5302          lsr.w     #3,D0
00003070  C07C 00FF 5303          and.w     #255,D0
00003074  C07C 0007 5304          and.w     #7,D0
00003078  1A00      5305          move.b    D0,D5
                    5306   ; OperandRegister = ((unsigned char)(*OpCode) & (unsigned short int)(0x7)) ;
0000307A  2044      5307          move.l    D4,A0
0000307C  3010      5308          move.w    (A0),D0
0000307E  C07C 00FF 5309          and.w     #255,D0
00003082  C07C 0007 5310          and.w     #7,D0
00003086  1600      5311          move.b    D0,D3
00003088  6022      5312          bra.s     Decode6BitEA_2
                    5313   Decode6BitEA_1:
                    5314   ; }
                    5315   ; else    {               // else EA in bits 11-6
                    5316   ; OperandMode = ((unsigned char)(*OpCode >> 6) & (unsigned short int)(0x7)) ;
0000308A  2044      5317          move.l    D4,A0
0000308C  3010      5318          move.w    (A0),D0
0000308E  EC48      5319          lsr.w     #6,D0
00003090  C07C 00FF 5320          and.w     #255,D0
00003094  C07C 0007 5321          and.w     #7,D0
00003098  1A00      5322          move.b    D0,D5
                    5323   ; OperandRegister = ((unsigned char)(*OpCode >> 9) & (unsigned short int)(0x7)) ;
0000309A  2044      5324          move.l    D4,A0
0000309C  3010      5325          move.w    (A0),D0
0000309E  E048      5326          lsr.w     #8,D0
000030A0  E248      5327          lsr.w     #1,D0
000030A2  C07C 00FF 5328          and.w     #255,D0
000030A6  C07C 0007 5329          and.w     #7,D0
000030AA  1600      5330          move.b    D0,D3
                    5331   Decode6BitEA_2:
                    5332   ; }
                    5333   ; if(EAChoice == 0)    {
000030AC  202E 000C 5334          move.l    12(A6),D0
000030B0  6600 0034 5335          bne       Decode6BitEA_3
                    5336   ; ExWord1 = OpCode[1+DataSize] ;
000030B4  2044      5337          move.l    D4,A0
000030B6  7001      5338          moveq     #1,D0
000030B8  4880      5339          ext.w     D0
000030BA  48C0      5340          ext.l     D0
000030BC  CCBC 0000 5341          and.l     #65535,D6
000030C0  FFFF      
000030C2  D086      5342          add.l     D6,D0
000030C4  E388      5343          lsl.l     #1,D0
000030C6  3430 0800 5344          move.w    0(A0,D0.L),D2
                    5345   ; ExWord2 = OpCode[2+DataSize] ;
000030CA  2044      5346          move.l    D4,A0
000030CC  7002      5347          moveq     #2,D0
000030CE  4880      5348          ext.w     D0
000030D0  48C0      5349          ext.l     D0
000030D2  CCBC 0000 5350          and.l     #65535,D6
000030D6  FFFF      
000030D8  D086      5351          add.l     D6,D0
000030DA  E388      5352          lsl.l     #1,D0
000030DC  3D70 0800 5353          move.w    0(A0,D0.L),-8(A6)
000030E0  FFF8      
000030E2  6000 007E 5354          bra       Decode6BitEA_7
                    5355   Decode6BitEA_3:
                    5356   ; }
                    5357   ; else if(EAChoice == 1)   {
000030E6  202E 000C 5358          move.l    12(A6),D0
000030EA  0C80 0000 5359          cmp.l     #1,D0
000030EE  0001      
000030F0  6600 0034 5360          bne       Decode6BitEA_5
                    5361   ; ExWord1 = OpCode[3+DataSize] ;
000030F4  2044      5362          move.l    D4,A0
000030F6  7003      5363          moveq     #3,D0
000030F8  4880      5364          ext.w     D0
000030FA  48C0      5365          ext.l     D0
000030FC  CCBC 0000 5366          and.l     #65535,D6
00003100  FFFF      
00003102  D086      5367          add.l     D6,D0
00003104  E388      5368          lsl.l     #1,D0
00003106  3430 0800 5369          move.w    0(A0,D0.L),D2
                    5370   ; ExWord2 = OpCode[4+DataSize] ;
0000310A  2044      5371          move.l    D4,A0
0000310C  7004      5372          moveq     #4,D0
0000310E  4880      5373          ext.w     D0
00003110  48C0      5374          ext.l     D0
00003112  CCBC 0000 5375          and.l     #65535,D6
00003116  FFFF      
00003118  D086      5376          add.l     D6,D0
0000311A  E388      5377          lsl.l     #1,D0
0000311C  3D70 0800 5378          move.w    0(A0,D0.L),-8(A6)
00003120  FFF8      
00003122  6000 003E 5379          bra       Decode6BitEA_7
                    5380   Decode6BitEA_5:
                    5381   ; }
                    5382   ; else if(EAChoice == 2)   {  // for move instruction
00003126  202E 000C 5383          move.l    12(A6),D0
0000312A  0C80 0000 5384          cmp.l     #2,D0
0000312E  0002      
00003130  6600 0030 5385          bne       Decode6BitEA_7
                    5386   ; ExWord1 = OpCode[1+DataSize] ;
00003134  2044      5387          move.l    D4,A0
00003136  7001      5388          moveq     #1,D0
00003138  4880      5389          ext.w     D0
0000313A  48C0      5390          ext.l     D0
0000313C  CCBC 0000 5391          and.l     #65535,D6
00003140  FFFF      
00003142  D086      5392          add.l     D6,D0
00003144  E388      5393          lsl.l     #1,D0
00003146  3430 0800 5394          move.w    0(A0,D0.L),D2
                    5395   ; ExWord2 = OpCode[2+DataSize] ;
0000314A  2044      5396          move.l    D4,A0
0000314C  7002      5397          moveq     #2,D0
0000314E  4880      5398          ext.w     D0
00003150  48C0      5399          ext.l     D0
00003152  CCBC 0000 5400          and.l     #65535,D6
00003156  FFFF      
00003158  D086      5401          add.l     D6,D0
0000315A  E388      5402          lsl.l     #1,D0
0000315C  3D70 0800 5403          move.w    0(A0,D0.L),-8(A6)
00003160  FFF8      
                    5404   Decode6BitEA_7:
                    5405   ; }
                    5406   ; if(OperandMode == (unsigned char)(0)) {                    // Effective Address = Dn
00003162  4A05      5407          tst.b     D5
00003164  661E      5408          bne.s     Decode6BitEA_9
                    5409   ; RegNumber[0] = 'D' ;
00003166  1D7C 0044 5410          move.b    #68,-6+0(A6)
0000316A  FFFA      
                    5411   ; RegNumber[1] = (unsigned char)(0x30 + OperandRegister) ;
0000316C  7030      5412          moveq     #48,D0
0000316E  D003      5413          add.b     D3,D0
00003170  1D40 FFFB 5414          move.b    D0,-6+1(A6)
                    5415   ; RegNumber[2] = 0 ;
00003174  422E FFFC 5416          clr.b     -6+2(A6)
                    5417   ; strcatInstruction(RegNumber) ;
00003178  486E FFFA 5418          pea       -6(A6)
0000317C  4E92      5419          jsr       (A2)
0000317E  584F      5420          addq.w    #4,A7
00003180  6000 02D6 5421          bra       Decode6BitEA_44
                    5422   Decode6BitEA_9:
                    5423   ; }
                    5424   ; else if(OperandMode == (unsigned char)(1)) {                    // Effective Address = An
00003184  0C05 0001 5425          cmp.b     #1,D5
00003188  6616      5426          bne.s     Decode6BitEA_11
                    5427   ; Decode3BitAddressRegister(OperandRegister) ;
0000318A  C67C 00FF 5428          and.w     #255,D3
0000318E  C6BC 0000 5429          and.l     #65535,D3
00003192  FFFF      
00003194  2F03      5430          move.l    D3,-(A7)
00003196  4EB8 2E34 5431          jsr       _Decode3BitAddressRegister
0000319A  584F      5432          addq.w    #4,A7
0000319C  6000 02BA 5433          bra       Decode6BitEA_44
                    5434   Decode6BitEA_11:
                    5435   ; }
                    5436   ; else if(OperandMode == (unsigned char)(2)) {                    // Effective Address = (An)
000031A0  0C05 0002 5437          cmp.b     #2,D5
000031A4  662A      5438          bne.s     Decode6BitEA_13
                    5439   ; strcatInstruction("(") ;
000031A6  4879 0084 5440          pea       @m68kde~1_191.L
000031AA  195C      
000031AC  4E92      5441          jsr       (A2)
000031AE  584F      5442          addq.w    #4,A7
                    5443   ; Decode3BitAddressRegister(OperandRegister) ;
000031B0  C67C 00FF 5444          and.w     #255,D3
000031B4  C6BC 0000 5445          and.l     #65535,D3
000031B8  FFFF      
000031BA  2F03      5446          move.l    D3,-(A7)
000031BC  4EB8 2E34 5447          jsr       _Decode3BitAddressRegister
000031C0  584F      5448          addq.w    #4,A7
                    5449   ; strcatInstruction(")") ;
000031C2  4879 0084 5450          pea       @m68kde~1_192.L
000031C6  195E      
000031C8  4E92      5451          jsr       (A2)
000031CA  584F      5452          addq.w    #4,A7
000031CC  6000 028A 5453          bra       Decode6BitEA_44
                    5454   Decode6BitEA_13:
                    5455   ; }
                    5456   ; else if(OperandMode == (unsigned char)(3)) {                    // Effective Address = (An)+
000031D0  0C05 0003 5457          cmp.b     #3,D5
000031D4  662A      5458          bne.s     Decode6BitEA_15
                    5459   ; strcatInstruction("(") ;
000031D6  4879 0084 5460          pea       @m68kde~1_193.L
000031DA  1960      
000031DC  4E92      5461          jsr       (A2)
000031DE  584F      5462          addq.w    #4,A7
                    5463   ; Decode3BitAddressRegister(OperandRegister) ;
000031E0  C67C 00FF 5464          and.w     #255,D3
000031E4  C6BC 0000 5465          and.l     #65535,D3
000031E8  FFFF      
000031EA  2F03      5466          move.l    D3,-(A7)
000031EC  4EB8 2E34 5467          jsr       _Decode3BitAddressRegister
000031F0  584F      5468          addq.w    #4,A7
                    5469   ; strcatInstruction(")+") ;
000031F2  4879 0084 5470          pea       @m68kde~1_194.L
000031F6  1962      
000031F8  4E92      5471          jsr       (A2)
000031FA  584F      5472          addq.w    #4,A7
000031FC  6000 025A 5473          bra       Decode6BitEA_44
                    5474   Decode6BitEA_15:
                    5475   ; }
                    5476   ; else if(OperandMode == (unsigned char)(4)) {                    // Effective Address = -(An)
00003200  0C05 0004 5477          cmp.b     #4,D5
00003204  662A      5478          bne.s     Decode6BitEA_17
                    5479   ; strcatInstruction("-(") ;
00003206  4879 0084 5480          pea       @m68kde~1_195.L
0000320A  1966      
0000320C  4E92      5481          jsr       (A2)
0000320E  584F      5482          addq.w    #4,A7
                    5483   ; Decode3BitAddressRegister(OperandRegister) ;
00003210  C67C 00FF 5484          and.w     #255,D3
00003214  C6BC 0000 5485          and.l     #65535,D3
00003218  FFFF      
0000321A  2F03      5486          move.l    D3,-(A7)
0000321C  4EB8 2E34 5487          jsr       _Decode3BitAddressRegister
00003220  584F      5488          addq.w    #4,A7
                    5489   ; strcatInstruction(")") ;
00003222  4879 0084 5490          pea       @m68kde~1_196.L
00003226  196A      
00003228  4E92      5491          jsr       (A2)
0000322A  584F      5492          addq.w    #4,A7
0000322C  6000 022A 5493          bra       Decode6BitEA_44
                    5494   Decode6BitEA_17:
                    5495   ; }
                    5496   ; else if(OperandMode == (unsigned char)(5)) {                    // Effective Address = (d16, An)
00003230  0C05 0005 5497          cmp.b     #5,D5
00003234  6626      5498          bne.s     Decode6BitEA_19
                    5499   ; sprintf(TempString, "%d(A%d)", ExWord1, OperandRegister) ;
00003236  C6BC 0000 5500          and.l     #255,D3
0000323A  00FF      
0000323C  2F03      5501          move.l    D3,-(A7)
0000323E  48C2      5502          ext.l     D2
00003240  2F02      5503          move.l    D2,-(A7)
00003242  4879 0084 5504          pea       @m68kde~1_197.L
00003246  196C      
00003248  2F0B      5505          move.l    A3,-(A7)
0000324A  4E94      5506          jsr       (A4)
0000324C  DEFC 0010 5507          add.w     #16,A7
                    5508   ; strcatInstruction(TempString) ;
00003250  2F0B      5509          move.l    A3,-(A7)
00003252  4E92      5510          jsr       (A2)
00003254  584F      5511          addq.w    #4,A7
                    5512   ; InstructionSize += 1;
00003256  5295      5513          addq.l    #1,(A5)
00003258  6000 01FE 5514          bra       Decode6BitEA_44
                    5515   Decode6BitEA_19:
                    5516   ; }
                    5517   ; else if(OperandMode == (unsigned char)(6)) {                    // Effective Address = (d8, An, Xn)
0000325C  0C05 0006 5518          cmp.b     #6,D5
00003260  6600 00AA 5519          bne       Decode6BitEA_21
                    5520   ; offset = ExWord1 & (short int)(0x00FF);
00003264  3002      5521          move.w    D2,D0
00003266  C07C 00FF 5522          and.w     #255,D0
0000326A  1D40 FFFD 5523          move.b    D0,-3(A6)
                    5524   ; sprintf(TempString, "%d(A%d,", offset, OperandRegister) ;
0000326E  C6BC 0000 5525          and.l     #255,D3
00003272  00FF      
00003274  2F03      5526          move.l    D3,-(A7)
00003276  122E FFFD 5527          move.b    -3(A6),D1
0000327A  4881      5528          ext.w     D1
0000327C  48C1      5529          ext.l     D1
0000327E  2F01      5530          move.l    D1,-(A7)
00003280  4879 0084 5531          pea       @m68kde~1_198.L
00003284  1974      
00003286  2F0B      5532          move.l    A3,-(A7)
00003288  4E94      5533          jsr       (A4)
0000328A  DEFC 0010 5534          add.w     #16,A7
                    5535   ; strcatInstruction(TempString) ;
0000328E  2F0B      5536          move.l    A3,-(A7)
00003290  4E92      5537          jsr       (A2)
00003292  584F      5538          addq.w    #4,A7
                    5539   ; InstructionSize += 1;
00003294  5295      5540          addq.l    #1,(A5)
                    5541   ; // decode the Xn bit
                    5542   ; if((ExWord1 & (unsigned short int)(0x8000)) == (unsigned short int)(0x0000))
00003296  3002      5543          move.w    D2,D0
00003298  C07C 8000 5544          and.w     #32768,D0
0000329C  660C      5545          bne.s     Decode6BitEA_23
                    5546   ; strcatInstruction("D") ;
0000329E  4879 0084 5547          pea       @m68kde~1_199.L
000032A2  197C      
000032A4  4E92      5548          jsr       (A2)
000032A6  584F      5549          addq.w    #4,A7
000032A8  600A      5550          bra.s     Decode6BitEA_24
                    5551   Decode6BitEA_23:
                    5552   ; else
                    5553   ; strcatInstruction("A") ;
000032AA  4879 0084 5554          pea       @m68kde~1_200.L
000032AE  197E      
000032B0  4E92      5555          jsr       (A2)
000032B2  584F      5556          addq.w    #4,A7
                    5557   Decode6BitEA_24:
                    5558   ; Xn = (ExWord1 & (unsigned short int)(0x7000)) >> 12 ;        // get Xn register Number into bits 2,1,0
000032B4  3002      5559          move.w    D2,D0
000032B6  C07C 7000 5560          and.w     #28672,D0
000032BA  E048      5561          lsr.w     #8,D0
000032BC  E848      5562          lsr.w     #4,D0
000032BE  3D40 FFFE 5563          move.w    D0,-2(A6)
                    5564   ; sprintf(TempString, "%d",Xn) ;                               // generate string for reg number 0 -7
000032C2  322E FFFE 5565          move.w    -2(A6),D1
000032C6  C2BC 0000 5566          and.l     #65535,D1
000032CA  FFFF      
000032CC  2F01      5567          move.l    D1,-(A7)
000032CE  4879 0084 5568          pea       @m68kde~1_201.L
000032D2  1980      
000032D4  2F0B      5569          move.l    A3,-(A7)
000032D6  4E94      5570          jsr       (A4)
000032D8  DEFC 000C 5571          add.w     #12,A7
                    5572   ; strcatInstruction(TempString) ;
000032DC  2F0B      5573          move.l    A3,-(A7)
000032DE  4E92      5574          jsr       (A2)
000032E0  584F      5575          addq.w    #4,A7
                    5576   ; XnSize = (ExWord1 & (unsigned short int)(0x0800)) >> 11 ;    // get xn size into bit 0
000032E2  3002      5577          move.w    D2,D0
000032E4  C07C 0800 5578          and.w     #2048,D0
000032E8  E048      5579          lsr.w     #8,D0
000032EA  E648      5580          lsr.w     #3,D0
000032EC  3E00      5581          move.w    D0,D7
                    5582   ; if(XnSize == 0)
000032EE  4A47      5583          tst.w     D7
000032F0  660C      5584          bne.s     Decode6BitEA_25
                    5585   ; strcatInstruction(".W)") ;
000032F2  4879 0084 5586          pea       @m68kde~1_202.L
000032F6  1984      
000032F8  4E92      5587          jsr       (A2)
000032FA  584F      5588          addq.w    #4,A7
000032FC  600A      5589          bra.s     Decode6BitEA_26
                    5590   Decode6BitEA_25:
                    5591   ; else
                    5592   ; strcatInstruction(".L)") ;
000032FE  4879 0084 5593          pea       @m68kde~1_203.L
00003302  1988      
00003304  4E92      5594          jsr       (A2)
00003306  584F      5595          addq.w    #4,A7
                    5596   Decode6BitEA_26:
00003308  6000 014E 5597          bra       Decode6BitEA_44
                    5598   Decode6BitEA_21:
                    5599   ; }
                    5600   ; else if(OperandMode == (unsigned char)(7)) {
0000330C  0C05 0007 5601          cmp.b     #7,D5
00003310  6600 0146 5602          bne       Decode6BitEA_44
                    5603   ; if(OperandRegister == 0) {                               // EA = (xxx).W
00003314  4A03      5604          tst.b     D3
00003316  661E      5605          bne.s     Decode6BitEA_29
                    5606   ; sprintf(TempString, "$%X", ExWord1) ;
00003318  48C2      5607          ext.l     D2
0000331A  2F02      5608          move.l    D2,-(A7)
0000331C  4879 0084 5609          pea       @m68kde~1_204.L
00003320  198C      
00003322  2F0B      5610          move.l    A3,-(A7)
00003324  4E94      5611          jsr       (A4)
00003326  DEFC 000C 5612          add.w     #12,A7
                    5613   ; strcatInstruction(TempString) ;
0000332A  2F0B      5614          move.l    A3,-(A7)
0000332C  4E92      5615          jsr       (A2)
0000332E  584F      5616          addq.w    #4,A7
                    5617   ; InstructionSize += 1;
00003330  5295      5618          addq.l    #1,(A5)
00003332  6000 0124 5619          bra       Decode6BitEA_44
                    5620   Decode6BitEA_29:
                    5621   ; }
                    5622   ; else if(OperandRegister == 1)   {                         // EA = (xxx).L
00003336  0C03 0001 5623          cmp.b     #1,D3
0000333A  6600 0032 5624          bne       Decode6BitEA_31
                    5625   ; sprintf(TempString, "$%X", ((unsigned int)(ExWord1) << 16) | (unsigned int)(ExWord2)); // create 32 bit address
0000333E  3202      5626          move.w    D2,D1
00003340  48C1      5627          ext.l     D1
00003342  E189      5628          lsl.l     #8,D1
00003344  E189      5629          lsl.l     #8,D1
00003346  2F00      5630          move.l    D0,-(A7)
00003348  302E FFF8 5631          move.w    -8(A6),D0
0000334C  48C0      5632          ext.l     D0
0000334E  8280      5633          or.l      D0,D1
00003350  201F      5634          move.l    (A7)+,D0
00003352  2F01      5635          move.l    D1,-(A7)
00003354  4879 0084 5636          pea       @m68kde~1_205.L
00003358  1990      
0000335A  2F0B      5637          move.l    A3,-(A7)
0000335C  4E94      5638          jsr       (A4)
0000335E  DEFC 000C 5639          add.w     #12,A7
                    5640   ; strcatInstruction(TempString) ;
00003362  2F0B      5641          move.l    A3,-(A7)
00003364  4E92      5642          jsr       (A2)
00003366  584F      5643          addq.w    #4,A7
                    5644   ; InstructionSize += 2;
00003368  5495      5645          addq.l    #2,(A5)
0000336A  6000 00EC 5646          bra       Decode6BitEA_44
                    5647   Decode6BitEA_31:
                    5648   ; }
                    5649   ; else if(OperandRegister == 4) {                                 // source EA = #Immediate addressing
0000336E  0C03 0004 5650          cmp.b     #4,D3
00003372  661C      5651          bne.s     Decode6BitEA_33
                    5652   ; if(IsItMoveInstruction == 0)        //not move instruction
00003374  302E 0016 5653          move.w    22(A6),D0
00003378  660A      5654          bne.s     Decode6BitEA_35
                    5655   ; DecodeBWLDataAfterOpCode(OpCode);
0000337A  2F04      5656          move.l    D4,-(A7)
0000337C  4EB8 2F28 5657          jsr       _DecodeBWLDataAfterOpCode
00003380  584F      5658          addq.w    #4,A7
00003382  6008      5659          bra.s     Decode6BitEA_36
                    5660   Decode6BitEA_35:
                    5661   ; else
                    5662   ; DecodeBWLDataAfterOpCodeForMove(OpCode);
00003384  2F04      5663          move.l    D4,-(A7)
00003386  4EB8 2E60 5664          jsr       _DecodeBWLDataAfterOpCodeForMove
0000338A  584F      5665          addq.w    #4,A7
                    5666   Decode6BitEA_36:
0000338C  6000 00CA 5667          bra       Decode6BitEA_44
                    5668   Decode6BitEA_33:
                    5669   ; }
                    5670   ; else if(OperandRegister == 2) {                                 // source EA = (d16,PC)
00003390  0C03 0002 5671          cmp.b     #2,D3
00003394  661E      5672          bne.s     Decode6BitEA_37
                    5673   ; sprintf(TempString, "%d(PC)", ExWord1) ;
00003396  48C2      5674          ext.l     D2
00003398  2F02      5675          move.l    D2,-(A7)
0000339A  4879 0084 5676          pea       @m68kde~1_206.L
0000339E  1994      
000033A0  2F0B      5677          move.l    A3,-(A7)
000033A2  4E94      5678          jsr       (A4)
000033A4  DEFC 000C 5679          add.w     #12,A7
                    5680   ; strcatInstruction(TempString) ;
000033A8  2F0B      5681          move.l    A3,-(A7)
000033AA  4E92      5682          jsr       (A2)
000033AC  584F      5683          addq.w    #4,A7
                    5684   ; InstructionSize += 1;
000033AE  5295      5685          addq.l    #1,(A5)
000033B0  6000 00A6 5686          bra       Decode6BitEA_44
                    5687   Decode6BitEA_37:
                    5688   ; }
                    5689   ; else if(OperandRegister == 3) {                                 // source EA = (d8,PC, Xn)
000033B4  0C03 0003 5690          cmp.b     #3,D3
000033B8  6600 009E 5691          bne       Decode6BitEA_44
                    5692   ; offset = ExWord1 & (short int)(0x00FF);
000033BC  3002      5693          move.w    D2,D0
000033BE  C07C 00FF 5694          and.w     #255,D0
000033C2  1D40 FFFD 5695          move.b    D0,-3(A6)
                    5696   ; sprintf(TempString, "%d(PC,", offset ) ;
000033C6  122E FFFD 5697          move.b    -3(A6),D1
000033CA  4881      5698          ext.w     D1
000033CC  48C1      5699          ext.l     D1
000033CE  2F01      5700          move.l    D1,-(A7)
000033D0  4879 0084 5701          pea       @m68kde~1_207.L
000033D4  199C      
000033D6  2F0B      5702          move.l    A3,-(A7)
000033D8  4E94      5703          jsr       (A4)
000033DA  DEFC 000C 5704          add.w     #12,A7
                    5705   ; strcatInstruction(TempString) ;
000033DE  2F0B      5706          move.l    A3,-(A7)
000033E0  4E92      5707          jsr       (A2)
000033E2  584F      5708          addq.w    #4,A7
                    5709   ; InstructionSize += 1;
000033E4  5295      5710          addq.l    #1,(A5)
                    5711   ; // decode the Xn bit
                    5712   ; if((ExWord1 & (unsigned short int)(0x8000)) == (unsigned short int)(0x0000))
000033E6  3002      5713          move.w    D2,D0
000033E8  C07C 8000 5714          and.w     #32768,D0
000033EC  660C      5715          bne.s     Decode6BitEA_41
                    5716   ; strcatInstruction("D") ;
000033EE  4879 0084 5717          pea       @m68kde~1_208.L
000033F2  19A4      
000033F4  4E92      5718          jsr       (A2)
000033F6  584F      5719          addq.w    #4,A7
000033F8  600A      5720          bra.s     Decode6BitEA_42
                    5721   Decode6BitEA_41:
                    5722   ; else
                    5723   ; strcatInstruction("A") ;
000033FA  4879 0084 5724          pea       @m68kde~1_209.L
000033FE  19A6      
00003400  4E92      5725          jsr       (A2)
00003402  584F      5726          addq.w    #4,A7
                    5727   Decode6BitEA_42:
                    5728   ; Xn = (ExWord1 & (unsigned short int)(0x7000)) >> 12 ;        // get Xn register Number into bits 2,1,0
00003404  3002      5729          move.w    D2,D0
00003406  C07C 7000 5730          and.w     #28672,D0
0000340A  E048      5731          lsr.w     #8,D0
0000340C  E848      5732          lsr.w     #4,D0
0000340E  3D40 FFFE 5733          move.w    D0,-2(A6)
                    5734   ; sprintf(TempString, "%d",Xn) ;                               // generate string for reg number 0 -7
00003412  322E FFFE 5735          move.w    -2(A6),D1
00003416  C2BC 0000 5736          and.l     #65535,D1
0000341A  FFFF      
0000341C  2F01      5737          move.l    D1,-(A7)
0000341E  4879 0084 5738          pea       @m68kde~1_210.L
00003422  19A8      
00003424  2F0B      5739          move.l    A3,-(A7)
00003426  4E94      5740          jsr       (A4)
00003428  DEFC 000C 5741          add.w     #12,A7
                    5742   ; strcatInstruction(TempString) ;
0000342C  2F0B      5743          move.l    A3,-(A7)
0000342E  4E92      5744          jsr       (A2)
00003430  584F      5745          addq.w    #4,A7
                    5746   ; XnSize = (ExWord1 & (unsigned short int)(0x0800)) >> 11 ;    // get xn size into bit 0
00003432  3002      5747          move.w    D2,D0
00003434  C07C 0800 5748          and.w     #2048,D0
00003438  E048      5749          lsr.w     #8,D0
0000343A  E648      5750          lsr.w     #3,D0
0000343C  3E00      5751          move.w    D0,D7
                    5752   ; if(XnSize == 0)
0000343E  4A47      5753          tst.w     D7
00003440  660C      5754          bne.s     Decode6BitEA_43
                    5755   ; strcatInstruction(".W)") ;
00003442  4879 0084 5756          pea       @m68kde~1_211.L
00003446  19AC      
00003448  4E92      5757          jsr       (A2)
0000344A  584F      5758          addq.w    #4,A7
0000344C  600A      5759          bra.s     Decode6BitEA_44
                    5760   Decode6BitEA_43:
                    5761   ; else
                    5762   ; strcatInstruction(".L)") ;
0000344E  4879 0084 5763          pea       @m68kde~1_212.L
00003452  19B0      
00003454  4E92      5764          jsr       (A2)
00003456  584F      5765          addq.w    #4,A7
                    5766   Decode6BitEA_44:
00003458  4CDF 3CFC 5767          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
0000345C  4E5E      5768          unlk      A6
0000345E  4E75      5769          rts
                    5770   ; }
                    5771   ; }
                    5772   ; }
                    5773   ; void Decode3BitOperandMode(unsigned short int *OpCode)               // used with instructions like ADD determines source/destination
                    5774   ; {
                    5775   _Decode3BitOperandMode:
00003460  4E56 FFFC 5776          link      A6,#-4
00003464  2F02      5777          move.l    D2,-(A7)
00003466  242E 0008 5778          move.l    8(A6),D2
                    5779   ; unsigned short int OperandMode;
                    5780   ; OperandMode = (*OpCode & (unsigned short int)(0x0100)) >> 8 ;    // get bit 8 into position 0, defines source and destination
0000346A  2042      5781          move.l    D2,A0
0000346C  3010      5782          move.w    (A0),D0
0000346E  C07C 0100 5783          and.w     #256,D0
00003472  E048      5784          lsr.w     #8,D0
00003474  3D40 FFFE 5785          move.w    D0,-2(A6)
                    5786   ; Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
00003478  2042      5787          move.l    D2,A0
0000347A  3210      5788          move.w    (A0),D1
0000347C  C2BC 0000 5789          and.l     #65535,D1
00003480  FFFF      
00003482  2F01      5790          move.l    D1,-(A7)
00003484  4EB8 2DA4 5791          jsr       _Decode2BitOperandSize
00003488  584F      5792          addq.w    #4,A7
                    5793   ; if(OperandMode == 0)     {                                      // Destination is a Data Register
0000348A  302E FFFE 5794          move.w    -2(A6),D0
0000348E  6600 0032 5795          bne       Decode3BitOperandMode_1
                    5796   ; Decode6BitEA(OpCode,0,0,0) ;
00003492  42A7      5797          clr.l     -(A7)
00003494  42A7      5798          clr.l     -(A7)
00003496  42A7      5799          clr.l     -(A7)
00003498  2F02      5800          move.l    D2,-(A7)
0000349A  4EB8 3038 5801          jsr       _Decode6BitEA
0000349E  DEFC 0010 5802          add.w     #16,A7
                    5803   ; strcatInstruction(",") ;
000034A2  4879 0084 5804          pea       @m68kde~1_213.L
000034A6  19B4      
000034A8  4EB8 0CD4 5805          jsr       _strcatInstruction
000034AC  584F      5806          addq.w    #4,A7
                    5807   ; Decode3BitDataRegister(*OpCode) ;
000034AE  2042      5808          move.l    D2,A0
000034B0  3210      5809          move.w    (A0),D1
000034B2  C2BC 0000 5810          and.l     #65535,D1
000034B6  FFFF      
000034B8  2F01      5811          move.l    D1,-(A7)
000034BA  4EB8 2E00 5812          jsr       _Decode3BitDataRegister
000034BE  584F      5813          addq.w    #4,A7
000034C0  602E      5814          bra.s     Decode3BitOperandMode_2
                    5815   Decode3BitOperandMode_1:
                    5816   ; }
                    5817   ; else {                                                         // Destination is in EA
                    5818   ; Decode3BitDataRegister(*OpCode) ;
000034C2  2042      5819          move.l    D2,A0
000034C4  3210      5820          move.w    (A0),D1
000034C6  C2BC 0000 5821          and.l     #65535,D1
000034CA  FFFF      
000034CC  2F01      5822          move.l    D1,-(A7)
000034CE  4EB8 2E00 5823          jsr       _Decode3BitDataRegister
000034D2  584F      5824          addq.w    #4,A7
                    5825   ; strcatInstruction(",") ;
000034D4  4879 0084 5826          pea       @m68kde~1_214.L
000034D8  19B6      
000034DA  4EB8 0CD4 5827          jsr       _strcatInstruction
000034DE  584F      5828          addq.w    #4,A7
                    5829   ; Decode6BitEA(OpCode,0,0,0) ;
000034E0  42A7      5830          clr.l     -(A7)
000034E2  42A7      5831          clr.l     -(A7)
000034E4  42A7      5832          clr.l     -(A7)
000034E6  2F02      5833          move.l    D2,-(A7)
000034E8  4EB8 3038 5834          jsr       _Decode6BitEA
000034EC  DEFC 0010 5835          add.w     #16,A7
                    5836   Decode3BitOperandMode_2:
000034F0  241F      5837          move.l    (A7)+,D2
000034F2  4E5E      5838          unlk      A6
000034F4  4E75      5839          rts
                    5840   ; }
                    5841   ; }
                    5842   ; void DecodeBranchCondition(unsigned short int Condition)
                    5843   ; {
                    5844   _DecodeBranchCondition:
000034F6  4E56 0000 5845          link      A6,#0
000034FA  48E7 2020 5846          movem.l   D2/A2,-(A7)
000034FE  45F8 0CD4 5847          lea       _strcatInstruction.L,A2
00003502  342E 000A 5848          move.w    10(A6),D2
00003506  C4BC 0000 5849          and.l     #65535,D2
0000350A  FFFF      
                    5850   ; if(Condition == (unsigned short int)(0x04))
0000350C  0C42 0004 5851          cmp.w     #4,D2
00003510  660E      5852          bne.s     DecodeBranchCondition_1
                    5853   ; strcatInstruction("CC") ;
00003512  4879 0084 5854          pea       @m68kde~1_215.L
00003516  19B8      
00003518  4E92      5855          jsr       (A2)
0000351A  584F      5856          addq.w    #4,A7
0000351C  6000 011C 5857          bra       DecodeBranchCondition_30
                    5858   DecodeBranchCondition_1:
                    5859   ; else if(Condition == (unsigned short int)(0x05))
00003520  0C42 0005 5860          cmp.w     #5,D2
00003524  660E      5861          bne.s     DecodeBranchCondition_3
                    5862   ; strcatInstruction("CS") ;
00003526  4879 0084 5863          pea       @m68kde~1_216.L
0000352A  19BC      
0000352C  4E92      5864          jsr       (A2)
0000352E  584F      5865          addq.w    #4,A7
00003530  6000 0108 5866          bra       DecodeBranchCondition_30
                    5867   DecodeBranchCondition_3:
                    5868   ; else if(Condition == (unsigned short int)(0x07))
00003534  0C42 0007 5869          cmp.w     #7,D2
00003538  660E      5870          bne.s     DecodeBranchCondition_5
                    5871   ; strcatInstruction("EQ") ;
0000353A  4879 0084 5872          pea       @m68kde~1_217.L
0000353E  19C0      
00003540  4E92      5873          jsr       (A2)
00003542  584F      5874          addq.w    #4,A7
00003544  6000 00F4 5875          bra       DecodeBranchCondition_30
                    5876   DecodeBranchCondition_5:
                    5877   ; else if(Condition == (unsigned short int)(0x0C))
00003548  0C42 000C 5878          cmp.w     #12,D2
0000354C  660E      5879          bne.s     DecodeBranchCondition_7
                    5880   ; strcatInstruction("GE") ;
0000354E  4879 0084 5881          pea       @m68kde~1_218.L
00003552  19C4      
00003554  4E92      5882          jsr       (A2)
00003556  584F      5883          addq.w    #4,A7
00003558  6000 00E0 5884          bra       DecodeBranchCondition_30
                    5885   DecodeBranchCondition_7:
                    5886   ; else if(Condition == (unsigned short int)(0x0E))
0000355C  0C42 000E 5887          cmp.w     #14,D2
00003560  660E      5888          bne.s     DecodeBranchCondition_9
                    5889   ; strcatInstruction("GT") ;
00003562  4879 0084 5890          pea       @m68kde~1_219.L
00003566  19C8      
00003568  4E92      5891          jsr       (A2)
0000356A  584F      5892          addq.w    #4,A7
0000356C  6000 00CC 5893          bra       DecodeBranchCondition_30
                    5894   DecodeBranchCondition_9:
                    5895   ; else if(Condition == (unsigned short int)(0x02))
00003570  0C42 0002 5896          cmp.w     #2,D2
00003574  660E      5897          bne.s     DecodeBranchCondition_11
                    5898   ; strcatInstruction("HI") ;
00003576  4879 0084 5899          pea       @m68kde~1_220.L
0000357A  19CC      
0000357C  4E92      5900          jsr       (A2)
0000357E  584F      5901          addq.w    #4,A7
00003580  6000 00B8 5902          bra       DecodeBranchCondition_30
                    5903   DecodeBranchCondition_11:
                    5904   ; else if(Condition == (unsigned short int)(0x0F))
00003584  0C42 000F 5905          cmp.w     #15,D2
00003588  660E      5906          bne.s     DecodeBranchCondition_13
                    5907   ; strcatInstruction("LE") ;
0000358A  4879 0084 5908          pea       @m68kde~1_221.L
0000358E  19D0      
00003590  4E92      5909          jsr       (A2)
00003592  584F      5910          addq.w    #4,A7
00003594  6000 00A4 5911          bra       DecodeBranchCondition_30
                    5912   DecodeBranchCondition_13:
                    5913   ; else if(Condition == (unsigned short int)(0x03))
00003598  0C42 0003 5914          cmp.w     #3,D2
0000359C  660E      5915          bne.s     DecodeBranchCondition_15
                    5916   ; strcatInstruction("LS") ;
0000359E  4879 0084 5917          pea       @m68kde~1_222.L
000035A2  19D4      
000035A4  4E92      5918          jsr       (A2)
000035A6  584F      5919          addq.w    #4,A7
000035A8  6000 0090 5920          bra       DecodeBranchCondition_30
                    5921   DecodeBranchCondition_15:
                    5922   ; else if(Condition == (unsigned short int)(0x0D))
000035AC  0C42 000D 5923          cmp.w     #13,D2
000035B0  660E      5924          bne.s     DecodeBranchCondition_17
                    5925   ; strcatInstruction("LT") ;
000035B2  4879 0084 5926          pea       @m68kde~1_223.L
000035B6  19D8      
000035B8  4E92      5927          jsr       (A2)
000035BA  584F      5928          addq.w    #4,A7
000035BC  6000 007C 5929          bra       DecodeBranchCondition_30
                    5930   DecodeBranchCondition_17:
                    5931   ; else if(Condition == (unsigned short int)(0x0B))
000035C0  0C42 000B 5932          cmp.w     #11,D2
000035C4  660E      5933          bne.s     DecodeBranchCondition_19
                    5934   ; strcatInstruction("MI") ;
000035C6  4879 0084 5935          pea       @m68kde~1_224.L
000035CA  19DC      
000035CC  4E92      5936          jsr       (A2)
000035CE  584F      5937          addq.w    #4,A7
000035D0  6000 0068 5938          bra       DecodeBranchCondition_30
                    5939   DecodeBranchCondition_19:
                    5940   ; else if(Condition == (unsigned short int)(0x06))
000035D4  0C42 0006 5941          cmp.w     #6,D2
000035D8  660E      5942          bne.s     DecodeBranchCondition_21
                    5943   ; strcatInstruction("NE") ;
000035DA  4879 0084 5944          pea       @m68kde~1_225.L
000035DE  19E0      
000035E0  4E92      5945          jsr       (A2)
000035E2  584F      5946          addq.w    #4,A7
000035E4  6000 0054 5947          bra       DecodeBranchCondition_30
                    5948   DecodeBranchCondition_21:
                    5949   ; else if(Condition == (unsigned short int)(0x0A))
000035E8  0C42 000A 5950          cmp.w     #10,D2
000035EC  660E      5951          bne.s     DecodeBranchCondition_23
                    5952   ; strcatInstruction("PL") ;
000035EE  4879 0084 5953          pea       @m68kde~1_226.L
000035F2  19E4      
000035F4  4E92      5954          jsr       (A2)
000035F6  584F      5955          addq.w    #4,A7
000035F8  6000 0040 5956          bra       DecodeBranchCondition_30
                    5957   DecodeBranchCondition_23:
                    5958   ; else if(Condition == (unsigned short int)(0x09))
000035FC  0C42 0009 5959          cmp.w     #9,D2
00003600  660C      5960          bne.s     DecodeBranchCondition_25
                    5961   ; strcatInstruction("VS") ;
00003602  4879 0084 5962          pea       @m68kde~1_227.L
00003606  19E8      
00003608  4E92      5963          jsr       (A2)
0000360A  584F      5964          addq.w    #4,A7
0000360C  602C      5965          bra.s     DecodeBranchCondition_30
                    5966   DecodeBranchCondition_25:
                    5967   ; else if(Condition == (unsigned short int)(0x08))
0000360E  0C42 0008 5968          cmp.w     #8,D2
00003612  660C      5969          bne.s     DecodeBranchCondition_27
                    5970   ; strcatInstruction("VC") ;
00003614  4879 0084 5971          pea       @m68kde~1_228.L
00003618  19EC      
0000361A  4E92      5972          jsr       (A2)
0000361C  584F      5973          addq.w    #4,A7
0000361E  601A      5974          bra.s     DecodeBranchCondition_30
                    5975   DecodeBranchCondition_27:
                    5976   ; else if(Condition == (unsigned short int)(0))
00003620  4A42      5977          tst.w     D2
00003622  660C      5978          bne.s     DecodeBranchCondition_29
                    5979   ; strcatInstruction("RA") ;
00003624  4879 0084 5980          pea       @m68kde~1_229.L
00003628  19F0      
0000362A  4E92      5981          jsr       (A2)
0000362C  584F      5982          addq.w    #4,A7
0000362E  600A      5983          bra.s     DecodeBranchCondition_30
                    5984   DecodeBranchCondition_29:
                    5985   ; else
                    5986   ; strcatInstruction("SR");
00003630  4879 0084 5987          pea       @m68kde~1_230.L
00003634  19F4      
00003636  4E92      5988          jsr       (A2)
00003638  584F      5989          addq.w    #4,A7
                    5990   DecodeBranchCondition_30:
                    5991   ; strcatInstruction(" ") ;
0000363A  4879 0084 5992          pea       @m68kde~1_231.L
0000363E  19F8      
00003640  4E92      5993          jsr       (A2)
00003642  584F      5994          addq.w    #4,A7
00003644  4CDF 0404 5995          movem.l   (A7)+,D2/A2
00003648  4E5E      5996          unlk      A6
0000364A  4E75      5997          rts
                    5998   ; }
                    5999   ; void DisassembleInstruction( short int *OpCode)         // pointer to Opcode
                    6000   ; {
                    6001   _DisassembleInstruction:
0000364C  4E56 FFD8 6002          link      A6,#-40
00003650  48E7 3F3C 6003          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00003654  242E 0008 6004          move.l    8(A6),D2
00003658  45F9 0084 6005          lea       _InstructionSize.L,A2
0000365C  0178      
0000365E  47F8 0CEE 6006          lea       _strcpyInstruction.L,A3
00003662  49F9 0084 6007          lea       _TempString.L,A4
00003666  0540      
00003668  4BF9 0000 6008          lea       _sprintf.L,A5
0000366C  55CE      
                    6009   ; unsigned short int MSBits = (*OpCode >> 12);    //mask off the lower 12 bits leaving top 4 bit to analyse
0000366E  2042      6010          move.l    D2,A0
00003670  3010      6011          move.w    (A0),D0
00003672  E040      6012          asr.w     #8,D0
00003674  E840      6013          asr.w     #4,D0
00003676  3D40 FFDA 6014          move.w    D0,-38(A6)
                    6015   ; unsigned short int LS12Bits = (*OpCode & (unsigned short int)(0x0FFF));
0000367A  2042      6016          move.l    D2,A0
0000367C  3010      6017          move.w    (A0),D0
0000367E  C07C 0FFF 6018          and.w     #4095,D0
00003682  3D40 FFDC 6019          move.w    D0,-36(A6)
                    6020   ; unsigned short int SourceBits, DestBits, Size ;
                    6021   ; unsigned char *Mode, Condition;
                    6022   ; unsigned short int Register, OpMode, EAMode, EARegister, Rx, Ry, EXGOpMode, DataSize, SourceReg;
                    6023   ; unsigned short int DataRegister, AddressRegister;
                    6024   ; signed char Displacement8Bit ;  // used for Bcc type instruction signed 8 bit displacement
                    6025   ; signed short int Displacement16Bit;
                    6026   ; short int Mask, DoneSlash;
                    6027   ; int i;
                    6028   ; strcpyInstruction("Unknown") ;
00003686  4879 0084 6029          pea       @m68kde~1_232.L
0000368A  19FA      
0000368C  4E93      6030          jsr       (A3)
0000368E  584F      6031          addq.w    #4,A7
                    6032   ; /////////////////////////////////////////////////////////////////////////////////
                    6033   ; // if instruction is ABCD
                    6034   ; /////////////////////////////////////////////////////////////////////////////////
                    6035   ; if((*OpCode & (unsigned short int)(0xF1F0 )) == (unsigned short int)(0xC100))   {
00003690  2042      6036          move.l    D2,A0
00003692  3010      6037          move.w    (A0),D0
00003694  C07C F1F0 6038          and.w     #61936,D0
00003698  0C40 C100 6039          cmp.w     #49408,D0
0000369C  6600 008C 6040          bne       DisassembleInstruction_4
                    6041   ; DestBits = (*OpCode >> 9) & (unsigned short int )(0x0007) ;
000036A0  2042      6042          move.l    D2,A0
000036A2  3010      6043          move.w    (A0),D0
000036A4  E040      6044          asr.w     #8,D0
000036A6  E240      6045          asr.w     #1,D0
000036A8  C07C 0007 6046          and.w     #7,D0
000036AC  3D40 FFE0 6047          move.w    D0,-32(A6)
                    6048   ; SourceBits = (*OpCode & (unsigned short int )(0x0007));
000036B0  2042      6049          move.l    D2,A0
000036B2  3010      6050          move.w    (A0),D0
000036B4  C07C 0007 6051          and.w     #7,D0
000036B8  3D40 FFDE 6052          move.w    D0,-34(A6)
                    6053   ; Mode = (*OpCode >> 3) & (unsigned short int )(0x0001) ;
000036BC  2042      6054          move.l    D2,A0
000036BE  3010      6055          move.w    (A0),D0
000036C0  E640      6056          asr.w     #3,D0
000036C2  48C0      6057          ext.l     D0
000036C4  C0BC 0000 6058          and.l     #1,D0
000036C8  0001      
000036CA  2D40 FFE4 6059          move.l    D0,-28(A6)
                    6060   ; if(Mode == 0)
000036CE  202E FFE4 6061          move.l    -28(A6),D0
000036D2  662C      6062          bne.s     DisassembleInstruction_3
                    6063   ; sprintf(Instruction, "ABCD D%d,D%d", SourceBits, DestBits) ;
000036D4  322E FFE0 6064          move.w    -32(A6),D1
000036D8  C2BC 0000 6065          and.l     #65535,D1
000036DC  FFFF      
000036DE  2F01      6066          move.l    D1,-(A7)
000036E0  322E FFDE 6067          move.w    -34(A6),D1
000036E4  C2BC 0000 6068          and.l     #65535,D1
000036E8  FFFF      
000036EA  2F01      6069          move.l    D1,-(A7)
000036EC  4879 0084 6070          pea       @m68kde~1_233.L
000036F0  1A02      
000036F2  4879 0084 6071          pea       _Instruction.L
000036F6  04DC      
000036F8  4E95      6072          jsr       (A5)
000036FA  DEFC 0010 6073          add.w     #16,A7
000036FE  602A      6074          bra.s     DisassembleInstruction_4
                    6075   DisassembleInstruction_3:
                    6076   ; else
                    6077   ; sprintf(Instruction, "ABCD -(A%d),-(A%d)", SourceBits, DestBits) ;
00003700  322E FFE0 6078          move.w    -32(A6),D1
00003704  C2BC 0000 6079          and.l     #65535,D1
00003708  FFFF      
0000370A  2F01      6080          move.l    D1,-(A7)
0000370C  322E FFDE 6081          move.w    -34(A6),D1
00003710  C2BC 0000 6082          and.l     #65535,D1
00003714  FFFF      
00003716  2F01      6083          move.l    D1,-(A7)
00003718  4879 0084 6084          pea       @m68kde~1_234.L
0000371C  1A10      
0000371E  4879 0084 6085          pea       _Instruction.L
00003722  04DC      
00003724  4E95      6086          jsr       (A5)
00003726  DEFC 0010 6087          add.w     #16,A7
                    6088   DisassembleInstruction_4:
                    6089   ; }
                    6090   ; /////////////////////////////////////////////////////////////////////////////////
                    6091   ; // if instruction is ADD or ADDA
                    6092   ; /////////////////////////////////////////////////////////////////////////////////
                    6093   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0xD000))   {
0000372A  2042      6094          move.l    D2,A0
0000372C  3010      6095          move.w    (A0),D0
0000372E  C07C F000 6096          and.w     #61440,D0
00003732  0C40 D000 6097          cmp.w     #53248,D0
00003736  6600 008C 6098          bne       DisassembleInstruction_8
                    6099   ; InstructionSize = 1;
0000373A  24BC 0000 6100          move.l    #1,(A2)
0000373E  0001      
                    6101   ; OpMode = ((*OpCode >> 6) & (unsigned short int)(0x0007)) ;
00003740  2042      6102          move.l    D2,A0
00003742  3010      6103          move.w    (A0),D0
00003744  EC40      6104          asr.w     #6,D0
00003746  C07C 0007 6105          and.w     #7,D0
0000374A  3600      6106          move.w    D0,D3
                    6107   ; if( (OpMode == (unsigned short int)(0x0003)) || (OpMode == (unsigned short int)(0x0007)))      // if destination is an address register then use ADDA otherwise use ADD
0000374C  0C43 0003 6108          cmp.w     #3,D3
00003750  6708      6109          beq.s     DisassembleInstruction_9
00003752  0C43 0007 6110          cmp.w     #7,D3
00003756  6600 005A 6111          bne       DisassembleInstruction_7
                    6112   DisassembleInstruction_9:
                    6113   ; {
                    6114   ; if(OpMode == (unsigned short int)(0x0003))
0000375A  0C43 0003 6115          cmp.w     #3,D3
0000375E  660C      6116          bne.s     DisassembleInstruction_10
                    6117   ; strcpyInstruction("ADDA.W ") ;
00003760  4879 0084 6118          pea       @m68kde~1_235.L
00003764  1A24      
00003766  4E93      6119          jsr       (A3)
00003768  584F      6120          addq.w    #4,A7
0000376A  600A      6121          bra.s     DisassembleInstruction_11
                    6122   DisassembleInstruction_10:
                    6123   ; else
                    6124   ; strcpyInstruction("ADDA.L ") ;
0000376C  4879 0084 6125          pea       @m68kde~1_236.L
00003770  1A2C      
00003772  4E93      6126          jsr       (A3)
00003774  584F      6127          addq.w    #4,A7
                    6128   DisassembleInstruction_11:
                    6129   ; Decode6BitEA(OpCode,0,0,0)  ;
00003776  42A7      6130          clr.l     -(A7)
00003778  42A7      6131          clr.l     -(A7)
0000377A  42A7      6132          clr.l     -(A7)
0000377C  2F02      6133          move.l    D2,-(A7)
0000377E  4EB8 3038 6134          jsr       _Decode6BitEA
00003782  DEFC 0010 6135          add.w     #16,A7
                    6136   ; sprintf(TempString, ",A%X", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
00003786  2042      6137          move.l    D2,A0
00003788  3210      6138          move.w    (A0),D1
0000378A  E041      6139          asr.w     #8,D1
0000378C  E241      6140          asr.w     #1,D1
0000378E  C27C 0007 6141          and.w     #7,D1
00003792  C2BC 0000 6142          and.l     #65535,D1
00003796  FFFF      
00003798  2F01      6143          move.l    D1,-(A7)
0000379A  4879 0084 6144          pea       @m68kde~1_237.L
0000379E  1A34      
000037A0  2F0C      6145          move.l    A4,-(A7)
000037A2  4E95      6146          jsr       (A5)
000037A4  DEFC 000C 6147          add.w     #12,A7
                    6148   ; strcatInstruction(TempString) ;
000037A8  2F0C      6149          move.l    A4,-(A7)
000037AA  4EB8 0CD4 6150          jsr       _strcatInstruction
000037AE  584F      6151          addq.w    #4,A7
000037B0  6012      6152          bra.s     DisassembleInstruction_8
                    6153   DisassembleInstruction_7:
                    6154   ; }
                    6155   ; else {
                    6156   ; strcpyInstruction("ADD") ;
000037B2  4879 0084 6157          pea       @m68kde~1_238.L
000037B6  1A3A      
000037B8  4E93      6158          jsr       (A3)
000037BA  584F      6159          addq.w    #4,A7
                    6160   ; Decode3BitOperandMode(OpCode) ;
000037BC  2F02      6161          move.l    D2,-(A7)
000037BE  4EB8 3460 6162          jsr       _Decode3BitOperandMode
000037C2  584F      6163          addq.w    #4,A7
                    6164   DisassembleInstruction_8:
                    6165   ; }
                    6166   ; }
                    6167   ; /////////////////////////////////////////////////////////////////////////////////
                    6168   ; // if instruction is ADDI or ANDI or CMPI or EORI or ORI or SUBI
                    6169   ; /////////////////////////////////////////////////////////////////////////////////
                    6170   ; if( (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0600) |
000037C4  2042      6171          move.l    D2,A0
000037C6  3010      6172          move.w    (A0),D0
000037C8  C07C FF00 6173          and.w     #65280,D0
000037CC  0C40 0600 6174          cmp.w     #1536,D0
000037D0  6604      6175          bne.s     DisassembleInstruction_14
000037D2  7001      6176          moveq     #1,D0
000037D4  6002      6177          bra.s     DisassembleInstruction_15
                    6178   DisassembleInstruction_14:
000037D6  4280      6179          clr.l     D0
                    6180   DisassembleInstruction_15:
000037D8  2042      6181          move.l    D2,A0
000037DA  3210      6182          move.w    (A0),D1
000037DC  C27C FF00 6183          and.w     #65280,D1
000037E0  0C41 0200 6184          cmp.w     #512,D1
000037E4  6604      6185          bne.s     DisassembleInstruction_16
000037E6  7201      6186          moveq     #1,D1
000037E8  6002      6187          bra.s     DisassembleInstruction_17
                    6188   DisassembleInstruction_16:
000037EA  4281      6189          clr.l     D1
                    6190   DisassembleInstruction_17:
000037EC  8041      6191          or.w      D1,D0
000037EE  2042      6192          move.l    D2,A0
000037F0  3210      6193          move.w    (A0),D1
000037F2  C27C FF00 6194          and.w     #65280,D1
000037F6  0C41 0C00 6195          cmp.w     #3072,D1
000037FA  6604      6196          bne.s     DisassembleInstruction_18
000037FC  7201      6197          moveq     #1,D1
000037FE  6002      6198          bra.s     DisassembleInstruction_19
                    6199   DisassembleInstruction_18:
00003800  4281      6200          clr.l     D1
                    6201   DisassembleInstruction_19:
00003802  8041      6202          or.w      D1,D0
00003804  2042      6203          move.l    D2,A0
00003806  3210      6204          move.w    (A0),D1
00003808  C27C FF00 6205          and.w     #65280,D1
0000380C  0C41 0A00 6206          cmp.w     #2560,D1
00003810  6604      6207          bne.s     DisassembleInstruction_20
00003812  7201      6208          moveq     #1,D1
00003814  6002      6209          bra.s     DisassembleInstruction_21
                    6210   DisassembleInstruction_20:
00003816  4281      6211          clr.l     D1
                    6212   DisassembleInstruction_21:
00003818  8041      6213          or.w      D1,D0
0000381A  2042      6214          move.l    D2,A0
0000381C  3210      6215          move.w    (A0),D1
0000381E  C27C FF00 6216          and.w     #65280,D1
00003822  6604      6217          bne.s     DisassembleInstruction_22
00003824  7201      6218          moveq     #1,D1
00003826  6002      6219          bra.s     DisassembleInstruction_23
                    6220   DisassembleInstruction_22:
00003828  4281      6221          clr.l     D1
                    6222   DisassembleInstruction_23:
0000382A  8041      6223          or.w      D1,D0
0000382C  2042      6224          move.l    D2,A0
0000382E  3210      6225          move.w    (A0),D1
00003830  C27C FF00 6226          and.w     #65280,D1
00003834  0C41 0400 6227          cmp.w     #1024,D1
00003838  6604      6228          bne.s     DisassembleInstruction_24
0000383A  7201      6229          moveq     #1,D1
0000383C  6002      6230          bra.s     DisassembleInstruction_25
                    6231   DisassembleInstruction_24:
0000383E  4281      6232          clr.l     D1
                    6233   DisassembleInstruction_25:
00003840  8041      6234          or.w      D1,D0
00003842  6700 00E4 6235          beq       DisassembleInstruction_12
                    6236   ; (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0200) |
                    6237   ; (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0C00) |
                    6238   ; (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0A00) |
                    6239   ; (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0000) |
                    6240   ; (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0400))
                    6241   ; {
                    6242   ; InstructionSize = 1;
00003846  24BC 0000 6243          move.l    #1,(A2)
0000384A  0001      
                    6244   ; if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0600))
0000384C  2042      6245          move.l    D2,A0
0000384E  3010      6246          move.w    (A0),D0
00003850  C07C FF00 6247          and.w     #65280,D0
00003854  0C40 0600 6248          cmp.w     #1536,D0
00003858  660E      6249          bne.s     DisassembleInstruction_26
                    6250   ; strcpyInstruction("ADDI") ;
0000385A  4879 0084 6251          pea       @m68kde~1_239.L
0000385E  1A3E      
00003860  4E93      6252          jsr       (A3)
00003862  584F      6253          addq.w    #4,A7
00003864  6000 0084 6254          bra       DisassembleInstruction_36
                    6255   DisassembleInstruction_26:
                    6256   ; else if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0200))
00003868  2042      6257          move.l    D2,A0
0000386A  3010      6258          move.w    (A0),D0
0000386C  C07C FF00 6259          and.w     #65280,D0
00003870  0C40 0200 6260          cmp.w     #512,D0
00003874  660E      6261          bne.s     DisassembleInstruction_28
                    6262   ; strcpyInstruction("ANDI") ;
00003876  4879 0084 6263          pea       @m68kde~1_240.L
0000387A  1A44      
0000387C  4E93      6264          jsr       (A3)
0000387E  584F      6265          addq.w    #4,A7
00003880  6000 0068 6266          bra       DisassembleInstruction_36
                    6267   DisassembleInstruction_28:
                    6268   ; else if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0C00))
00003884  2042      6269          move.l    D2,A0
00003886  3010      6270          move.w    (A0),D0
00003888  C07C FF00 6271          and.w     #65280,D0
0000388C  0C40 0C00 6272          cmp.w     #3072,D0
00003890  660E      6273          bne.s     DisassembleInstruction_30
                    6274   ; strcpyInstruction("CMPI") ;
00003892  4879 0084 6275          pea       @m68kde~1_241.L
00003896  1A4A      
00003898  4E93      6276          jsr       (A3)
0000389A  584F      6277          addq.w    #4,A7
0000389C  6000 004C 6278          bra       DisassembleInstruction_36
                    6279   DisassembleInstruction_30:
                    6280   ; else if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0A00))
000038A0  2042      6281          move.l    D2,A0
000038A2  3010      6282          move.w    (A0),D0
000038A4  C07C FF00 6283          and.w     #65280,D0
000038A8  0C40 0A00 6284          cmp.w     #2560,D0
000038AC  660E      6285          bne.s     DisassembleInstruction_32
                    6286   ; strcpyInstruction("EORI") ;
000038AE  4879 0084 6287          pea       @m68kde~1_242.L
000038B2  1A50      
000038B4  4E93      6288          jsr       (A3)
000038B6  584F      6289          addq.w    #4,A7
000038B8  6000 0030 6290          bra       DisassembleInstruction_36
                    6291   DisassembleInstruction_32:
                    6292   ; else if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0000))
000038BC  2042      6293          move.l    D2,A0
000038BE  3010      6294          move.w    (A0),D0
000038C0  C07C FF00 6295          and.w     #65280,D0
000038C4  660C      6296          bne.s     DisassembleInstruction_34
                    6297   ; strcpyInstruction("ORI") ;
000038C6  4879 0084 6298          pea       @m68kde~1_243.L
000038CA  1A56      
000038CC  4E93      6299          jsr       (A3)
000038CE  584F      6300          addq.w    #4,A7
000038D0  6018      6301          bra.s     DisassembleInstruction_36
                    6302   DisassembleInstruction_34:
                    6303   ; else if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0400))
000038D2  2042      6304          move.l    D2,A0
000038D4  3010      6305          move.w    (A0),D0
000038D6  C07C FF00 6306          and.w     #65280,D0
000038DA  0C40 0400 6307          cmp.w     #1024,D0
000038DE  660A      6308          bne.s     DisassembleInstruction_36
                    6309   ; strcpyInstruction("SUBI") ;
000038E0  4879 0084 6310          pea       @m68kde~1_244.L
000038E4  1A5A      
000038E6  4E93      6311          jsr       (A3)
000038E8  584F      6312          addq.w    #4,A7
                    6313   DisassembleInstruction_36:
                    6314   ; DataSize = Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
000038EA  2042      6315          move.l    D2,A0
000038EC  3210      6316          move.w    (A0),D1
000038EE  C2BC 0000 6317          and.l     #65535,D1
000038F2  FFFF      
000038F4  2F01      6318          move.l    D1,-(A7)
000038F6  4EB8 2DA4 6319          jsr       _Decode2BitOperandSize
000038FA  584F      6320          addq.w    #4,A7
000038FC  3E00      6321          move.w    D0,D7
                    6322   ; DecodeBWLDataAfterOpCode(OpCode);                                // go add the 8,16,32 bit data to instruction string
000038FE  2F02      6323          move.l    D2,-(A7)
00003900  4EB8 2F28 6324          jsr       _DecodeBWLDataAfterOpCode
00003904  584F      6325          addq.w    #4,A7
                    6326   ; strcatInstruction(",") ;
00003906  4879 0084 6327          pea       @m68kde~1_245.L
0000390A  1A60      
0000390C  4EB8 0CD4 6328          jsr       _strcatInstruction
00003910  584F      6329          addq.w    #4,A7
                    6330   ; Decode6BitEA(OpCode,0,DataSize,0) ;                                         // decode EA
00003912  42A7      6331          clr.l     -(A7)
00003914  CEBC 0000 6332          and.l     #65535,D7
00003918  FFFF      
0000391A  2F07      6333          move.l    D7,-(A7)
0000391C  42A7      6334          clr.l     -(A7)
0000391E  2F02      6335          move.l    D2,-(A7)
00003920  4EB8 3038 6336          jsr       _Decode6BitEA
00003924  DEFC 0010 6337          add.w     #16,A7
                    6338   DisassembleInstruction_12:
                    6339   ; }
                    6340   ; /////////////////////////////////////////////////////////////////////////////////
                    6341   ; // if instruction is ADDI #data,SR
                    6342   ; /////////////////////////////////////////////////////////////////////////////////
                    6343   ; if(*OpCode  == (unsigned short int)(0x027c))   {
00003928  2042      6344          move.l    D2,A0
0000392A  3010      6345          move.w    (A0),D0
0000392C  0C40 027C 6346          cmp.w     #636,D0
00003930  6622      6347          bne.s     DisassembleInstruction_38
                    6348   ; InstructionSize = 2;
00003932  24BC 0000 6349          move.l    #2,(A2)
00003936  0002      
                    6350   ; sprintf(Instruction, "ANDI #$%X,SR", OpCode[1]);
00003938  2042      6351          move.l    D2,A0
0000393A  3228 0002 6352          move.w    2(A0),D1
0000393E  48C1      6353          ext.l     D1
00003940  2F01      6354          move.l    D1,-(A7)
00003942  4879 0084 6355          pea       @m68kde~1_246.L
00003946  1A62      
00003948  4879 0084 6356          pea       _Instruction.L
0000394C  04DC      
0000394E  4E95      6357          jsr       (A5)
00003950  DEFC 000C 6358          add.w     #12,A7
                    6359   DisassembleInstruction_38:
                    6360   ; }
                    6361   ; /////////////////////////////////////////////////////////////////////////////////
                    6362   ; // if instruction is ADDQ
                    6363   ; /////////////////////////////////////////////////////////////////////////////////
                    6364   ; if((*OpCode & (unsigned short int)(0xF100 )) == (unsigned short int)(0x5000))   {
00003954  2042      6365          move.l    D2,A0
00003956  3010      6366          move.w    (A0),D0
00003958  C07C F100 6367          and.w     #61696,D0
0000395C  0C40 5000 6368          cmp.w     #20480,D0
00003960  6600 005E 6369          bne       DisassembleInstruction_40
                    6370   ; InstructionSize = 1;
00003964  24BC 0000 6371          move.l    #1,(A2)
00003968  0001      
                    6372   ; strcpyInstruction("ADDQ") ;
0000396A  4879 0084 6373          pea       @m68kde~1_247.L
0000396E  1A70      
00003970  4E93      6374          jsr       (A3)
00003972  584F      6375          addq.w    #4,A7
                    6376   ; Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
00003974  2042      6377          move.l    D2,A0
00003976  3210      6378          move.w    (A0),D1
00003978  C2BC 0000 6379          and.l     #65535,D1
0000397C  FFFF      
0000397E  2F01      6380          move.l    D1,-(A7)
00003980  4EB8 2DA4 6381          jsr       _Decode2BitOperandSize
00003984  584F      6382          addq.w    #4,A7
                    6383   ; sprintf(TempString, "#%1X,", ((*OpCode >> 9) & (unsigned short int)(0x0007)));    // print 3 bit #data in positions 11,10,9 in opcode
00003986  2042      6384          move.l    D2,A0
00003988  3210      6385          move.w    (A0),D1
0000398A  E041      6386          asr.w     #8,D1
0000398C  E241      6387          asr.w     #1,D1
0000398E  C27C 0007 6388          and.w     #7,D1
00003992  C2BC 0000 6389          and.l     #65535,D1
00003996  FFFF      
00003998  2F01      6390          move.l    D1,-(A7)
0000399A  4879 0084 6391          pea       @m68kde~1_248.L
0000399E  1A76      
000039A0  2F0C      6392          move.l    A4,-(A7)
000039A2  4E95      6393          jsr       (A5)
000039A4  DEFC 000C 6394          add.w     #12,A7
                    6395   ; strcatInstruction(TempString) ;
000039A8  2F0C      6396          move.l    A4,-(A7)
000039AA  4EB8 0CD4 6397          jsr       _strcatInstruction
000039AE  584F      6398          addq.w    #4,A7
                    6399   ; Decode6BitEA(OpCode,0,0,0) ;                                           // decode EA
000039B0  42A7      6400          clr.l     -(A7)
000039B2  42A7      6401          clr.l     -(A7)
000039B4  42A7      6402          clr.l     -(A7)
000039B6  2F02      6403          move.l    D2,-(A7)
000039B8  4EB8 3038 6404          jsr       _Decode6BitEA
000039BC  DEFC 0010 6405          add.w     #16,A7
                    6406   DisassembleInstruction_40:
                    6407   ; }
                    6408   ; /////////////////////////////////////////////////////////////////////////////////
                    6409   ; // if instruction is ADDX
                    6410   ; /////////////////////////////////////////////////////////////////////////////////
                    6411   ; if((*OpCode & (unsigned short int)(0xF130 )) == (unsigned short int)(0xD100))   {
000039C0  2042      6412          move.l    D2,A0
000039C2  3010      6413          move.w    (A0),D0
000039C4  C07C F130 6414          and.w     #61744,D0
000039C8  0C40 D100 6415          cmp.w     #53504,D0
000039CC  6600 00A4 6416          bne       DisassembleInstruction_44
                    6417   ; InstructionSize = 1;
000039D0  24BC 0000 6418          move.l    #1,(A2)
000039D4  0001      
                    6419   ; OpMode = ((*OpCode >> 6) & (unsigned short int)(0x0003)) ;
000039D6  2042      6420          move.l    D2,A0
000039D8  3010      6421          move.w    (A0),D0
000039DA  EC40      6422          asr.w     #6,D0
000039DC  C07C 0003 6423          and.w     #3,D0
000039E0  3600      6424          move.w    D0,D3
                    6425   ; if(OpMode != (unsigned short int)(0x0003)) // if size = 11 then it's ADDA not ADDX
000039E2  0C43 0003 6426          cmp.w     #3,D3
000039E6  6700 008A 6427          beq       DisassembleInstruction_44
                    6428   ; {
                    6429   ; strcpyInstruction("ADDX") ;
000039EA  4879 0084 6430          pea       @m68kde~1_249.L
000039EE  1A7C      
000039F0  4E93      6431          jsr       (A3)
000039F2  584F      6432          addq.w    #4,A7
                    6433   ; Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
000039F4  2042      6434          move.l    D2,A0
000039F6  3210      6435          move.w    (A0),D1
000039F8  C2BC 0000 6436          and.l     #65535,D1
000039FC  FFFF      
000039FE  2F01      6437          move.l    D1,-(A7)
00003A00  4EB8 2DA4 6438          jsr       _Decode2BitOperandSize
00003A04  584F      6439          addq.w    #4,A7
                    6440   ; if((*OpCode & (unsigned short int)(0x0008)) == (unsigned short int)(0))    // if bit 3 of opcode is 0 indicates data registers are used as source and destination
00003A06  2042      6441          move.l    D2,A0
00003A08  3010      6442          move.w    (A0),D0
00003A0A  C07C 0008 6443          and.w     #8,D0
00003A0E  6600 0030 6444          bne       DisassembleInstruction_46
                    6445   ; sprintf(TempString, "D%X,D%X", (*OpCode & 0x0007), ((*OpCode >> 9) & 0x0007)) ;
00003A12  2042      6446          move.l    D2,A0
00003A14  3210      6447          move.w    (A0),D1
00003A16  E041      6448          asr.w     #8,D1
00003A18  E241      6449          asr.w     #1,D1
00003A1A  C27C 0007 6450          and.w     #7,D1
00003A1E  48C1      6451          ext.l     D1
00003A20  2F01      6452          move.l    D1,-(A7)
00003A22  2042      6453          move.l    D2,A0
00003A24  3210      6454          move.w    (A0),D1
00003A26  C27C 0007 6455          and.w     #7,D1
00003A2A  48C1      6456          ext.l     D1
00003A2C  2F01      6457          move.l    D1,-(A7)
00003A2E  4879 0084 6458          pea       @m68kde~1_250.L
00003A32  1A82      
00003A34  2F0C      6459          move.l    A4,-(A7)
00003A36  4E95      6460          jsr       (A5)
00003A38  DEFC 0010 6461          add.w     #16,A7
00003A3C  6000 002C 6462          bra       DisassembleInstruction_47
                    6463   DisassembleInstruction_46:
                    6464   ; else        // -(ax),-(ay) mode used
                    6465   ; sprintf(TempString, "-(A%X),-(A%X)", (*OpCode & 0x0007), ((*OpCode >> 9) & 0x0007)) ;
00003A40  2042      6466          move.l    D2,A0
00003A42  3210      6467          move.w    (A0),D1
00003A44  E041      6468          asr.w     #8,D1
00003A46  E241      6469          asr.w     #1,D1
00003A48  C27C 0007 6470          and.w     #7,D1
00003A4C  48C1      6471          ext.l     D1
00003A4E  2F01      6472          move.l    D1,-(A7)
00003A50  2042      6473          move.l    D2,A0
00003A52  3210      6474          move.w    (A0),D1
00003A54  C27C 0007 6475          and.w     #7,D1
00003A58  48C1      6476          ext.l     D1
00003A5A  2F01      6477          move.l    D1,-(A7)
00003A5C  4879 0084 6478          pea       @m68kde~1_251.L
00003A60  1A8A      
00003A62  2F0C      6479          move.l    A4,-(A7)
00003A64  4E95      6480          jsr       (A5)
00003A66  DEFC 0010 6481          add.w     #16,A7
                    6482   DisassembleInstruction_47:
                    6483   ; strcatInstruction(TempString) ;
00003A6A  2F0C      6484          move.l    A4,-(A7)
00003A6C  4EB8 0CD4 6485          jsr       _strcatInstruction
00003A70  584F      6486          addq.w    #4,A7
                    6487   DisassembleInstruction_44:
                    6488   ; }
                    6489   ; }
                    6490   ; /////////////////////////////////////////////////////////////////////////////////
                    6491   ; // if instruction is AND
                    6492   ; /////////////////////////////////////////////////////////////////////////////////
                    6493   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0xC000))   {
00003A72  2042      6494          move.l    D2,A0
00003A74  3010      6495          move.w    (A0),D0
00003A76  C07C F000 6496          and.w     #61440,D0
00003A7A  0C40 C000 6497          cmp.w     #49152,D0
00003A7E  662A      6498          bne.s     DisassembleInstruction_50
                    6499   ; InstructionSize = 1;
00003A80  24BC 0000 6500          move.l    #1,(A2)
00003A84  0001      
                    6501   ; // need to differentiate between AND and ABCD using Mode bits in 5,4,3
                    6502   ; OpMode = (*OpCode >> 4) & (unsigned short int)(0x001F);
00003A86  2042      6503          move.l    D2,A0
00003A88  3010      6504          move.w    (A0),D0
00003A8A  E840      6505          asr.w     #4,D0
00003A8C  C07C 001F 6506          and.w     #31,D0
00003A90  3600      6507          move.w    D0,D3
                    6508   ; if(OpMode != (unsigned short int)(0x0010))   {
00003A92  0C43 0010 6509          cmp.w     #16,D3
00003A96  6712      6510          beq.s     DisassembleInstruction_50
                    6511   ; strcpyInstruction("AND") ;
00003A98  4879 0084 6512          pea       @m68kde~1_252.L
00003A9C  1A98      
00003A9E  4E93      6513          jsr       (A3)
00003AA0  584F      6514          addq.w    #4,A7
                    6515   ; Decode3BitOperandMode(OpCode) ;
00003AA2  2F02      6516          move.l    D2,-(A7)
00003AA4  4EB8 3460 6517          jsr       _Decode3BitOperandMode
00003AA8  584F      6518          addq.w    #4,A7
                    6519   DisassembleInstruction_50:
                    6520   ; }
                    6521   ; }
                    6522   ; /////////////////////////////////////////////////////////////////////////////////
                    6523   ; // if instruction is ANDI to CCR
                    6524   ; /////////////////////////////////////////////////////////////////////////////////
                    6525   ; if(*OpCode == (unsigned short int)(0x023C))   {
00003AAA  2042      6526          move.l    D2,A0
00003AAC  3010      6527          move.w    (A0),D0
00003AAE  0C40 023C 6528          cmp.w     #572,D0
00003AB2  662A      6529          bne.s     DisassembleInstruction_52
                    6530   ; sprintf(Instruction, "ANDI #$%2X,CCR", OpCode[1] & (unsigned short int)(0x00FF)) ;
00003AB4  2042      6531          move.l    D2,A0
00003AB6  3228 0002 6532          move.w    2(A0),D1
00003ABA  C27C 00FF 6533          and.w     #255,D1
00003ABE  C2BC 0000 6534          and.l     #65535,D1
00003AC2  FFFF      
00003AC4  2F01      6535          move.l    D1,-(A7)
00003AC6  4879 0084 6536          pea       @m68kde~1_253.L
00003ACA  1A9C      
00003ACC  4879 0084 6537          pea       _Instruction.L
00003AD0  04DC      
00003AD2  4E95      6538          jsr       (A5)
00003AD4  DEFC 000C 6539          add.w     #12,A7
                    6540   ; InstructionSize = 2;
00003AD8  24BC 0000 6541          move.l    #2,(A2)
00003ADC  0002      
                    6542   DisassembleInstruction_52:
                    6543   ; }
                    6544   ; /////////////////////////////////////////////////////////////////////////////////
                    6545   ; // if instruction is ASL/ASR/LSL/LSR/ROL/ROR NOTE two versions of this with different OPCodes
                    6546   ; /////////////////////////////////////////////////////////////////////////////////
                    6547   ; if( ((*OpCode & (unsigned short int)(0xF018 )) == (unsigned short int)(0xE000)) |   // ASL/ASR
00003ADE  2042      6548          move.l    D2,A0
00003AE0  3010      6549          move.w    (A0),D0
00003AE2  C07C F018 6550          and.w     #61464,D0
00003AE6  0C40 E000 6551          cmp.w     #57344,D0
00003AEA  6604      6552          bne.s     DisassembleInstruction_56
00003AEC  7001      6553          moveq     #1,D0
00003AEE  6002      6554          bra.s     DisassembleInstruction_57
                    6555   DisassembleInstruction_56:
00003AF0  4280      6556          clr.l     D0
                    6557   DisassembleInstruction_57:
00003AF2  2042      6558          move.l    D2,A0
00003AF4  3210      6559          move.w    (A0),D1
00003AF6  C27C FEC0 6560          and.w     #65216,D1
00003AFA  0C41 E0C0 6561          cmp.w     #57536,D1
00003AFE  6604      6562          bne.s     DisassembleInstruction_58
00003B00  7201      6563          moveq     #1,D1
00003B02  6002      6564          bra.s     DisassembleInstruction_59
                    6565   DisassembleInstruction_58:
00003B04  4281      6566          clr.l     D1
                    6567   DisassembleInstruction_59:
00003B06  8041      6568          or.w      D1,D0
00003B08  2042      6569          move.l    D2,A0
00003B0A  3210      6570          move.w    (A0),D1
00003B0C  C27C F018 6571          and.w     #61464,D1
00003B10  0C41 E008 6572          cmp.w     #57352,D1
00003B14  6604      6573          bne.s     DisassembleInstruction_60
00003B16  7201      6574          moveq     #1,D1
00003B18  6002      6575          bra.s     DisassembleInstruction_61
                    6576   DisassembleInstruction_60:
00003B1A  4281      6577          clr.l     D1
                    6578   DisassembleInstruction_61:
00003B1C  8041      6579          or.w      D1,D0
00003B1E  2042      6580          move.l    D2,A0
00003B20  3210      6581          move.w    (A0),D1
00003B22  C27C FEC0 6582          and.w     #65216,D1
00003B26  0C41 E2C0 6583          cmp.w     #58048,D1
00003B2A  6604      6584          bne.s     DisassembleInstruction_62
00003B2C  7201      6585          moveq     #1,D1
00003B2E  6002      6586          bra.s     DisassembleInstruction_63
                    6587   DisassembleInstruction_62:
00003B30  4281      6588          clr.l     D1
                    6589   DisassembleInstruction_63:
00003B32  8041      6590          or.w      D1,D0
00003B34  2042      6591          move.l    D2,A0
00003B36  3210      6592          move.w    (A0),D1
00003B38  C27C F018 6593          and.w     #61464,D1
00003B3C  0C41 E018 6594          cmp.w     #57368,D1
00003B40  6604      6595          bne.s     DisassembleInstruction_64
00003B42  7201      6596          moveq     #1,D1
00003B44  6002      6597          bra.s     DisassembleInstruction_65
                    6598   DisassembleInstruction_64:
00003B46  4281      6599          clr.l     D1
                    6600   DisassembleInstruction_65:
00003B48  8041      6601          or.w      D1,D0
00003B4A  2042      6602          move.l    D2,A0
00003B4C  3210      6603          move.w    (A0),D1
00003B4E  C27C FEC0 6604          and.w     #65216,D1
00003B52  0C41 E6C0 6605          cmp.w     #59072,D1
00003B56  6604      6606          bne.s     DisassembleInstruction_66
00003B58  7201      6607          moveq     #1,D1
00003B5A  6002      6608          bra.s     DisassembleInstruction_67
                    6609   DisassembleInstruction_66:
00003B5C  4281      6610          clr.l     D1
                    6611   DisassembleInstruction_67:
00003B5E  8041      6612          or.w      D1,D0
00003B60  2042      6613          move.l    D2,A0
00003B62  3210      6614          move.w    (A0),D1
00003B64  C27C F018 6615          and.w     #61464,D1
00003B68  0C41 E010 6616          cmp.w     #57360,D1
00003B6C  6604      6617          bne.s     DisassembleInstruction_68
00003B6E  7201      6618          moveq     #1,D1
00003B70  6002      6619          bra.s     DisassembleInstruction_69
                    6620   DisassembleInstruction_68:
00003B72  4281      6621          clr.l     D1
                    6622   DisassembleInstruction_69:
00003B74  8041      6623          or.w      D1,D0
00003B76  2042      6624          move.l    D2,A0
00003B78  3210      6625          move.w    (A0),D1
00003B7A  C27C FEC0 6626          and.w     #65216,D1
00003B7E  0C41 E4C0 6627          cmp.w     #58560,D1
00003B82  6604      6628          bne.s     DisassembleInstruction_70
00003B84  7201      6629          moveq     #1,D1
00003B86  6002      6630          bra.s     DisassembleInstruction_71
                    6631   DisassembleInstruction_70:
00003B88  4281      6632          clr.l     D1
                    6633   DisassembleInstruction_71:
00003B8A  8041      6634          or.w      D1,D0
00003B8C  6700 0252 6635          beq       DisassembleInstruction_73
                    6636   ; ((*OpCode & (unsigned short int)(0xFEC0 )) == (unsigned short int)(0xE0C0)) |
                    6637   ; ((*OpCode & (unsigned short int)(0xF018 )) == (unsigned short int)(0xE008)) |   // LSL/LSR
                    6638   ; ((*OpCode & (unsigned short int)(0xFEC0 )) == (unsigned short int)(0xE2C0)) |
                    6639   ; ((*OpCode & (unsigned short int)(0xF018 )) == (unsigned short int)(0xE018)) |   // ROR/ROL
                    6640   ; ((*OpCode & (unsigned short int)(0xFEC0 )) == (unsigned short int)(0xE6C0)) |
                    6641   ; ((*OpCode & (unsigned short int)(0xF018 )) == (unsigned short int)(0xE010)) |   // ROXR/ROXL
                    6642   ; ((*OpCode & (unsigned short int)(0xFEC0 )) == (unsigned short int)(0xE4C0)))
                    6643   ; {
                    6644   ; InstructionSize = 1;
00003B90  24BC 0000 6645          move.l    #1,(A2)
00003B94  0001      
                    6646   ; // 2nd version e.g. ASR/ASL/LSR/LSL/ROR/ROL/ROXL/ROXR <EA> shift a word 1 bit
                    6647   ; if((*OpCode & (unsigned short int)(0x00C0)) == (unsigned short int)(0x00C0)) // if bits 7,6 == 1,1
00003B96  2042      6648          move.l    D2,A0
00003B98  3010      6649          move.w    (A0),D0
00003B9A  C07C 00C0 6650          and.w     #192,D0
00003B9E  0C40 00C0 6651          cmp.w     #192,D0
00003BA2  6600 00EA 6652          bne       DisassembleInstruction_72
                    6653   ; {
                    6654   ; // test direction by testing bit 8
                    6655   ; if((*OpCode & (unsigned short int)(0xFEC0)) == (unsigned short int)(0xE0C0))    //asr/asl
00003BA6  2042      6656          move.l    D2,A0
00003BA8  3010      6657          move.w    (A0),D0
00003BAA  C07C FEC0 6658          and.w     #65216,D0
00003BAE  0C40 E0C0 6659          cmp.w     #57536,D0
00003BB2  6624      6660          bne.s     DisassembleInstruction_77
                    6661   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003BB4  2042      6662          move.l    D2,A0
00003BB6  3010      6663          move.w    (A0),D0
00003BB8  C07C 0100 6664          and.w     #256,D0
00003BBC  0C40 0100 6665          cmp.w     #256,D0
00003BC0  660C      6666          bne.s     DisassembleInstruction_76
                    6667   ; strcpyInstruction("ASL") ;
00003BC2  4879 0084 6668          pea       @m68kde~1_254.L
00003BC6  1AAC      
00003BC8  4E93      6669          jsr       (A3)
00003BCA  584F      6670          addq.w    #4,A7
00003BCC  600A      6671          bra.s     DisassembleInstruction_77
                    6672   DisassembleInstruction_76:
                    6673   ; else
                    6674   ; strcpyInstruction("ASR") ;
00003BCE  4879 0084 6675          pea       @m68kde~1_255.L
00003BD2  1AB0      
00003BD4  4E93      6676          jsr       (A3)
00003BD6  584F      6677          addq.w    #4,A7
                    6678   DisassembleInstruction_77:
                    6679   ; // test direction by testing bit 8
                    6680   ; if((*OpCode & (unsigned short int)(0xFEC0)) == (unsigned short int)(0xE2C0))    //lsr/lsl
00003BD8  2042      6681          move.l    D2,A0
00003BDA  3010      6682          move.w    (A0),D0
00003BDC  C07C FEC0 6683          and.w     #65216,D0
00003BE0  0C40 E2C0 6684          cmp.w     #58048,D0
00003BE4  6624      6685          bne.s     DisassembleInstruction_81
                    6686   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003BE6  2042      6687          move.l    D2,A0
00003BE8  3010      6688          move.w    (A0),D0
00003BEA  C07C 0100 6689          and.w     #256,D0
00003BEE  0C40 0100 6690          cmp.w     #256,D0
00003BF2  660C      6691          bne.s     DisassembleInstruction_80
                    6692   ; strcpyInstruction("LSL") ;
00003BF4  4879 0084 6693          pea       @m68kde~1_256.L
00003BF8  1AB4      
00003BFA  4E93      6694          jsr       (A3)
00003BFC  584F      6695          addq.w    #4,A7
00003BFE  600A      6696          bra.s     DisassembleInstruction_81
                    6697   DisassembleInstruction_80:
                    6698   ; else
                    6699   ; strcpyInstruction("LSR") ;
00003C00  4879 0084 6700          pea       @m68kde~1_257.L
00003C04  1AB8      
00003C06  4E93      6701          jsr       (A3)
00003C08  584F      6702          addq.w    #4,A7
                    6703   DisassembleInstruction_81:
                    6704   ; // test direction by testing bit 8
                    6705   ; if((*OpCode & (unsigned short int)(0xFEC0)) == (unsigned short int)(0xE6C0))    //ror/rol
00003C0A  2042      6706          move.l    D2,A0
00003C0C  3010      6707          move.w    (A0),D0
00003C0E  C07C FEC0 6708          and.w     #65216,D0
00003C12  0C40 E6C0 6709          cmp.w     #59072,D0
00003C16  6624      6710          bne.s     DisassembleInstruction_85
                    6711   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003C18  2042      6712          move.l    D2,A0
00003C1A  3010      6713          move.w    (A0),D0
00003C1C  C07C 0100 6714          and.w     #256,D0
00003C20  0C40 0100 6715          cmp.w     #256,D0
00003C24  660C      6716          bne.s     DisassembleInstruction_84
                    6717   ; strcpyInstruction("ROL") ;
00003C26  4879 0084 6718          pea       @m68kde~1_258.L
00003C2A  1ABC      
00003C2C  4E93      6719          jsr       (A3)
00003C2E  584F      6720          addq.w    #4,A7
00003C30  600A      6721          bra.s     DisassembleInstruction_85
                    6722   DisassembleInstruction_84:
                    6723   ; else
                    6724   ; strcpyInstruction("ROR") ;
00003C32  4879 0084 6725          pea       @m68kde~1_259.L
00003C36  1AC0      
00003C38  4E93      6726          jsr       (A3)
00003C3A  584F      6727          addq.w    #4,A7
                    6728   DisassembleInstruction_85:
                    6729   ; // test direction by testing bit 8
                    6730   ; if((*OpCode & (unsigned short int)(0xFEC0)) == (unsigned short int)(0xE4C0))    //roxr/roxl
00003C3C  2042      6731          move.l    D2,A0
00003C3E  3010      6732          move.w    (A0),D0
00003C40  C07C FEC0 6733          and.w     #65216,D0
00003C44  0C40 E4C0 6734          cmp.w     #58560,D0
00003C48  6624      6735          bne.s     DisassembleInstruction_89
                    6736   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003C4A  2042      6737          move.l    D2,A0
00003C4C  3010      6738          move.w    (A0),D0
00003C4E  C07C 0100 6739          and.w     #256,D0
00003C52  0C40 0100 6740          cmp.w     #256,D0
00003C56  660C      6741          bne.s     DisassembleInstruction_88
                    6742   ; strcpyInstruction("ROXL") ;
00003C58  4879 0084 6743          pea       @m68kde~1_260.L
00003C5C  1AC4      
00003C5E  4E93      6744          jsr       (A3)
00003C60  584F      6745          addq.w    #4,A7
00003C62  600A      6746          bra.s     DisassembleInstruction_89
                    6747   DisassembleInstruction_88:
                    6748   ; else
                    6749   ; strcpyInstruction("ROXR") ;
00003C64  4879 0084 6750          pea       @m68kde~1_261.L
00003C68  1ACA      
00003C6A  4E93      6751          jsr       (A3)
00003C6C  584F      6752          addq.w    #4,A7
                    6753   DisassembleInstruction_89:
                    6754   ; strcatInstruction("  ") ;
00003C6E  4879 0084 6755          pea       @m68kde~1_262.L
00003C72  1AD0      
00003C74  4EB8 0CD4 6756          jsr       _strcatInstruction
00003C78  584F      6757          addq.w    #4,A7
                    6758   ; Decode6BitEA(OpCode,0, 0,0) ;
00003C7A  42A7      6759          clr.l     -(A7)
00003C7C  42A7      6760          clr.l     -(A7)
00003C7E  42A7      6761          clr.l     -(A7)
00003C80  2F02      6762          move.l    D2,-(A7)
00003C82  4EB8 3038 6763          jsr       _Decode6BitEA
00003C86  DEFC 0010 6764          add.w     #16,A7
00003C8A  6000 0154 6765          bra       DisassembleInstruction_73
                    6766   DisassembleInstruction_72:
                    6767   ; }
                    6768   ; // first version of above instructions, bit 5 is 0
                    6769   ; else
                    6770   ; {
                    6771   ; // test instruction and direction by testing bits 4,3
                    6772   ; if((*OpCode & (unsigned short int)(0x0018)) == (unsigned short int)(0x0))    //asr/asl
00003C8E  2042      6773          move.l    D2,A0
00003C90  3010      6774          move.w    (A0),D0
00003C92  C07C 0018 6775          and.w     #24,D0
00003C96  6624      6776          bne.s     DisassembleInstruction_93
                    6777   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003C98  2042      6778          move.l    D2,A0
00003C9A  3010      6779          move.w    (A0),D0
00003C9C  C07C 0100 6780          and.w     #256,D0
00003CA0  0C40 0100 6781          cmp.w     #256,D0
00003CA4  660C      6782          bne.s     DisassembleInstruction_92
                    6783   ; strcpyInstruction("ASL") ;
00003CA6  4879 0084 6784          pea       @m68kde~1_263.L
00003CAA  1AD4      
00003CAC  4E93      6785          jsr       (A3)
00003CAE  584F      6786          addq.w    #4,A7
00003CB0  600A      6787          bra.s     DisassembleInstruction_93
                    6788   DisassembleInstruction_92:
                    6789   ; else
                    6790   ; strcpyInstruction("ASR") ;
00003CB2  4879 0084 6791          pea       @m68kde~1_264.L
00003CB6  1AD8      
00003CB8  4E93      6792          jsr       (A3)
00003CBA  584F      6793          addq.w    #4,A7
                    6794   DisassembleInstruction_93:
                    6795   ; // test instruction and direction by testing bits 4,3
                    6796   ; if((*OpCode & (unsigned short int)(0x0018)) == (unsigned short int)(0x0008))    //lsr/lsl
00003CBC  2042      6797          move.l    D2,A0
00003CBE  3010      6798          move.w    (A0),D0
00003CC0  C07C 0018 6799          and.w     #24,D0
00003CC4  0C40 0008 6800          cmp.w     #8,D0
00003CC8  6624      6801          bne.s     DisassembleInstruction_97
                    6802   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003CCA  2042      6803          move.l    D2,A0
00003CCC  3010      6804          move.w    (A0),D0
00003CCE  C07C 0100 6805          and.w     #256,D0
00003CD2  0C40 0100 6806          cmp.w     #256,D0
00003CD6  660C      6807          bne.s     DisassembleInstruction_96
                    6808   ; strcpyInstruction("LSL") ;
00003CD8  4879 0084 6809          pea       @m68kde~1_265.L
00003CDC  1ADC      
00003CDE  4E93      6810          jsr       (A3)
00003CE0  584F      6811          addq.w    #4,A7
00003CE2  600A      6812          bra.s     DisassembleInstruction_97
                    6813   DisassembleInstruction_96:
                    6814   ; else
                    6815   ; strcpyInstruction("LSR") ;
00003CE4  4879 0084 6816          pea       @m68kde~1_266.L
00003CE8  1AE0      
00003CEA  4E93      6817          jsr       (A3)
00003CEC  584F      6818          addq.w    #4,A7
                    6819   DisassembleInstruction_97:
                    6820   ; // test instruction and direction by testing bits 4,3
                    6821   ; if((*OpCode & (unsigned short int)(0x0018)) == (unsigned short int)(0x0018))    //ror/rol
00003CEE  2042      6822          move.l    D2,A0
00003CF0  3010      6823          move.w    (A0),D0
00003CF2  C07C 0018 6824          and.w     #24,D0
00003CF6  0C40 0018 6825          cmp.w     #24,D0
00003CFA  6624      6826          bne.s     DisassembleInstruction_101
                    6827   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003CFC  2042      6828          move.l    D2,A0
00003CFE  3010      6829          move.w    (A0),D0
00003D00  C07C 0100 6830          and.w     #256,D0
00003D04  0C40 0100 6831          cmp.w     #256,D0
00003D08  660C      6832          bne.s     DisassembleInstruction_100
                    6833   ; strcpyInstruction("ROL") ;
00003D0A  4879 0084 6834          pea       @m68kde~1_267.L
00003D0E  1AE4      
00003D10  4E93      6835          jsr       (A3)
00003D12  584F      6836          addq.w    #4,A7
00003D14  600A      6837          bra.s     DisassembleInstruction_101
                    6838   DisassembleInstruction_100:
                    6839   ; else
                    6840   ; strcpyInstruction("ROR") ;
00003D16  4879 0084 6841          pea       @m68kde~1_268.L
00003D1A  1AE8      
00003D1C  4E93      6842          jsr       (A3)
00003D1E  584F      6843          addq.w    #4,A7
                    6844   DisassembleInstruction_101:
                    6845   ; // test instruction and direction by testing bits 4,3
                    6846   ; if((*OpCode & (unsigned short int)(0x0018)) == (unsigned short int)(0x0010))    //roxr/roxl
00003D20  2042      6847          move.l    D2,A0
00003D22  3010      6848          move.w    (A0),D0
00003D24  C07C 0018 6849          and.w     #24,D0
00003D28  0C40 0010 6850          cmp.w     #16,D0
00003D2C  6624      6851          bne.s     DisassembleInstruction_105
                    6852   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003D2E  2042      6853          move.l    D2,A0
00003D30  3010      6854          move.w    (A0),D0
00003D32  C07C 0100 6855          and.w     #256,D0
00003D36  0C40 0100 6856          cmp.w     #256,D0
00003D3A  660C      6857          bne.s     DisassembleInstruction_104
                    6858   ; strcpyInstruction("ROXL") ;
00003D3C  4879 0084 6859          pea       @m68kde~1_269.L
00003D40  1AEC      
00003D42  4E93      6860          jsr       (A3)
00003D44  584F      6861          addq.w    #4,A7
00003D46  600A      6862          bra.s     DisassembleInstruction_105
                    6863   DisassembleInstruction_104:
                    6864   ; else
                    6865   ; strcpyInstruction("ROXR") ;
00003D48  4879 0084 6866          pea       @m68kde~1_270.L
00003D4C  1AF2      
00003D4E  4E93      6867          jsr       (A3)
00003D50  584F      6868          addq.w    #4,A7
                    6869   DisassembleInstruction_105:
                    6870   ; Decode2BitOperandSize(*OpCode) ;
00003D52  2042      6871          move.l    D2,A0
00003D54  3210      6872          move.w    (A0),D1
00003D56  C2BC 0000 6873          and.l     #65535,D1
00003D5A  FFFF      
00003D5C  2F01      6874          move.l    D1,-(A7)
00003D5E  4EB8 2DA4 6875          jsr       _Decode2BitOperandSize
00003D62  584F      6876          addq.w    #4,A7
                    6877   ; if((*OpCode & (unsigned short int)(0x0020)) == (unsigned short int)(0)) {   // if shift count defined by #value (bit 5 = 0), e.g. asl #3,d0
00003D64  2042      6878          move.l    D2,A0
00003D66  3010      6879          move.w    (A0),D0
00003D68  C07C 0020 6880          and.w     #32,D0
00003D6C  6600 0038 6881          bne       DisassembleInstruction_106
                    6882   ; sprintf(TempString,"#$%X,D%X",
00003D70  2042      6883          move.l    D2,A0
00003D72  3210      6884          move.w    (A0),D1
00003D74  C27C 0007 6885          and.w     #7,D1
00003D78  C2BC 0000 6886          and.l     #65535,D1
00003D7C  FFFF      
00003D7E  2F01      6887          move.l    D1,-(A7)
00003D80  2042      6888          move.l    D2,A0
00003D82  3210      6889          move.w    (A0),D1
00003D84  E041      6890          asr.w     #8,D1
00003D86  E241      6891          asr.w     #1,D1
00003D88  C27C 0007 6892          and.w     #7,D1
00003D8C  C2BC 0000 6893          and.l     #65535,D1
00003D90  FFFF      
00003D92  2F01      6894          move.l    D1,-(A7)
00003D94  4879 0084 6895          pea       @m68kde~1_271.L
00003D98  1AF8      
00003D9A  2F0C      6896          move.l    A4,-(A7)
00003D9C  4E95      6897          jsr       (A5)
00003D9E  DEFC 0010 6898          add.w     #16,A7
00003DA2  6000 0034 6899          bra       DisassembleInstruction_107
                    6900   DisassembleInstruction_106:
                    6901   ; ((*OpCode >> 9) & (unsigned short int)(0x0007)),
                    6902   ; (*OpCode & (unsigned short int)(0x0007))) ;
                    6903   ; }
                    6904   ; else {                                                                      // if shift is for example ASR D1,D2
                    6905   ; sprintf(TempString,"D%X,D%X",
00003DA6  2042      6906          move.l    D2,A0
00003DA8  3210      6907          move.w    (A0),D1
00003DAA  C27C 0007 6908          and.w     #7,D1
00003DAE  C2BC 0000 6909          and.l     #65535,D1
00003DB2  FFFF      
00003DB4  2F01      6910          move.l    D1,-(A7)
00003DB6  2042      6911          move.l    D2,A0
00003DB8  3210      6912          move.w    (A0),D1
00003DBA  E041      6913          asr.w     #8,D1
00003DBC  E241      6914          asr.w     #1,D1
00003DBE  C27C 0007 6915          and.w     #7,D1
00003DC2  C2BC 0000 6916          and.l     #65535,D1
00003DC6  FFFF      
00003DC8  2F01      6917          move.l    D1,-(A7)
00003DCA  4879 0084 6918          pea       @m68kde~1_272.L
00003DCE  1B02      
00003DD0  2F0C      6919          move.l    A4,-(A7)
00003DD2  4E95      6920          jsr       (A5)
00003DD4  DEFC 0010 6921          add.w     #16,A7
                    6922   DisassembleInstruction_107:
                    6923   ; ((*OpCode >> 9) & (unsigned short int)(0x0007)),
                    6924   ; (*OpCode & (unsigned short int)(0x0007))) ;
                    6925   ; }
                    6926   ; strcatInstruction(TempString) ;
00003DD8  2F0C      6927          move.l    A4,-(A7)
00003DDA  4EB8 0CD4 6928          jsr       _strcatInstruction
00003DDE  584F      6929          addq.w    #4,A7
                    6930   DisassembleInstruction_73:
                    6931   ; }
                    6932   ; }
                    6933   ; /////////////////////////////////////////////////////////////////////////////////
                    6934   ; // if instruction is BCC and BSR and BRA
                    6935   ; /////////////////////////////////////////////////////////////////////////////////
                    6936   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0x6000))
00003DE0  2042      6937          move.l    D2,A0
00003DE2  3010      6938          move.w    (A0),D0
00003DE4  C07C F000 6939          and.w     #61440,D0
00003DE8  0C40 6000 6940          cmp.w     #24576,D0
00003DEC  6600 00A0 6941          bne       DisassembleInstruction_108
                    6942   ; {
                    6943   ; InstructionSize = 1;
00003DF0  24BC 0000 6944          move.l    #1,(A2)
00003DF4  0001      
                    6945   ; Condition = ((*OpCode >> 8) & (unsigned short int)(0xF)) ;
00003DF6  2042      6946          move.l    D2,A0
00003DF8  3010      6947          move.w    (A0),D0
00003DFA  E040      6948          asr.w     #8,D0
00003DFC  C07C 000F 6949          and.w     #15,D0
00003E00  1D40 FFE9 6950          move.b    D0,-23(A6)
                    6951   ; strcpyInstruction("B") ;
00003E04  4879 0084 6952          pea       @m68kde~1_273.L
00003E08  1B0A      
00003E0A  4E93      6953          jsr       (A3)
00003E0C  584F      6954          addq.w    #4,A7
                    6955   ; DecodeBranchCondition(Condition) ;
00003E0E  122E FFE9 6956          move.b    -23(A6),D1
00003E12  C27C 00FF 6957          and.w     #255,D1
00003E16  C2BC 0000 6958          and.l     #65535,D1
00003E1A  FFFF      
00003E1C  2F01      6959          move.l    D1,-(A7)
00003E1E  4EB8 34F6 6960          jsr       _DecodeBranchCondition
00003E22  584F      6961          addq.w    #4,A7
                    6962   ; Displacement8Bit = (*OpCode & (unsigned short int)(0xFF)) ;
00003E24  2042      6963          move.l    D2,A0
00003E26  3010      6964          move.w    (A0),D0
00003E28  C07C 00FF 6965          and.w     #255,D0
00003E2C  1D40 FFFB 6966          move.b    D0,-5(A6)
                    6967   ; if(Displacement8Bit == (unsigned short int)(0))  {           // if 16 bit displacement
00003E30  102E FFFB 6968          move.b    -5(A6),D0
00003E34  4880      6969          ext.w     D0
00003E36  4A40      6970          tst.w     D0
00003E38  662A      6971          bne.s     DisassembleInstruction_110
                    6972   ; sprintf(TempString, "$%X", (int)(OpCode) + (int)(OpCode[1]) +  2) ;
00003E3A  2202      6973          move.l    D2,D1
00003E3C  2042      6974          move.l    D2,A0
00003E3E  2F00      6975          move.l    D0,-(A7)
00003E40  3028 0002 6976          move.w    2(A0),D0
00003E44  48C0      6977          ext.l     D0
00003E46  D280      6978          add.l     D0,D1
00003E48  201F      6979          move.l    (A7)+,D0
00003E4A  5481      6980          addq.l    #2,D1
00003E4C  2F01      6981          move.l    D1,-(A7)
00003E4E  4879 0084 6982          pea       @m68kde~1_274.L
00003E52  1B0C      
00003E54  2F0C      6983          move.l    A4,-(A7)
00003E56  4E95      6984          jsr       (A5)
00003E58  DEFC 000C 6985          add.w     #12,A7
                    6986   ; InstructionSize = 2 ;
00003E5C  24BC 0000 6987          move.l    #2,(A2)
00003E60  0002      
00003E62  6022      6988          bra.s     DisassembleInstruction_111
                    6989   DisassembleInstruction_110:
                    6990   ; }
                    6991   ; else
                    6992   ; sprintf(TempString, "$%X", (int)(OpCode) + Displacement8Bit + 2) ;           // 8 bit displacement
00003E64  2202      6993          move.l    D2,D1
00003E66  2F00      6994          move.l    D0,-(A7)
00003E68  102E FFFB 6995          move.b    -5(A6),D0
00003E6C  4880      6996          ext.w     D0
00003E6E  48C0      6997          ext.l     D0
00003E70  D280      6998          add.l     D0,D1
00003E72  201F      6999          move.l    (A7)+,D0
00003E74  5481      7000          addq.l    #2,D1
00003E76  2F01      7001          move.l    D1,-(A7)
00003E78  4879 0084 7002          pea       @m68kde~1_275.L
00003E7C  1B10      
00003E7E  2F0C      7003          move.l    A4,-(A7)
00003E80  4E95      7004          jsr       (A5)
00003E82  DEFC 000C 7005          add.w     #12,A7
                    7006   DisassembleInstruction_111:
                    7007   ; strcatInstruction(TempString) ;
00003E86  2F0C      7008          move.l    A4,-(A7)
00003E88  4EB8 0CD4 7009          jsr       _strcatInstruction
00003E8C  584F      7010          addq.w    #4,A7
                    7011   DisassembleInstruction_108:
                    7012   ; }
                    7013   ; /////////////////////////////////////////////////////////////////////////////////
                    7014   ; // if instruction is BCHG dn,<EA>
                    7015   ; /////////////////////////////////////////////////////////////////////////////////
                    7016   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x0140))   {
00003E8E  2042      7017          move.l    D2,A0
00003E90  3010      7018          move.w    (A0),D0
00003E92  C07C F1C0 7019          and.w     #61888,D0
00003E96  0C40 0140 7020          cmp.w     #320,D0
00003E9A  6600 004C 7021          bne       DisassembleInstruction_112
                    7022   ; InstructionSize = 1;
00003E9E  24BC 0000 7023          move.l    #1,(A2)
00003EA2  0001      
                    7024   ; strcpyInstruction("BCHG ") ;
00003EA4  4879 0084 7025          pea       @m68kde~1_276.L
00003EA8  1B14      
00003EAA  4E93      7026          jsr       (A3)
00003EAC  584F      7027          addq.w    #4,A7
                    7028   ; sprintf(TempString, "D%d,", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
00003EAE  2042      7029          move.l    D2,A0
00003EB0  3210      7030          move.w    (A0),D1
00003EB2  E041      7031          asr.w     #8,D1
00003EB4  E241      7032          asr.w     #1,D1
00003EB6  C27C 0007 7033          and.w     #7,D1
00003EBA  C2BC 0000 7034          and.l     #65535,D1
00003EBE  FFFF      
00003EC0  2F01      7035          move.l    D1,-(A7)
00003EC2  4879 0084 7036          pea       @m68kde~1_277.L
00003EC6  1B1A      
00003EC8  2F0C      7037          move.l    A4,-(A7)
00003ECA  4E95      7038          jsr       (A5)
00003ECC  DEFC 000C 7039          add.w     #12,A7
                    7040   ; strcatInstruction(TempString) ;
00003ED0  2F0C      7041          move.l    A4,-(A7)
00003ED2  4EB8 0CD4 7042          jsr       _strcatInstruction
00003ED6  584F      7043          addq.w    #4,A7
                    7044   ; Decode6BitEA(OpCode,0,0,0) ;
00003ED8  42A7      7045          clr.l     -(A7)
00003EDA  42A7      7046          clr.l     -(A7)
00003EDC  42A7      7047          clr.l     -(A7)
00003EDE  2F02      7048          move.l    D2,-(A7)
00003EE0  4EB8 3038 7049          jsr       _Decode6BitEA
00003EE4  DEFC 0010 7050          add.w     #16,A7
                    7051   DisassembleInstruction_112:
                    7052   ; }
                    7053   ; /////////////////////////////////////////////////////////////////////////////////
                    7054   ; // if instruction is BCHG #data,<EA>
                    7055   ; /////////////////////////////////////////////////////////////////////////////////
                    7056   ; if((*OpCode & (unsigned short int)(0xFFC0 )) == (unsigned short int)(0x0840))   {
00003EE8  2042      7057          move.l    D2,A0
00003EEA  3010      7058          move.w    (A0),D0
00003EEC  C07C FFC0 7059          and.w     #65472,D0
00003EF0  0C40 0840 7060          cmp.w     #2112,D0
00003EF4  6600 0044 7061          bne       DisassembleInstruction_114
                    7062   ; strcpyInstruction("BCHG ") ;
00003EF8  4879 0084 7063          pea       @m68kde~1_278.L
00003EFC  1B20      
00003EFE  4E93      7064          jsr       (A3)
00003F00  584F      7065          addq.w    #4,A7
                    7066   ; sprintf(TempString, "#$%X,", OpCode[1]) ;
00003F02  2042      7067          move.l    D2,A0
00003F04  3228 0002 7068          move.w    2(A0),D1
00003F08  48C1      7069          ext.l     D1
00003F0A  2F01      7070          move.l    D1,-(A7)
00003F0C  4879 0084 7071          pea       @m68kde~1_279.L
00003F10  1B26      
00003F12  2F0C      7072          move.l    A4,-(A7)
00003F14  4E95      7073          jsr       (A5)
00003F16  DEFC 000C 7074          add.w     #12,A7
                    7075   ; InstructionSize = 2 ;
00003F1A  24BC 0000 7076          move.l    #2,(A2)
00003F1E  0002      
                    7077   ; strcatInstruction(TempString) ;
00003F20  2F0C      7078          move.l    A4,-(A7)
00003F22  4EB8 0CD4 7079          jsr       _strcatInstruction
00003F26  584F      7080          addq.w    #4,A7
                    7081   ; Decode6BitEA(OpCode,0,1,0) ;
00003F28  42A7      7082          clr.l     -(A7)
00003F2A  4878 0001 7083          pea       1
00003F2E  42A7      7084          clr.l     -(A7)
00003F30  2F02      7085          move.l    D2,-(A7)
00003F32  4EB8 3038 7086          jsr       _Decode6BitEA
00003F36  DEFC 0010 7087          add.w     #16,A7
                    7088   DisassembleInstruction_114:
                    7089   ; }
                    7090   ; /////////////////////////////////////////////////////////////////////////////////
                    7091   ; // if instruction is BCLR  dn,<EA>
                    7092   ; /////////////////////////////////////////////////////////////////////////////////
                    7093   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x0180))   {
00003F3A  2042      7094          move.l    D2,A0
00003F3C  3010      7095          move.w    (A0),D0
00003F3E  C07C F1C0 7096          and.w     #61888,D0
00003F42  0C40 0180 7097          cmp.w     #384,D0
00003F46  6600 004C 7098          bne       DisassembleInstruction_116
                    7099   ; InstructionSize = 1;
00003F4A  24BC 0000 7100          move.l    #1,(A2)
00003F4E  0001      
                    7101   ; strcpyInstruction("BCLR ") ;
00003F50  4879 0084 7102          pea       @m68kde~1_280.L
00003F54  1B2C      
00003F56  4E93      7103          jsr       (A3)
00003F58  584F      7104          addq.w    #4,A7
                    7105   ; sprintf(TempString, "D%d,", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
00003F5A  2042      7106          move.l    D2,A0
00003F5C  3210      7107          move.w    (A0),D1
00003F5E  E041      7108          asr.w     #8,D1
00003F60  E241      7109          asr.w     #1,D1
00003F62  C27C 0007 7110          and.w     #7,D1
00003F66  C2BC 0000 7111          and.l     #65535,D1
00003F6A  FFFF      
00003F6C  2F01      7112          move.l    D1,-(A7)
00003F6E  4879 0084 7113          pea       @m68kde~1_281.L
00003F72  1B32      
00003F74  2F0C      7114          move.l    A4,-(A7)
00003F76  4E95      7115          jsr       (A5)
00003F78  DEFC 000C 7116          add.w     #12,A7
                    7117   ; strcatInstruction(TempString) ;
00003F7C  2F0C      7118          move.l    A4,-(A7)
00003F7E  4EB8 0CD4 7119          jsr       _strcatInstruction
00003F82  584F      7120          addq.w    #4,A7
                    7121   ; Decode6BitEA(OpCode,0,0,0) ;
00003F84  42A7      7122          clr.l     -(A7)
00003F86  42A7      7123          clr.l     -(A7)
00003F88  42A7      7124          clr.l     -(A7)
00003F8A  2F02      7125          move.l    D2,-(A7)
00003F8C  4EB8 3038 7126          jsr       _Decode6BitEA
00003F90  DEFC 0010 7127          add.w     #16,A7
                    7128   DisassembleInstruction_116:
                    7129   ; }
                    7130   ; /////////////////////////////////////////////////////////////////////////////////
                    7131   ; // if instruction is BCLR #data,<EA>
                    7132   ; /////////////////////////////////////////////////////////////////////////////////
                    7133   ; if((*OpCode & (unsigned short int)(0xFFC0 )) == (unsigned short int)(0x0880))   {
00003F94  2042      7134          move.l    D2,A0
00003F96  3010      7135          move.w    (A0),D0
00003F98  C07C FFC0 7136          and.w     #65472,D0
00003F9C  0C40 0880 7137          cmp.w     #2176,D0
00003FA0  6600 0044 7138          bne       DisassembleInstruction_118
                    7139   ; strcpyInstruction("BCLR ") ;
00003FA4  4879 0084 7140          pea       @m68kde~1_282.L
00003FA8  1B38      
00003FAA  4E93      7141          jsr       (A3)
00003FAC  584F      7142          addq.w    #4,A7
                    7143   ; sprintf(TempString, "#$%X,", OpCode[1]) ;
00003FAE  2042      7144          move.l    D2,A0
00003FB0  3228 0002 7145          move.w    2(A0),D1
00003FB4  48C1      7146          ext.l     D1
00003FB6  2F01      7147          move.l    D1,-(A7)
00003FB8  4879 0084 7148          pea       @m68kde~1_283.L
00003FBC  1B3E      
00003FBE  2F0C      7149          move.l    A4,-(A7)
00003FC0  4E95      7150          jsr       (A5)
00003FC2  DEFC 000C 7151          add.w     #12,A7
                    7152   ; InstructionSize = 2 ;
00003FC6  24BC 0000 7153          move.l    #2,(A2)
00003FCA  0002      
                    7154   ; strcatInstruction(TempString) ;
00003FCC  2F0C      7155          move.l    A4,-(A7)
00003FCE  4EB8 0CD4 7156          jsr       _strcatInstruction
00003FD2  584F      7157          addq.w    #4,A7
                    7158   ; Decode6BitEA(OpCode,0,1,0) ;
00003FD4  42A7      7159          clr.l     -(A7)
00003FD6  4878 0001 7160          pea       1
00003FDA  42A7      7161          clr.l     -(A7)
00003FDC  2F02      7162          move.l    D2,-(A7)
00003FDE  4EB8 3038 7163          jsr       _Decode6BitEA
00003FE2  DEFC 0010 7164          add.w     #16,A7
                    7165   DisassembleInstruction_118:
                    7166   ; }
                    7167   ; /////////////////////////////////////////////////////////////////////////////////
                    7168   ; // if instruction is BSET dn,<EA>
                    7169   ; /////////////////////////////////////////////////////////////////////////////////
                    7170   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x01C0))   {
00003FE6  2042      7171          move.l    D2,A0
00003FE8  3010      7172          move.w    (A0),D0
00003FEA  C07C F1C0 7173          and.w     #61888,D0
00003FEE  0C40 01C0 7174          cmp.w     #448,D0
00003FF2  6600 004C 7175          bne       DisassembleInstruction_120
                    7176   ; InstructionSize = 1;
00003FF6  24BC 0000 7177          move.l    #1,(A2)
00003FFA  0001      
                    7178   ; strcpyInstruction("BSET ") ;
00003FFC  4879 0084 7179          pea       @m68kde~1_284.L
00004000  1B44      
00004002  4E93      7180          jsr       (A3)
00004004  584F      7181          addq.w    #4,A7
                    7182   ; sprintf(TempString, "D%d,", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
00004006  2042      7183          move.l    D2,A0
00004008  3210      7184          move.w    (A0),D1
0000400A  E041      7185          asr.w     #8,D1
0000400C  E241      7186          asr.w     #1,D1
0000400E  C27C 0007 7187          and.w     #7,D1
00004012  C2BC 0000 7188          and.l     #65535,D1
00004016  FFFF      
00004018  2F01      7189          move.l    D1,-(A7)
0000401A  4879 0084 7190          pea       @m68kde~1_285.L
0000401E  1B4A      
00004020  2F0C      7191          move.l    A4,-(A7)
00004022  4E95      7192          jsr       (A5)
00004024  DEFC 000C 7193          add.w     #12,A7
                    7194   ; strcatInstruction(TempString) ;
00004028  2F0C      7195          move.l    A4,-(A7)
0000402A  4EB8 0CD4 7196          jsr       _strcatInstruction
0000402E  584F      7197          addq.w    #4,A7
                    7198   ; Decode6BitEA(OpCode,0,0,0) ;
00004030  42A7      7199          clr.l     -(A7)
00004032  42A7      7200          clr.l     -(A7)
00004034  42A7      7201          clr.l     -(A7)
00004036  2F02      7202          move.l    D2,-(A7)
00004038  4EB8 3038 7203          jsr       _Decode6BitEA
0000403C  DEFC 0010 7204          add.w     #16,A7
                    7205   DisassembleInstruction_120:
                    7206   ; }
                    7207   ; /////////////////////////////////////////////////////////////////////////////////
                    7208   ; // if instruction is BSET #data,<EA>
                    7209   ; /////////////////////////////////////////////////////////////////////////////////
                    7210   ; if((*OpCode & (unsigned short int)(0xFFC0 )) == (unsigned short int)(0x08C0))   {
00004040  2042      7211          move.l    D2,A0
00004042  3010      7212          move.w    (A0),D0
00004044  C07C FFC0 7213          and.w     #65472,D0
00004048  0C40 08C0 7214          cmp.w     #2240,D0
0000404C  6600 0044 7215          bne       DisassembleInstruction_122
                    7216   ; strcpyInstruction("BSET ") ;
00004050  4879 0084 7217          pea       @m68kde~1_286.L
00004054  1B50      
00004056  4E93      7218          jsr       (A3)
00004058  584F      7219          addq.w    #4,A7
                    7220   ; sprintf(TempString, "#$%X,", OpCode[1]) ;
0000405A  2042      7221          move.l    D2,A0
0000405C  3228 0002 7222          move.w    2(A0),D1
00004060  48C1      7223          ext.l     D1
00004062  2F01      7224          move.l    D1,-(A7)
00004064  4879 0084 7225          pea       @m68kde~1_287.L
00004068  1B56      
0000406A  2F0C      7226          move.l    A4,-(A7)
0000406C  4E95      7227          jsr       (A5)
0000406E  DEFC 000C 7228          add.w     #12,A7
                    7229   ; InstructionSize = 2 ;
00004072  24BC 0000 7230          move.l    #2,(A2)
00004076  0002      
                    7231   ; strcatInstruction(TempString) ;
00004078  2F0C      7232          move.l    A4,-(A7)
0000407A  4EB8 0CD4 7233          jsr       _strcatInstruction
0000407E  584F      7234          addq.w    #4,A7
                    7235   ; Decode6BitEA(OpCode,0,1,0) ;
00004080  42A7      7236          clr.l     -(A7)
00004082  4878 0001 7237          pea       1
00004086  42A7      7238          clr.l     -(A7)
00004088  2F02      7239          move.l    D2,-(A7)
0000408A  4EB8 3038 7240          jsr       _Decode6BitEA
0000408E  DEFC 0010 7241          add.w     #16,A7
                    7242   DisassembleInstruction_122:
                    7243   ; }
                    7244   ; /////////////////////////////////////////////////////////////////////////////////
                    7245   ; // if instruction is BTST dn,<EA>
                    7246   ; /////////////////////////////////////////////////////////////////////////////////
                    7247   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x0100))   {
00004092  2042      7248          move.l    D2,A0
00004094  3010      7249          move.w    (A0),D0
00004096  C07C F1C0 7250          and.w     #61888,D0
0000409A  0C40 0100 7251          cmp.w     #256,D0
0000409E  6600 004C 7252          bne       DisassembleInstruction_124
                    7253   ; InstructionSize = 1;
000040A2  24BC 0000 7254          move.l    #1,(A2)
000040A6  0001      
                    7255   ; strcpyInstruction("BTST ") ;
000040A8  4879 0084 7256          pea       @m68kde~1_288.L
000040AC  1B5C      
000040AE  4E93      7257          jsr       (A3)
000040B0  584F      7258          addq.w    #4,A7
                    7259   ; sprintf(TempString, "D%d,", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
000040B2  2042      7260          move.l    D2,A0
000040B4  3210      7261          move.w    (A0),D1
000040B6  E041      7262          asr.w     #8,D1
000040B8  E241      7263          asr.w     #1,D1
000040BA  C27C 0007 7264          and.w     #7,D1
000040BE  C2BC 0000 7265          and.l     #65535,D1
000040C2  FFFF      
000040C4  2F01      7266          move.l    D1,-(A7)
000040C6  4879 0084 7267          pea       @m68kde~1_289.L
000040CA  1B62      
000040CC  2F0C      7268          move.l    A4,-(A7)
000040CE  4E95      7269          jsr       (A5)
000040D0  DEFC 000C 7270          add.w     #12,A7
                    7271   ; strcatInstruction(TempString) ;
000040D4  2F0C      7272          move.l    A4,-(A7)
000040D6  4EB8 0CD4 7273          jsr       _strcatInstruction
000040DA  584F      7274          addq.w    #4,A7
                    7275   ; Decode6BitEA(OpCode,0,0,0) ;
000040DC  42A7      7276          clr.l     -(A7)
000040DE  42A7      7277          clr.l     -(A7)
000040E0  42A7      7278          clr.l     -(A7)
000040E2  2F02      7279          move.l    D2,-(A7)
000040E4  4EB8 3038 7280          jsr       _Decode6BitEA
000040E8  DEFC 0010 7281          add.w     #16,A7
                    7282   DisassembleInstruction_124:
                    7283   ; }
                    7284   ; /////////////////////////////////////////////////////////////////////////////////
                    7285   ; // if instruction is BTST #data,<EA>
                    7286   ; /////////////////////////////////////////////////////////////////////////////////
                    7287   ; if((*OpCode & (unsigned short int)(0xFFC0 )) == (unsigned short int)(0x0800))   {
000040EC  2042      7288          move.l    D2,A0
000040EE  3010      7289          move.w    (A0),D0
000040F0  C07C FFC0 7290          and.w     #65472,D0
000040F4  0C40 0800 7291          cmp.w     #2048,D0
000040F8  6600 0044 7292          bne       DisassembleInstruction_126
                    7293   ; strcpyInstruction("BTST ") ;
000040FC  4879 0084 7294          pea       @m68kde~1_290.L
00004100  1B68      
00004102  4E93      7295          jsr       (A3)
00004104  584F      7296          addq.w    #4,A7
                    7297   ; sprintf(TempString, "#$%X,", OpCode[1]) ;
00004106  2042      7298          move.l    D2,A0
00004108  3228 0002 7299          move.w    2(A0),D1
0000410C  48C1      7300          ext.l     D1
0000410E  2F01      7301          move.l    D1,-(A7)
00004110  4879 0084 7302          pea       @m68kde~1_291.L
00004114  1B6E      
00004116  2F0C      7303          move.l    A4,-(A7)
00004118  4E95      7304          jsr       (A5)
0000411A  DEFC 000C 7305          add.w     #12,A7
                    7306   ; InstructionSize = 2 ;
0000411E  24BC 0000 7307          move.l    #2,(A2)
00004122  0002      
                    7308   ; strcatInstruction(TempString) ;
00004124  2F0C      7309          move.l    A4,-(A7)
00004126  4EB8 0CD4 7310          jsr       _strcatInstruction
0000412A  584F      7311          addq.w    #4,A7
                    7312   ; Decode6BitEA(OpCode,0,1,0) ;
0000412C  42A7      7313          clr.l     -(A7)
0000412E  4878 0001 7314          pea       1
00004132  42A7      7315          clr.l     -(A7)
00004134  2F02      7316          move.l    D2,-(A7)
00004136  4EB8 3038 7317          jsr       _Decode6BitEA
0000413A  DEFC 0010 7318          add.w     #16,A7
                    7319   DisassembleInstruction_126:
                    7320   ; }
                    7321   ; /////////////////////////////////////////////////////////////////////////////////
                    7322   ; // if instruction is CHK.W <EA>,DN
                    7323   ; /////////////////////////////////////////////////////////////////////////////////
                    7324   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x4180))   {
0000413E  2042      7325          move.l    D2,A0
00004140  3010      7326          move.w    (A0),D0
00004142  C07C F1C0 7327          and.w     #61888,D0
00004146  0C40 4180 7328          cmp.w     #16768,D0
0000414A  6600 004C 7329          bne       DisassembleInstruction_128
                    7330   ; InstructionSize = 1;
0000414E  24BC 0000 7331          move.l    #1,(A2)
00004152  0001      
                    7332   ; strcpyInstruction("CHK ") ;
00004154  4879 0084 7333          pea       @m68kde~1_292.L
00004158  1B74      
0000415A  4E93      7334          jsr       (A3)
0000415C  584F      7335          addq.w    #4,A7
                    7336   ; Decode6BitEA(OpCode,0,0,0) ;
0000415E  42A7      7337          clr.l     -(A7)
00004160  42A7      7338          clr.l     -(A7)
00004162  42A7      7339          clr.l     -(A7)
00004164  2F02      7340          move.l    D2,-(A7)
00004166  4EB8 3038 7341          jsr       _Decode6BitEA
0000416A  DEFC 0010 7342          add.w     #16,A7
                    7343   ; sprintf(TempString, ",D%d", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
0000416E  2042      7344          move.l    D2,A0
00004170  3210      7345          move.w    (A0),D1
00004172  E041      7346          asr.w     #8,D1
00004174  E241      7347          asr.w     #1,D1
00004176  C27C 0007 7348          and.w     #7,D1
0000417A  C2BC 0000 7349          and.l     #65535,D1
0000417E  FFFF      
00004180  2F01      7350          move.l    D1,-(A7)
00004182  4879 0084 7351          pea       @m68kde~1_293.L
00004186  1B7A      
00004188  2F0C      7352          move.l    A4,-(A7)
0000418A  4E95      7353          jsr       (A5)
0000418C  DEFC 000C 7354          add.w     #12,A7
                    7355   ; strcatInstruction(TempString) ;
00004190  2F0C      7356          move.l    A4,-(A7)
00004192  4EB8 0CD4 7357          jsr       _strcatInstruction
00004196  584F      7358          addq.w    #4,A7
                    7359   DisassembleInstruction_128:
                    7360   ; }
                    7361   ; /////////////////////////////////////////////////////////////////////////////////
                    7362   ; // if instruction is CLR <EA>
                    7363   ; /////////////////////////////////////////////////////////////////////////////////
                    7364   ; if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x4200))   {
00004198  2042      7365          move.l    D2,A0
0000419A  3010      7366          move.w    (A0),D0
0000419C  C07C FF00 7367          and.w     #65280,D0
000041A0  0C40 4200 7368          cmp.w     #16896,D0
000041A4  6600 0034 7369          bne       DisassembleInstruction_130
                    7370   ; InstructionSize = 1;
000041A8  24BC 0000 7371          move.l    #1,(A2)
000041AC  0001      
                    7372   ; strcpyInstruction("CLR") ;
000041AE  4879 0084 7373          pea       @m68kde~1_294.L
000041B2  1B80      
000041B4  4E93      7374          jsr       (A3)
000041B6  584F      7375          addq.w    #4,A7
                    7376   ; Decode2BitOperandSize(*OpCode) ;
000041B8  2042      7377          move.l    D2,A0
000041BA  3210      7378          move.w    (A0),D1
000041BC  C2BC 0000 7379          and.l     #65535,D1
000041C0  FFFF      
000041C2  2F01      7380          move.l    D1,-(A7)
000041C4  4EB8 2DA4 7381          jsr       _Decode2BitOperandSize
000041C8  584F      7382          addq.w    #4,A7
                    7383   ; Decode6BitEA(OpCode,0,0,0) ;
000041CA  42A7      7384          clr.l     -(A7)
000041CC  42A7      7385          clr.l     -(A7)
000041CE  42A7      7386          clr.l     -(A7)
000041D0  2F02      7387          move.l    D2,-(A7)
000041D2  4EB8 3038 7388          jsr       _Decode6BitEA
000041D6  DEFC 0010 7389          add.w     #16,A7
                    7390   DisassembleInstruction_130:
                    7391   ; }
                    7392   ; /////////////////////////////////////////////////////////////////////////////////
                    7393   ; // if instruction is CMP, CMPA
                    7394   ; /////////////////////////////////////////////////////////////////////////////////
                    7395   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0xB000))
000041DA  2042      7396          move.l    D2,A0
000041DC  3010      7397          move.w    (A0),D0
000041DE  C07C F000 7398          and.w     #61440,D0
000041E2  0C40 B000 7399          cmp.w     #45056,D0
000041E6  6600 008C 7400          bne       DisassembleInstruction_135
                    7401   ; {
                    7402   ; InstructionSize = 1;
000041EA  24BC 0000 7403          move.l    #1,(A2)
000041EE  0001      
                    7404   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0007) ;
000041F0  2042      7405          move.l    D2,A0
000041F2  3010      7406          move.w    (A0),D0
000041F4  EC40      7407          asr.w     #6,D0
000041F6  C07C 0007 7408          and.w     #7,D0
000041FA  3600      7409          move.w    D0,D3
                    7410   ; if((OpMode == (unsigned short int)(0x0003)) || (OpMode == (unsigned short int)(0x0007)))    {
000041FC  0C43 0003 7411          cmp.w     #3,D3
00004200  6708      7412          beq.s     DisassembleInstruction_136
00004202  0C43 0007 7413          cmp.w     #7,D3
00004206  6600 005A 7414          bne       DisassembleInstruction_134
                    7415   DisassembleInstruction_136:
                    7416   ; if(OpMode == (unsigned short int)(0x0003))
0000420A  0C43 0003 7417          cmp.w     #3,D3
0000420E  660C      7418          bne.s     DisassembleInstruction_137
                    7419   ; strcpyInstruction("CMPA.W ") ;
00004210  4879 0084 7420          pea       @m68kde~1_295.L
00004214  1B84      
00004216  4E93      7421          jsr       (A3)
00004218  584F      7422          addq.w    #4,A7
0000421A  600A      7423          bra.s     DisassembleInstruction_138
                    7424   DisassembleInstruction_137:
                    7425   ; else
                    7426   ; strcpyInstruction("CMPA.L ") ;
0000421C  4879 0084 7427          pea       @m68kde~1_296.L
00004220  1B8C      
00004222  4E93      7428          jsr       (A3)
00004224  584F      7429          addq.w    #4,A7
                    7430   DisassembleInstruction_138:
                    7431   ; Decode6BitEA(OpCode,0,0,0) ;
00004226  42A7      7432          clr.l     -(A7)
00004228  42A7      7433          clr.l     -(A7)
0000422A  42A7      7434          clr.l     -(A7)
0000422C  2F02      7435          move.l    D2,-(A7)
0000422E  4EB8 3038 7436          jsr       _Decode6BitEA
00004232  DEFC 0010 7437          add.w     #16,A7
                    7438   ; sprintf(TempString, ",A%d", ((*OpCode >> 9) & (unsigned short int)(0x0007))) ;
00004236  2042      7439          move.l    D2,A0
00004238  3210      7440          move.w    (A0),D1
0000423A  E041      7441          asr.w     #8,D1
0000423C  E241      7442          asr.w     #1,D1
0000423E  C27C 0007 7443          and.w     #7,D1
00004242  C2BC 0000 7444          and.l     #65535,D1
00004246  FFFF      
00004248  2F01      7445          move.l    D1,-(A7)
0000424A  4879 0084 7446          pea       @m68kde~1_297.L
0000424E  1B94      
00004250  2F0C      7447          move.l    A4,-(A7)
00004252  4E95      7448          jsr       (A5)
00004254  DEFC 000C 7449          add.w     #12,A7
                    7450   ; strcatInstruction(TempString) ;
00004258  2F0C      7451          move.l    A4,-(A7)
0000425A  4EB8 0CD4 7452          jsr       _strcatInstruction
0000425E  584F      7453          addq.w    #4,A7
00004260  6012      7454          bra.s     DisassembleInstruction_135
                    7455   DisassembleInstruction_134:
                    7456   ; }
                    7457   ; else {
                    7458   ; strcpyInstruction("CMP") ;
00004262  4879 0084 7459          pea       @m68kde~1_298.L
00004266  1B9A      
00004268  4E93      7460          jsr       (A3)
0000426A  584F      7461          addq.w    #4,A7
                    7462   ; Decode3BitOperandMode(OpCode) ;
0000426C  2F02      7463          move.l    D2,-(A7)
0000426E  4EB8 3460 7464          jsr       _Decode3BitOperandMode
00004272  584F      7465          addq.w    #4,A7
                    7466   DisassembleInstruction_135:
                    7467   ; }
                    7468   ; }
                    7469   ; /////////////////////////////////////////////////////////////////////////////////
                    7470   ; // if instruction is CMPM
                    7471   ; /////////////////////////////////////////////////////////////////////////////////
                    7472   ; if((*OpCode & (unsigned short int)(0xF138 )) == (unsigned short int)(0xB108))
00004274  2042      7473          move.l    D2,A0
00004276  3010      7474          move.w    (A0),D0
00004278  C07C F138 7475          and.w     #61752,D0
0000427C  0C40 B108 7476          cmp.w     #45320,D0
00004280  6600 007A 7477          bne       DisassembleInstruction_141
                    7478   ; {
                    7479   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0003) ;
00004284  2042      7480          move.l    D2,A0
00004286  3010      7481          move.w    (A0),D0
00004288  EC40      7482          asr.w     #6,D0
0000428A  C07C 0003 7483          and.w     #3,D0
0000428E  3600      7484          move.w    D0,D3
                    7485   ; if((OpMode >= (unsigned short int)(0x0000)) && (OpMode <= (unsigned short int)(0x0002)))
00004290  0C43 0000 7486          cmp.w     #0,D3
00004294  6500 0066 7487          blo       DisassembleInstruction_141
00004298  0C43 0002 7488          cmp.w     #2,D3
0000429C  6200 005E 7489          bhi       DisassembleInstruction_141
                    7490   ; {
                    7491   ; InstructionSize = 1;
000042A0  24BC 0000 7492          move.l    #1,(A2)
000042A4  0001      
                    7493   ; strcpyInstruction("CMPM") ;
000042A6  4879 0084 7494          pea       @m68kde~1_299.L
000042AA  1B9E      
000042AC  4E93      7495          jsr       (A3)
000042AE  584F      7496          addq.w    #4,A7
                    7497   ; Decode2BitOperandSize(*OpCode) ;
000042B0  2042      7498          move.l    D2,A0
000042B2  3210      7499          move.w    (A0),D1
000042B4  C2BC 0000 7500          and.l     #65535,D1
000042B8  FFFF      
000042BA  2F01      7501          move.l    D1,-(A7)
000042BC  4EB8 2DA4 7502          jsr       _Decode2BitOperandSize
000042C0  584F      7503          addq.w    #4,A7
                    7504   ; sprintf(TempString, "(A%d)+,(A%d)+", (*OpCode & (unsigned short int)(0x7)) , ((*OpCode >> 9) & (unsigned short int)(0x7)));
000042C2  2042      7505          move.l    D2,A0
000042C4  3210      7506          move.w    (A0),D1
000042C6  E041      7507          asr.w     #8,D1
000042C8  E241      7508          asr.w     #1,D1
000042CA  C27C 0007 7509          and.w     #7,D1
000042CE  C2BC 0000 7510          and.l     #65535,D1
000042D2  FFFF      
000042D4  2F01      7511          move.l    D1,-(A7)
000042D6  2042      7512          move.l    D2,A0
000042D8  3210      7513          move.w    (A0),D1
000042DA  C27C 0007 7514          and.w     #7,D1
000042DE  C2BC 0000 7515          and.l     #65535,D1
000042E2  FFFF      
000042E4  2F01      7516          move.l    D1,-(A7)
000042E6  4879 0084 7517          pea       @m68kde~1_300.L
000042EA  1BA4      
000042EC  2F0C      7518          move.l    A4,-(A7)
000042EE  4E95      7519          jsr       (A5)
000042F0  DEFC 0010 7520          add.w     #16,A7
                    7521   ; strcatInstruction(TempString) ;
000042F4  2F0C      7522          move.l    A4,-(A7)
000042F6  4EB8 0CD4 7523          jsr       _strcatInstruction
000042FA  584F      7524          addq.w    #4,A7
                    7525   DisassembleInstruction_141:
                    7526   ; }
                    7527   ; }
                    7528   ; /////////////////////////////////////////////////////////////////////////////////
                    7529   ; // if instruction is DBCC
                    7530   ; /////////////////////////////////////////////////////////////////////////////////
                    7531   ; if((*OpCode & (unsigned short int)(0xF0F8 )) == (unsigned short int)(0x50C8))
000042FC  2042      7532          move.l    D2,A0
000042FE  3010      7533          move.w    (A0),D0
00004300  C07C F0F8 7534          and.w     #61688,D0
00004304  0C40 50C8 7535          cmp.w     #20680,D0
00004308  6600 0084 7536          bne       DisassembleInstruction_143
                    7537   ; {
                    7538   ; InstructionSize = 2;
0000430C  24BC 0000 7539          move.l    #2,(A2)
00004310  0002      
                    7540   ; strcpy(Instruction,"DB") ;
00004312  4879 0084 7541          pea       @m68kde~1_301.L
00004316  1BB2      
00004318  4879 0084 7542          pea       _Instruction.L
0000431C  04DC      
0000431E  4EB9 0000 7543          jsr       _strcpy
00004322  54EE      
00004324  504F      7544          addq.w    #8,A7
                    7545   ; Condition = ((*OpCode >> 8) & (unsigned short int)(0x000F)) ;
00004326  2042      7546          move.l    D2,A0
00004328  3010      7547          move.w    (A0),D0
0000432A  E040      7548          asr.w     #8,D0
0000432C  C07C 000F 7549          and.w     #15,D0
00004330  1D40 FFE9 7550          move.b    D0,-23(A6)
                    7551   ; DecodeBranchCondition(Condition) ;
00004334  122E FFE9 7552          move.b    -23(A6),D1
00004338  C27C 00FF 7553          and.w     #255,D1
0000433C  C2BC 0000 7554          and.l     #65535,D1
00004340  FFFF      
00004342  2F01      7555          move.l    D1,-(A7)
00004344  4EB8 34F6 7556          jsr       _DecodeBranchCondition
00004348  584F      7557          addq.w    #4,A7
                    7558   ; sprintf(TempString, "D%d,%+d(PC) to Addr:$%X",(*OpCode & (unsigned short int)(0x7)), (int)(OpCode[1]), (int)(OpCode) + (int)(OpCode[1]) +  2) ;
0000434A  2202      7559          move.l    D2,D1
0000434C  2042      7560          move.l    D2,A0
0000434E  2F00      7561          move.l    D0,-(A7)
00004350  3028 0002 7562          move.w    2(A0),D0
00004354  48C0      7563          ext.l     D0
00004356  D280      7564          add.l     D0,D1
00004358  201F      7565          move.l    (A7)+,D0
0000435A  5481      7566          addq.l    #2,D1
0000435C  2F01      7567          move.l    D1,-(A7)
0000435E  2042      7568          move.l    D2,A0
00004360  3228 0002 7569          move.w    2(A0),D1
00004364  48C1      7570          ext.l     D1
00004366  2F01      7571          move.l    D1,-(A7)
00004368  2042      7572          move.l    D2,A0
0000436A  3210      7573          move.w    (A0),D1
0000436C  C27C 0007 7574          and.w     #7,D1
00004370  C2BC 0000 7575          and.l     #65535,D1
00004374  FFFF      
00004376  2F01      7576          move.l    D1,-(A7)
00004378  4879 0084 7577          pea       @m68kde~1_302.L
0000437C  1BB6      
0000437E  2F0C      7578          move.l    A4,-(A7)
00004380  4E95      7579          jsr       (A5)
00004382  DEFC 0014 7580          add.w     #20,A7
                    7581   ; strcatInstruction(TempString) ;
00004386  2F0C      7582          move.l    A4,-(A7)
00004388  4EB8 0CD4 7583          jsr       _strcatInstruction
0000438C  584F      7584          addq.w    #4,A7
                    7585   DisassembleInstruction_143:
                    7586   ; }
                    7587   ; /////////////////////////////////////////////////////////////////////////////////
                    7588   ; // if instruction is DIVS
                    7589   ; /////////////////////////////////////////////////////////////////////////////////
                    7590   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x81C0))
0000438E  2042      7591          move.l    D2,A0
00004390  3010      7592          move.w    (A0),D0
00004392  C07C F1C0 7593          and.w     #61888,D0
00004396  0C40 81C0 7594          cmp.w     #33216,D0
0000439A  6600 004A 7595          bne       DisassembleInstruction_145
                    7596   ; {
                    7597   ; InstructionSize = 1;
0000439E  24BC 0000 7598          move.l    #1,(A2)
000043A2  0001      
                    7599   ; strcpy(Instruction,"DIVS ") ;
000043A4  4879 0084 7600          pea       @m68kde~1_303.L
000043A8  1BCE      
000043AA  4879 0084 7601          pea       _Instruction.L
000043AE  04DC      
000043B0  4EB9 0000 7602          jsr       _strcpy
000043B4  54EE      
000043B6  504F      7603          addq.w    #8,A7
                    7604   ; Decode6BitEA(OpCode,0,0,0) ;
000043B8  42A7      7605          clr.l     -(A7)
000043BA  42A7      7606          clr.l     -(A7)
000043BC  42A7      7607          clr.l     -(A7)
000043BE  2F02      7608          move.l    D2,-(A7)
000043C0  4EB8 3038 7609          jsr       _Decode6BitEA
000043C4  DEFC 0010 7610          add.w     #16,A7
                    7611   ; strcatInstruction(",") ;
000043C8  4879 0084 7612          pea       @m68kde~1_304.L
000043CC  1BD4      
000043CE  4EB8 0CD4 7613          jsr       _strcatInstruction
000043D2  584F      7614          addq.w    #4,A7
                    7615   ; Decode3BitDataRegister(*OpCode) ;
000043D4  2042      7616          move.l    D2,A0
000043D6  3210      7617          move.w    (A0),D1
000043D8  C2BC 0000 7618          and.l     #65535,D1
000043DC  FFFF      
000043DE  2F01      7619          move.l    D1,-(A7)
000043E0  4EB8 2E00 7620          jsr       _Decode3BitDataRegister
000043E4  584F      7621          addq.w    #4,A7
                    7622   DisassembleInstruction_145:
                    7623   ; }
                    7624   ; /////////////////////////////////////////////////////////////////////////////////
                    7625   ; // if instruction is DIVU
                    7626   ; /////////////////////////////////////////////////////////////////////////////////
                    7627   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x80C0))
000043E6  2042      7628          move.l    D2,A0
000043E8  3010      7629          move.w    (A0),D0
000043EA  C07C F1C0 7630          and.w     #61888,D0
000043EE  0C40 80C0 7631          cmp.w     #32960,D0
000043F2  6600 004A 7632          bne       DisassembleInstruction_147
                    7633   ; {
                    7634   ; InstructionSize = 1;
000043F6  24BC 0000 7635          move.l    #1,(A2)
000043FA  0001      
                    7636   ; strcpy(Instruction,"DIVU ") ;
000043FC  4879 0084 7637          pea       @m68kde~1_305.L
00004400  1BD6      
00004402  4879 0084 7638          pea       _Instruction.L
00004406  04DC      
00004408  4EB9 0000 7639          jsr       _strcpy
0000440C  54EE      
0000440E  504F      7640          addq.w    #8,A7
                    7641   ; Decode6BitEA(OpCode,0,0,0) ;
00004410  42A7      7642          clr.l     -(A7)
00004412  42A7      7643          clr.l     -(A7)
00004414  42A7      7644          clr.l     -(A7)
00004416  2F02      7645          move.l    D2,-(A7)
00004418  4EB8 3038 7646          jsr       _Decode6BitEA
0000441C  DEFC 0010 7647          add.w     #16,A7
                    7648   ; strcatInstruction(",") ;
00004420  4879 0084 7649          pea       @m68kde~1_306.L
00004424  1BDC      
00004426  4EB8 0CD4 7650          jsr       _strcatInstruction
0000442A  584F      7651          addq.w    #4,A7
                    7652   ; Decode3BitDataRegister(*OpCode) ;
0000442C  2042      7653          move.l    D2,A0
0000442E  3210      7654          move.w    (A0),D1
00004430  C2BC 0000 7655          and.l     #65535,D1
00004434  FFFF      
00004436  2F01      7656          move.l    D1,-(A7)
00004438  4EB8 2E00 7657          jsr       _Decode3BitDataRegister
0000443C  584F      7658          addq.w    #4,A7
                    7659   DisassembleInstruction_147:
                    7660   ; }
                    7661   ; /////////////////////////////////////////////////////////////////////////////////
                    7662   ; // if instruction is EOR
                    7663   ; /////////////////////////////////////////////////////////////////////////////////
                    7664   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0xB000))   {
0000443E  2042      7665          move.l    D2,A0
00004440  3010      7666          move.w    (A0),D0
00004442  C07C F000 7667          and.w     #61440,D0
00004446  0C40 B000 7668          cmp.w     #45056,D0
0000444A  6600 004A 7669          bne       DisassembleInstruction_151
                    7670   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0007) ;
0000444E  2042      7671          move.l    D2,A0
00004450  3010      7672          move.w    (A0),D0
00004452  EC40      7673          asr.w     #6,D0
00004454  C07C 0007 7674          and.w     #7,D0
00004458  3600      7675          move.w    D0,D3
                    7676   ; EAMode = (*OpCode >> 3) & (unsigned short int)(0x0007) ;    // mode cannot be 1 for EOR as it it used by CMPM instruction as a differentiator
0000445A  2042      7677          move.l    D2,A0
0000445C  3010      7678          move.w    (A0),D0
0000445E  E640      7679          asr.w     #3,D0
00004460  C07C 0007 7680          and.w     #7,D0
00004464  3D40 FFEC 7681          move.w    D0,-20(A6)
                    7682   ; if( (OpMode >= (unsigned short int)(0x0004)) &&
00004468  0C43 0004 7683          cmp.w     #4,D3
0000446C  6528      7684          blo.s     DisassembleInstruction_151
0000446E  0C43 0006 7685          cmp.w     #6,D3
00004472  6222      7686          bhi.s     DisassembleInstruction_151
00004474  302E FFEC 7687          move.w    -20(A6),D0
00004478  0C40 0001 7688          cmp.w     #1,D0
0000447C  6718      7689          beq.s     DisassembleInstruction_151
                    7690   ; (OpMode <= (unsigned short int)(0x0006)) &&
                    7691   ; (EAMode != (unsigned short int)(0x0001)))
                    7692   ; {
                    7693   ; InstructionSize = 1;
0000447E  24BC 0000 7694          move.l    #1,(A2)
00004482  0001      
                    7695   ; strcpyInstruction("EOR") ;
00004484  4879 0084 7696          pea       @m68kde~1_307.L
00004488  1BDE      
0000448A  4E93      7697          jsr       (A3)
0000448C  584F      7698          addq.w    #4,A7
                    7699   ; Decode3BitOperandMode(OpCode);
0000448E  2F02      7700          move.l    D2,-(A7)
00004490  4EB8 3460 7701          jsr       _Decode3BitOperandMode
00004494  584F      7702          addq.w    #4,A7
                    7703   DisassembleInstruction_151:
                    7704   ; }
                    7705   ; }
                    7706   ; /////////////////////////////////////////////////////////////////////////////////
                    7707   ; // if instruction is EOR to CCR
                    7708   ; /////////////////////////////////////////////////////////////////////////////////
                    7709   ; if(*OpCode == (unsigned short int)(0x0A3C))   {
00004496  2042      7710          move.l    D2,A0
00004498  3010      7711          move.w    (A0),D0
0000449A  0C40 0A3C 7712          cmp.w     #2620,D0
0000449E  662C      7713          bne.s     DisassembleInstruction_153
                    7714   ; InstructionSize = 1;
000044A0  24BC 0000 7715          move.l    #1,(A2)
000044A4  0001      
                    7716   ; sprintf(Instruction, "EORI #$%2X,CCR", OpCode[1] & (unsigned short int)(0x00FF)) ;
000044A6  2042      7717          move.l    D2,A0
000044A8  3228 0002 7718          move.w    2(A0),D1
000044AC  C27C 00FF 7719          and.w     #255,D1
000044B0  C2BC 0000 7720          and.l     #65535,D1
000044B4  FFFF      
000044B6  2F01      7721          move.l    D1,-(A7)
000044B8  4879 0084 7722          pea       @m68kde~1_308.L
000044BC  1BE2      
000044BE  4879 0084 7723          pea       _Instruction.L
000044C2  04DC      
000044C4  4E95      7724          jsr       (A5)
000044C6  DEFC 000C 7725          add.w     #12,A7
                    7726   ; InstructionSize += 1;
000044CA  5292      7727          addq.l    #1,(A2)
                    7728   DisassembleInstruction_153:
                    7729   ; }
                    7730   ; /////////////////////////////////////////////////////////////////////////////////
                    7731   ; // if instruction is EORI #data,SR
                    7732   ; /////////////////////////////////////////////////////////////////////////////////
                    7733   ; if(*OpCode  == (unsigned short int)(0x0A7C))   {
000044CC  2042      7734          move.l    D2,A0
000044CE  3010      7735          move.w    (A0),D0
000044D0  0C40 0A7C 7736          cmp.w     #2684,D0
000044D4  6622      7737          bne.s     DisassembleInstruction_155
                    7738   ; InstructionSize = 2;
000044D6  24BC 0000 7739          move.l    #2,(A2)
000044DA  0002      
                    7740   ; sprintf(Instruction, "EORI #$%X,SR", OpCode[1]);
000044DC  2042      7741          move.l    D2,A0
000044DE  3228 0002 7742          move.w    2(A0),D1
000044E2  48C1      7743          ext.l     D1
000044E4  2F01      7744          move.l    D1,-(A7)
000044E6  4879 0084 7745          pea       @m68kde~1_309.L
000044EA  1BF2      
000044EC  4879 0084 7746          pea       _Instruction.L
000044F0  04DC      
000044F2  4E95      7747          jsr       (A5)
000044F4  DEFC 000C 7748          add.w     #12,A7
                    7749   DisassembleInstruction_155:
                    7750   ; }
                    7751   ; /////////////////////////////////////////////////////////////////////////////////
                    7752   ; // if instruction is EXG
                    7753   ; /////////////////////////////////////////////////////////////////////////////////
                    7754   ; if((*OpCode & (unsigned short int)(0xF100 )) == (unsigned short int)(0xC100))   {
000044F8  2042      7755          move.l    D2,A0
000044FA  3010      7756          move.w    (A0),D0
000044FC  C07C F100 7757          and.w     #61696,D0
00004500  0C40 C100 7758          cmp.w     #49408,D0
00004504  6600 00E0 7759          bne       DisassembleInstruction_163
                    7760   ; Rx = ((*OpCode >> 9) & (unsigned short int)(0x7)) ;
00004508  2042      7761          move.l    D2,A0
0000450A  3010      7762          move.w    (A0),D0
0000450C  E040      7763          asr.w     #8,D0
0000450E  E240      7764          asr.w     #1,D0
00004510  C07C 0007 7765          and.w     #7,D0
00004514  3D40 FFF0 7766          move.w    D0,-16(A6)
                    7767   ; Ry = (*OpCode & (unsigned short int)(0x7)) ;
00004518  2042      7768          move.l    D2,A0
0000451A  3010      7769          move.w    (A0),D0
0000451C  C07C 0007 7770          and.w     #7,D0
00004520  3D40 FFF2 7771          move.w    D0,-14(A6)
                    7772   ; EXGOpMode = ((*OpCode >> 3) & (unsigned short int)(0x1F)) ;
00004524  2042      7773          move.l    D2,A0
00004526  3010      7774          move.w    (A0),D0
00004528  E640      7775          asr.w     #3,D0
0000452A  C07C 001F 7776          and.w     #31,D0
0000452E  3D40 FFF4 7777          move.w    D0,-12(A6)
                    7778   ; if(EXGOpMode == (unsigned short int)(0x0008))   {
00004532  302E FFF4 7779          move.w    -12(A6),D0
00004536  0C40 0008 7780          cmp.w     #8,D0
0000453A  6634      7781          bne.s     DisassembleInstruction_159
                    7782   ; InstructionSize = 1;
0000453C  24BC 0000 7783          move.l    #1,(A2)
00004540  0001      
                    7784   ; sprintf(Instruction, "EXG D%d,D%d", Rx, Ry) ;
00004542  322E FFF2 7785          move.w    -14(A6),D1
00004546  C2BC 0000 7786          and.l     #65535,D1
0000454A  FFFF      
0000454C  2F01      7787          move.l    D1,-(A7)
0000454E  322E FFF0 7788          move.w    -16(A6),D1
00004552  C2BC 0000 7789          and.l     #65535,D1
00004556  FFFF      
00004558  2F01      7790          move.l    D1,-(A7)
0000455A  4879 0084 7791          pea       @m68kde~1_310.L
0000455E  1C00      
00004560  4879 0084 7792          pea       _Instruction.L
00004564  04DC      
00004566  4E95      7793          jsr       (A5)
00004568  DEFC 0010 7794          add.w     #16,A7
0000456C  6000 0078 7795          bra       DisassembleInstruction_163
                    7796   DisassembleInstruction_159:
                    7797   ; }
                    7798   ; else if(EXGOpMode == (unsigned short int)(0x0009))  {
00004570  302E FFF4 7799          move.w    -12(A6),D0
00004574  0C40 0009 7800          cmp.w     #9,D0
00004578  6632      7801          bne.s     DisassembleInstruction_161
                    7802   ; InstructionSize = 1;
0000457A  24BC 0000 7803          move.l    #1,(A2)
0000457E  0001      
                    7804   ; sprintf(Instruction, "EXG A%d,A%d", Rx, Ry) ;
00004580  322E FFF2 7805          move.w    -14(A6),D1
00004584  C2BC 0000 7806          and.l     #65535,D1
00004588  FFFF      
0000458A  2F01      7807          move.l    D1,-(A7)
0000458C  322E FFF0 7808          move.w    -16(A6),D1
00004590  C2BC 0000 7809          and.l     #65535,D1
00004594  FFFF      
00004596  2F01      7810          move.l    D1,-(A7)
00004598  4879 0084 7811          pea       @m68kde~1_311.L
0000459C  1C0C      
0000459E  4879 0084 7812          pea       _Instruction.L
000045A2  04DC      
000045A4  4E95      7813          jsr       (A5)
000045A6  DEFC 0010 7814          add.w     #16,A7
000045AA  603A      7815          bra.s     DisassembleInstruction_163
                    7816   DisassembleInstruction_161:
                    7817   ; }
                    7818   ; else if(EXGOpMode == (unsigned short int)(0x0011))  {
000045AC  302E FFF4 7819          move.w    -12(A6),D0
000045B0  0C40 0011 7820          cmp.w     #17,D0
000045B4  6630      7821          bne.s     DisassembleInstruction_163
                    7822   ; InstructionSize = 1;
000045B6  24BC 0000 7823          move.l    #1,(A2)
000045BA  0001      
                    7824   ; sprintf(Instruction, "EXG D%d,A%d", Rx, Ry) ;
000045BC  322E FFF2 7825          move.w    -14(A6),D1
000045C0  C2BC 0000 7826          and.l     #65535,D1
000045C4  FFFF      
000045C6  2F01      7827          move.l    D1,-(A7)
000045C8  322E FFF0 7828          move.w    -16(A6),D1
000045CC  C2BC 0000 7829          and.l     #65535,D1
000045D0  FFFF      
000045D2  2F01      7830          move.l    D1,-(A7)
000045D4  4879 0084 7831          pea       @m68kde~1_312.L
000045D8  1C18      
000045DA  4879 0084 7832          pea       _Instruction.L
000045DE  04DC      
000045E0  4E95      7833          jsr       (A5)
000045E2  DEFC 0010 7834          add.w     #16,A7
                    7835   DisassembleInstruction_163:
                    7836   ; }
                    7837   ; }
                    7838   ; /////////////////////////////////////////////////////////////////////////////////
                    7839   ; // if instruction is EXT
                    7840   ; /////////////////////////////////////////////////////////////////////////////////
                    7841   ; if((*OpCode & (unsigned short int)(0xFE38)) == (unsigned short int)(0x4800))
000045E6  2042      7842          move.l    D2,A0
000045E8  3010      7843          move.w    (A0),D0
000045EA  C07C FE38 7844          and.w     #65080,D0
000045EE  0C40 4800 7845          cmp.w     #18432,D0
000045F2  6600 0054 7846          bne       DisassembleInstruction_165
                    7847   ; {
                    7848   ; InstructionSize = 1;
000045F6  24BC 0000 7849          move.l    #1,(A2)
000045FA  0001      
                    7850   ; strcpy(Instruction,"EXT") ;
000045FC  4879 0084 7851          pea       @m68kde~1_313.L
00004600  1C24      
00004602  4879 0084 7852          pea       _Instruction.L
00004606  04DC      
00004608  4EB9 0000 7853          jsr       _strcpy
0000460C  54EE      
0000460E  504F      7854          addq.w    #8,A7
                    7855   ; if((*OpCode & (unsigned short int)(0x00C0)) == (unsigned short int)(0x00C0))
00004610  2042      7856          move.l    D2,A0
00004612  3010      7857          move.w    (A0),D0
00004614  C07C 00C0 7858          and.w     #192,D0
00004618  0C40 00C0 7859          cmp.w     #192,D0
0000461C  660E      7860          bne.s     DisassembleInstruction_167
                    7861   ; strcatInstruction(".L ") ;
0000461E  4879 0084 7862          pea       @m68kde~1_314.L
00004622  1C28      
00004624  4EB8 0CD4 7863          jsr       _strcatInstruction
00004628  584F      7864          addq.w    #4,A7
0000462A  600C      7865          bra.s     DisassembleInstruction_168
                    7866   DisassembleInstruction_167:
                    7867   ; else
                    7868   ; strcatInstruction(".W ") ;
0000462C  4879 0084 7869          pea       @m68kde~1_315.L
00004630  1C2C      
00004632  4EB8 0CD4 7870          jsr       _strcatInstruction
00004636  584F      7871          addq.w    #4,A7
                    7872   DisassembleInstruction_168:
                    7873   ; Decode6BitEA(OpCode,0,0,0) ;
00004638  42A7      7874          clr.l     -(A7)
0000463A  42A7      7875          clr.l     -(A7)
0000463C  42A7      7876          clr.l     -(A7)
0000463E  2F02      7877          move.l    D2,-(A7)
00004640  4EB8 3038 7878          jsr       _Decode6BitEA
00004644  DEFC 0010 7879          add.w     #16,A7
                    7880   DisassembleInstruction_165:
                    7881   ; }
                    7882   ; /////////////////////////////////////////////////////////////////////////////////
                    7883   ; // if instruction is ILLEGAL $4afc
                    7884   ; /////////////////////////////////////////////////////////////////////////////////
                    7885   ; if(*OpCode == (unsigned short int)(0x4AFC)) {
00004648  2042      7886          move.l    D2,A0
0000464A  3010      7887          move.w    (A0),D0
0000464C  0C40 4AFC 7888          cmp.w     #19196,D0
00004650  661A      7889          bne.s     DisassembleInstruction_169
                    7890   ; InstructionSize = 1;
00004652  24BC 0000 7891          move.l    #1,(A2)
00004656  0001      
                    7892   ; strcpy(Instruction,"ILLEGAL ($4AFC)") ;
00004658  4879 0084 7893          pea       @m68kde~1_316.L
0000465C  1C30      
0000465E  4879 0084 7894          pea       _Instruction.L
00004662  04DC      
00004664  4EB9 0000 7895          jsr       _strcpy
00004668  54EE      
0000466A  504F      7896          addq.w    #8,A7
                    7897   DisassembleInstruction_169:
                    7898   ; }
                    7899   ; /////////////////////////////////////////////////////////////////////////////////
                    7900   ; // if instruction is JMP
                    7901   ; /////////////////////////////////////////////////////////////////////////////////
                    7902   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x4EC0))
0000466C  2042      7903          move.l    D2,A0
0000466E  3010      7904          move.w    (A0),D0
00004670  C07C FFC0 7905          and.w     #65472,D0
00004674  0C40 4EC0 7906          cmp.w     #20160,D0
00004678  662A      7907          bne.s     DisassembleInstruction_171
                    7908   ; {
                    7909   ; InstructionSize = 1;
0000467A  24BC 0000 7910          move.l    #1,(A2)
0000467E  0001      
                    7911   ; strcpy(Instruction,"JMP ") ;
00004680  4879 0084 7912          pea       @m68kde~1_317.L
00004684  1C40      
00004686  4879 0084 7913          pea       _Instruction.L
0000468A  04DC      
0000468C  4EB9 0000 7914          jsr       _strcpy
00004690  54EE      
00004692  504F      7915          addq.w    #8,A7
                    7916   ; Decode6BitEA(OpCode,0,0,0) ;
00004694  42A7      7917          clr.l     -(A7)
00004696  42A7      7918          clr.l     -(A7)
00004698  42A7      7919          clr.l     -(A7)
0000469A  2F02      7920          move.l    D2,-(A7)
0000469C  4EB8 3038 7921          jsr       _Decode6BitEA
000046A0  DEFC 0010 7922          add.w     #16,A7
                    7923   DisassembleInstruction_171:
                    7924   ; }
                    7925   ; /////////////////////////////////////////////////////////////////////////////////
                    7926   ; // if instruction is JSR
                    7927   ; /////////////////////////////////////////////////////////////////////////////////
                    7928   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x4E80))
000046A4  2042      7929          move.l    D2,A0
000046A6  3010      7930          move.w    (A0),D0
000046A8  C07C FFC0 7931          and.w     #65472,D0
000046AC  0C40 4E80 7932          cmp.w     #20096,D0
000046B0  662A      7933          bne.s     DisassembleInstruction_173
                    7934   ; {
                    7935   ; InstructionSize = 1;
000046B2  24BC 0000 7936          move.l    #1,(A2)
000046B6  0001      
                    7937   ; strcpy(Instruction,"JSR ") ;
000046B8  4879 0084 7938          pea       @m68kde~1_318.L
000046BC  1C46      
000046BE  4879 0084 7939          pea       _Instruction.L
000046C2  04DC      
000046C4  4EB9 0000 7940          jsr       _strcpy
000046C8  54EE      
000046CA  504F      7941          addq.w    #8,A7
                    7942   ; Decode6BitEA(OpCode,0,0,0) ;
000046CC  42A7      7943          clr.l     -(A7)
000046CE  42A7      7944          clr.l     -(A7)
000046D0  42A7      7945          clr.l     -(A7)
000046D2  2F02      7946          move.l    D2,-(A7)
000046D4  4EB8 3038 7947          jsr       _Decode6BitEA
000046D8  DEFC 0010 7948          add.w     #16,A7
                    7949   DisassembleInstruction_173:
                    7950   ; }
                    7951   ; /////////////////////////////////////////////////////////////////////////////////
                    7952   ; // if instruction is LEA
                    7953   ; /////////////////////////////////////////////////////////////////////////////////
                    7954   ; if((*OpCode & (unsigned short int)(0xF1C0)) == (unsigned short int)(0x41C0))
000046DC  2042      7955          move.l    D2,A0
000046DE  3010      7956          move.w    (A0),D0
000046E0  C07C F1C0 7957          and.w     #61888,D0
000046E4  0C40 41C0 7958          cmp.w     #16832,D0
000046E8  6600 0056 7959          bne       DisassembleInstruction_175
                    7960   ; {
                    7961   ; InstructionSize = 1;
000046EC  24BC 0000 7962          move.l    #1,(A2)
000046F0  0001      
                    7963   ; strcpy(Instruction,"LEA ") ;
000046F2  4879 0084 7964          pea       @m68kde~1_319.L
000046F6  1C4C      
000046F8  4879 0084 7965          pea       _Instruction.L
000046FC  04DC      
000046FE  4EB9 0000 7966          jsr       _strcpy
00004702  54EE      
00004704  504F      7967          addq.w    #8,A7
                    7968   ; Decode6BitEA(OpCode,0,0,0) ;
00004706  42A7      7969          clr.l     -(A7)
00004708  42A7      7970          clr.l     -(A7)
0000470A  42A7      7971          clr.l     -(A7)
0000470C  2F02      7972          move.l    D2,-(A7)
0000470E  4EB8 3038 7973          jsr       _Decode6BitEA
00004712  DEFC 0010 7974          add.w     #16,A7
                    7975   ; sprintf(TempString, ",A%d", ((*OpCode >> 9) & (unsigned short int)(0x7)));
00004716  2042      7976          move.l    D2,A0
00004718  3210      7977          move.w    (A0),D1
0000471A  E041      7978          asr.w     #8,D1
0000471C  E241      7979          asr.w     #1,D1
0000471E  C27C 0007 7980          and.w     #7,D1
00004722  C2BC 0000 7981          and.l     #65535,D1
00004726  FFFF      
00004728  2F01      7982          move.l    D1,-(A7)
0000472A  4879 0084 7983          pea       @m68kde~1_320.L
0000472E  1C52      
00004730  2F0C      7984          move.l    A4,-(A7)
00004732  4E95      7985          jsr       (A5)
00004734  DEFC 000C 7986          add.w     #12,A7
                    7987   ; strcatInstruction(TempString);
00004738  2F0C      7988          move.l    A4,-(A7)
0000473A  4EB8 0CD4 7989          jsr       _strcatInstruction
0000473E  584F      7990          addq.w    #4,A7
                    7991   DisassembleInstruction_175:
                    7992   ; }
                    7993   ; /////////////////////////////////////////////////////////////////////////////////
                    7994   ; // if instruction is LINK.W
                    7995   ; /////////////////////////////////////////////////////////////////////////////////
                    7996   ; if((*OpCode & (unsigned short int)(0xFFF8)) == (unsigned short int)(0x4E50))
00004740  2042      7997          move.l    D2,A0
00004742  3010      7998          move.w    (A0),D0
00004744  C07C FFF8 7999          and.w     #65528,D0
00004748  0C40 4E50 8000          cmp.w     #20048,D0
0000474C  6600 0052 8001          bne       DisassembleInstruction_177
                    8002   ; {
                    8003   ; InstructionSize = 1;
00004750  24BC 0000 8004          move.l    #1,(A2)
00004754  0001      
                    8005   ; strcpy(Instruction,"LINK ") ;
00004756  4879 0084 8006          pea       @m68kde~1_321.L
0000475A  1C58      
0000475C  4879 0084 8007          pea       _Instruction.L
00004760  04DC      
00004762  4EB9 0000 8008          jsr       _strcpy
00004766  54EE      
00004768  504F      8009          addq.w    #8,A7
                    8010   ; sprintf(TempString, "A%d,#%d", ((*OpCode) & (unsigned short int)(0x7)),OpCode[1]);
0000476A  2042      8011          move.l    D2,A0
0000476C  3228 0002 8012          move.w    2(A0),D1
00004770  48C1      8013          ext.l     D1
00004772  2F01      8014          move.l    D1,-(A7)
00004774  2042      8015          move.l    D2,A0
00004776  3210      8016          move.w    (A0),D1
00004778  C27C 0007 8017          and.w     #7,D1
0000477C  C2BC 0000 8018          and.l     #65535,D1
00004780  FFFF      
00004782  2F01      8019          move.l    D1,-(A7)
00004784  4879 0084 8020          pea       @m68kde~1_322.L
00004788  1C5E      
0000478A  2F0C      8021          move.l    A4,-(A7)
0000478C  4E95      8022          jsr       (A5)
0000478E  DEFC 0010 8023          add.w     #16,A7
                    8024   ; InstructionSize = 2 ;
00004792  24BC 0000 8025          move.l    #2,(A2)
00004796  0002      
                    8026   ; strcatInstruction(TempString);
00004798  2F0C      8027          move.l    A4,-(A7)
0000479A  4EB8 0CD4 8028          jsr       _strcatInstruction
0000479E  584F      8029          addq.w    #4,A7
                    8030   DisassembleInstruction_177:
                    8031   ; }
                    8032   ; /////////////////////////////////////////////////////////////////////////////////
                    8033   ; // if instruction is MOVE, MOVEA
                    8034   ; /////////////////////////////////////////////////////////////////////////////////
                    8035   ; if((*OpCode & (unsigned short int)(0xC000)) == (unsigned short int)(0x0000))
000047A0  2042      8036          move.l    D2,A0
000047A2  3010      8037          move.w    (A0),D0
000047A4  C07C C000 8038          and.w     #49152,D0
000047A8  6600 00F0 8039          bne       DisassembleInstruction_193
                    8040   ; {
                    8041   ; Size = (*OpCode & (unsigned short int)(0x3000)) >> 12 ;   // get 2 bit size in bits 13/12 into 1,0
000047AC  2042      8042          move.l    D2,A0
000047AE  3010      8043          move.w    (A0),D0
000047B0  C07C 3000 8044          and.w     #12288,D0
000047B4  E048      8045          lsr.w     #8,D0
000047B6  E848      8046          lsr.w     #4,D0
000047B8  3D40 FFE2 8047          move.w    D0,-30(A6)
                    8048   ; OpMode = (*OpCode >> 3) & (unsigned short int)(0x0007);   // get 3 bit source mode operand
000047BC  2042      8049          move.l    D2,A0
000047BE  3010      8050          move.w    (A0),D0
000047C0  E640      8051          asr.w     #3,D0
000047C2  C07C 0007 8052          and.w     #7,D0
000047C6  3600      8053          move.w    D0,D3
                    8054   ; SourceReg = (*OpCode) & (unsigned short int)(0x0007);     // get 3 bit source register number
000047C8  2042      8055          move.l    D2,A0
000047CA  3010      8056          move.w    (A0),D0
000047CC  C07C 0007 8057          and.w     #7,D0
000047D0  3D40 FFF6 8058          move.w    D0,-10(A6)
                    8059   ; DataSize = 0 ;
000047D4  7E00      8060          moveq     #0,D7
                    8061   ; // if source addressing mode is d16(a0) or d8(a0,d0)
                    8062   ; if((OpMode == (unsigned short int)(0x0005)) || (OpMode == (unsigned short int)(0x0006)))
000047D6  0C43 0005 8063          cmp.w     #5,D3
000047DA  6706      8064          beq.s     DisassembleInstruction_183
000047DC  0C43 0006 8065          cmp.w     #6,D3
000047E0  6602      8066          bne.s     DisassembleInstruction_181
                    8067   DisassembleInstruction_183:
                    8068   ; DataSize = 1;  // source operands has 1 word after EA
000047E2  7E01      8069          moveq     #1,D7
                    8070   DisassembleInstruction_181:
                    8071   ; // if source addressing mode is a 16 or 32 bit address
                    8072   ; if((OpMode == (unsigned short int)(0x0007))) {
000047E4  0C43 0007 8073          cmp.w     #7,D3
000047E8  660C      8074          bne.s     DisassembleInstruction_187
                    8075   ; if(SourceReg == (unsigned short int)(0x0000))         // short address
000047EA  302E FFF6 8076          move.w    -10(A6),D0
000047EE  6604      8077          bne.s     DisassembleInstruction_186
                    8078   ; DataSize = 1 ;
000047F0  7E01      8079          moveq     #1,D7
000047F2  6002      8080          bra.s     DisassembleInstruction_187
                    8081   DisassembleInstruction_186:
                    8082   ; else
                    8083   ; DataSize = 2 ;
000047F4  7E02      8084          moveq     #2,D7
                    8085   DisassembleInstruction_187:
                    8086   ; }
                    8087   ; // if source addressing mode is # then figure out size
                    8088   ; if((OpMode == (unsigned short int)(0x0007)) && (SourceReg == (unsigned short int)(0x0004)))    {
000047F6  0C43 0007 8089          cmp.w     #7,D3
000047FA  6624      8090          bne.s     DisassembleInstruction_191
000047FC  302E FFF6 8091          move.w    -10(A6),D0
00004800  0C40 0004 8092          cmp.w     #4,D0
00004804  661A      8093          bne.s     DisassembleInstruction_191
                    8094   ; if((Size == (unsigned short int)(1)) || (Size == (unsigned short int)(3)))
00004806  302E FFE2 8095          move.w    -30(A6),D0
0000480A  0C40 0001 8096          cmp.w     #1,D0
0000480E  670A      8097          beq.s     DisassembleInstruction_192
00004810  302E FFE2 8098          move.w    -30(A6),D0
00004814  0C40 0003 8099          cmp.w     #3,D0
00004818  6604      8100          bne.s     DisassembleInstruction_190
                    8101   DisassembleInstruction_192:
                    8102   ; DataSize = 1;
0000481A  7E01      8103          moveq     #1,D7
0000481C  6002      8104          bra.s     DisassembleInstruction_191
                    8105   DisassembleInstruction_190:
                    8106   ; else
                    8107   ; DataSize = 2 ;
0000481E  7E02      8108          moveq     #2,D7
                    8109   DisassembleInstruction_191:
                    8110   ; //printf("DataSize = %d",DataSize) ;
                    8111   ; }
                    8112   ; if(Size != 0)
00004820  302E FFE2 8113          move.w    -30(A6),D0
00004824  6700 0074 8114          beq       DisassembleInstruction_193
                    8115   ; {
                    8116   ; InstructionSize = 1;
00004828  24BC 0000 8117          move.l    #1,(A2)
0000482C  0001      
                    8118   ; if(Size == 1)
0000482E  302E FFE2 8119          move.w    -30(A6),D0
00004832  0C40 0001 8120          cmp.w     #1,D0
00004836  660C      8121          bne.s     DisassembleInstruction_195
                    8122   ; strcpyInstruction("MOVE.B ") ;
00004838  4879 0084 8123          pea       @m68kde~1_323.L
0000483C  1C66      
0000483E  4E93      8124          jsr       (A3)
00004840  584F      8125          addq.w    #4,A7
00004842  6020      8126          bra.s     DisassembleInstruction_198
                    8127   DisassembleInstruction_195:
                    8128   ; else if(Size == 2)
00004844  302E FFE2 8129          move.w    -30(A6),D0
00004848  0C40 0002 8130          cmp.w     #2,D0
0000484C  660C      8131          bne.s     DisassembleInstruction_197
                    8132   ; strcpyInstruction("MOVE.L ") ;
0000484E  4879 0084 8133          pea       @m68kde~1_324.L
00004852  1C6E      
00004854  4E93      8134          jsr       (A3)
00004856  584F      8135          addq.w    #4,A7
00004858  600A      8136          bra.s     DisassembleInstruction_198
                    8137   DisassembleInstruction_197:
                    8138   ; else
                    8139   ; strcpyInstruction("MOVE.W ") ;
0000485A  4879 0084 8140          pea       @m68kde~1_325.L
0000485E  1C76      
00004860  4E93      8141          jsr       (A3)
00004862  584F      8142          addq.w    #4,A7
                    8143   DisassembleInstruction_198:
                    8144   ; Decode6BitEA(OpCode,0,0,1) ;
00004864  4878 0001 8145          pea       1
00004868  42A7      8146          clr.l     -(A7)
0000486A  42A7      8147          clr.l     -(A7)
0000486C  2F02      8148          move.l    D2,-(A7)
0000486E  4EB8 3038 8149          jsr       _Decode6BitEA
00004872  DEFC 0010 8150          add.w     #16,A7
                    8151   ; strcatInstruction(",") ;
00004876  4879 0084 8152          pea       @m68kde~1_326.L
0000487A  1C7E      
0000487C  4EB8 0CD4 8153          jsr       _strcatInstruction
00004880  584F      8154          addq.w    #4,A7
                    8155   ; // tell next function how many words lie between opcode and destination, could be 1 or 2 e.g. with # addressing move.bwl #$data,<EA>
                    8156   ; // but subtract 1 to make the maths correct in the called function
                    8157   ; Decode6BitEA(OpCode,2,(DataSize),0) ;
00004882  42A7      8158          clr.l     -(A7)
00004884  CEBC 0000 8159          and.l     #65535,D7
00004888  FFFF      
0000488A  2F07      8160          move.l    D7,-(A7)
0000488C  4878 0002 8161          pea       2
00004890  2F02      8162          move.l    D2,-(A7)
00004892  4EB8 3038 8163          jsr       _Decode6BitEA
00004896  DEFC 0010 8164          add.w     #16,A7
                    8165   DisassembleInstruction_193:
                    8166   ; }
                    8167   ; }
                    8168   ; /////////////////////////////////////////////////////////////////////////////////
                    8169   ; // if instruction is MOVE <EA>,CCR
                    8170   ; /////////////////////////////////////////////////////////////////////////////////
                    8171   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x44C0))
0000489A  2042      8172          move.l    D2,A0
0000489C  3010      8173          move.w    (A0),D0
0000489E  C07C FFC0 8174          and.w     #65472,D0
000048A2  0C40 44C0 8175          cmp.w     #17600,D0
000048A6  6636      8176          bne.s     DisassembleInstruction_199
                    8177   ; {
                    8178   ; InstructionSize = 1;
000048A8  24BC 0000 8179          move.l    #1,(A2)
000048AC  0001      
                    8180   ; strcpy(Instruction,"MOVE ") ;
000048AE  4879 0084 8181          pea       @m68kde~1_327.L
000048B2  1C80      
000048B4  4879 0084 8182          pea       _Instruction.L
000048B8  04DC      
000048BA  4EB9 0000 8183          jsr       _strcpy
000048BE  54EE      
000048C0  504F      8184          addq.w    #8,A7
                    8185   ; Decode6BitEA(OpCode,0,0,0) ;
000048C2  42A7      8186          clr.l     -(A7)
000048C4  42A7      8187          clr.l     -(A7)
000048C6  42A7      8188          clr.l     -(A7)
000048C8  2F02      8189          move.l    D2,-(A7)
000048CA  4EB8 3038 8190          jsr       _Decode6BitEA
000048CE  DEFC 0010 8191          add.w     #16,A7
                    8192   ; strcatInstruction(",CCR") ;
000048D2  4879 0084 8193          pea       @m68kde~1_328.L
000048D6  1C86      
000048D8  4EB8 0CD4 8194          jsr       _strcatInstruction
000048DC  584F      8195          addq.w    #4,A7
                    8196   DisassembleInstruction_199:
                    8197   ; }
                    8198   ; /////////////////////////////////////////////////////////////////////////////////
                    8199   ; // if instruction is MOVE SR,<EA>
                    8200   ; /////////////////////////////////////////////////////////////////////////////////
                    8201   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x40C0))
000048DE  2042      8202          move.l    D2,A0
000048E0  3010      8203          move.w    (A0),D0
000048E2  C07C FFC0 8204          and.w     #65472,D0
000048E6  0C40 40C0 8205          cmp.w     #16576,D0
000048EA  662A      8206          bne.s     DisassembleInstruction_201
                    8207   ; {
                    8208   ; InstructionSize = 1;
000048EC  24BC 0000 8209          move.l    #1,(A2)
000048F0  0001      
                    8210   ; strcpy(Instruction,"MOVE SR,") ;
000048F2  4879 0084 8211          pea       @m68kde~1_329.L
000048F6  1C8C      
000048F8  4879 0084 8212          pea       _Instruction.L
000048FC  04DC      
000048FE  4EB9 0000 8213          jsr       _strcpy
00004902  54EE      
00004904  504F      8214          addq.w    #8,A7
                    8215   ; Decode6BitEA(OpCode,0,0,0) ;
00004906  42A7      8216          clr.l     -(A7)
00004908  42A7      8217          clr.l     -(A7)
0000490A  42A7      8218          clr.l     -(A7)
0000490C  2F02      8219          move.l    D2,-(A7)
0000490E  4EB8 3038 8220          jsr       _Decode6BitEA
00004912  DEFC 0010 8221          add.w     #16,A7
                    8222   DisassembleInstruction_201:
                    8223   ; }
                    8224   ; /////////////////////////////////////////////////////////////////////////////////
                    8225   ; // if instruction is MOVE <EA>,SR
                    8226   ; /////////////////////////////////////////////////////////////////////////////////
                    8227   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x46C0))
00004916  2042      8228          move.l    D2,A0
00004918  3010      8229          move.w    (A0),D0
0000491A  C07C FFC0 8230          and.w     #65472,D0
0000491E  0C40 46C0 8231          cmp.w     #18112,D0
00004922  6636      8232          bne.s     DisassembleInstruction_203
                    8233   ; {
                    8234   ; InstructionSize = 1;
00004924  24BC 0000 8235          move.l    #1,(A2)
00004928  0001      
                    8236   ; strcpy(Instruction,"MOVE ") ;
0000492A  4879 0084 8237          pea       @m68kde~1_330.L
0000492E  1C96      
00004930  4879 0084 8238          pea       _Instruction.L
00004934  04DC      
00004936  4EB9 0000 8239          jsr       _strcpy
0000493A  54EE      
0000493C  504F      8240          addq.w    #8,A7
                    8241   ; Decode6BitEA(OpCode,0,0,0) ;
0000493E  42A7      8242          clr.l     -(A7)
00004940  42A7      8243          clr.l     -(A7)
00004942  42A7      8244          clr.l     -(A7)
00004944  2F02      8245          move.l    D2,-(A7)
00004946  4EB8 3038 8246          jsr       _Decode6BitEA
0000494A  DEFC 0010 8247          add.w     #16,A7
                    8248   ; strcatInstruction(",SR") ;
0000494E  4879 0084 8249          pea       @m68kde~1_331.L
00004952  1C9C      
00004954  4EB8 0CD4 8250          jsr       _strcatInstruction
00004958  584F      8251          addq.w    #4,A7
                    8252   DisassembleInstruction_203:
                    8253   ; }
                    8254   ; /////////////////////////////////////////////////////////////////////////////////
                    8255   ; // if instruction is MOVE USP,An
                    8256   ; /////////////////////////////////////////////////////////////////////////////////
                    8257   ; if((*OpCode & (unsigned short int)(0xFFF0)) == (unsigned short int)(0x4E60))
0000495A  2042      8258          move.l    D2,A0
0000495C  3010      8259          move.w    (A0),D0
0000495E  C07C FFF0 8260          and.w     #65520,D0
00004962  0C40 4E60 8261          cmp.w     #20064,D0
00004966  6600 0060 8262          bne       DisassembleInstruction_208
                    8263   ; {
                    8264   ; InstructionSize = 1;
0000496A  24BC 0000 8265          move.l    #1,(A2)
0000496E  0001      
                    8266   ; Register = (*OpCode & (unsigned short int)(0x0007)) ;
00004970  2042      8267          move.l    D2,A0
00004972  3010      8268          move.w    (A0),D0
00004974  C07C 0007 8269          and.w     #7,D0
00004978  3D40 FFEA 8270          move.w    D0,-22(A6)
                    8271   ; if((*OpCode & (unsigned short int)(0x0008)) == (unsigned short int)(0x0008))        // transfer sp to address regier
0000497C  2042      8272          move.l    D2,A0
0000497E  3010      8273          move.w    (A0),D0
00004980  C07C 0008 8274          and.w     #8,D0
00004984  0C40 0008 8275          cmp.w     #8,D0
00004988  6620      8276          bne.s     DisassembleInstruction_207
                    8277   ; sprintf(Instruction, "MOVE USP,A%d", Register);
0000498A  322E FFEA 8278          move.w    -22(A6),D1
0000498E  C2BC 0000 8279          and.l     #65535,D1
00004992  FFFF      
00004994  2F01      8280          move.l    D1,-(A7)
00004996  4879 0084 8281          pea       @m68kde~1_332.L
0000499A  1CA0      
0000499C  4879 0084 8282          pea       _Instruction.L
000049A0  04DC      
000049A2  4E95      8283          jsr       (A5)
000049A4  DEFC 000C 8284          add.w     #12,A7
000049A8  601E      8285          bra.s     DisassembleInstruction_208
                    8286   DisassembleInstruction_207:
                    8287   ; else
                    8288   ; sprintf(Instruction, "MOVE A%d,USP", Register);
000049AA  322E FFEA 8289          move.w    -22(A6),D1
000049AE  C2BC 0000 8290          and.l     #65535,D1
000049B2  FFFF      
000049B4  2F01      8291          move.l    D1,-(A7)
000049B6  4879 0084 8292          pea       @m68kde~1_333.L
000049BA  1CAE      
000049BC  4879 0084 8293          pea       _Instruction.L
000049C0  04DC      
000049C2  4E95      8294          jsr       (A5)
000049C4  DEFC 000C 8295          add.w     #12,A7
                    8296   DisassembleInstruction_208:
                    8297   ; }
                    8298   ; /////////////////////////////////////////////////////////////////////////////////
                    8299   ; // if instruction is MOVEM
                    8300   ; /////////////////////////////////////////////////////////////////////////////////
                    8301   ; if((*OpCode & (unsigned short int)(0xFB80)) == (unsigned short int)(0x4880))
000049C8  2042      8302          move.l    D2,A0
000049CA  3010      8303          move.w    (A0),D0
000049CC  C07C FB80 8304          and.w     #64384,D0
000049D0  0C40 4880 8305          cmp.w     #18560,D0
000049D4  6600 01FC 8306          bne       DisassembleInstruction_230
                    8307   ; {
                    8308   ; OpMode = (*OpCode >> 3) & (unsigned short int)(0x0007) ;
000049D8  2042      8309          move.l    D2,A0
000049DA  3010      8310          move.w    (A0),D0
000049DC  E640      8311          asr.w     #3,D0
000049DE  C07C 0007 8312          and.w     #7,D0
000049E2  3600      8313          move.w    D0,D3
                    8314   ; if( (OpMode != (unsigned short int)(0x0)) &&
000049E4  4A43      8315          tst.w     D3
000049E6  6700 01EA 8316          beq       DisassembleInstruction_230
000049EA  0C43 0001 8317          cmp.w     #1,D3
000049EE  6700 01E2 8318          beq       DisassembleInstruction_230
000049F2  4A43      8319          tst.w     D3
000049F4  6700 01DC 8320          beq       DisassembleInstruction_230
                    8321   ; (OpMode != (unsigned short int)(0x1)) &&
                    8322   ; (OpMode != (unsigned short int)(0x0)))
                    8323   ; {
                    8324   ; InstructionSize = 1;
000049F8  24BC 0000 8325          move.l    #1,(A2)
000049FC  0001      
                    8326   ; strcpy(Instruction,"MOVEM") ;
000049FE  4879 0084 8327          pea       @m68kde~1_334.L
00004A02  1CBC      
00004A04  4879 0084 8328          pea       _Instruction.L
00004A08  04DC      
00004A0A  4EB9 0000 8329          jsr       _strcpy
00004A0E  54EE      
00004A10  504F      8330          addq.w    #8,A7
                    8331   ; InstructionSize ++ ;
00004A12  5292      8332          addq.l    #1,(A2)
                    8333   ; if((*OpCode & (unsigned short int)(0x0040)) == (unsigned short int)(0x0))
00004A14  2042      8334          move.l    D2,A0
00004A16  3010      8335          move.w    (A0),D0
00004A18  C07C 0040 8336          and.w     #64,D0
00004A1C  660E      8337          bne.s     DisassembleInstruction_213
                    8338   ; strcatInstruction(".W ") ;
00004A1E  4879 0084 8339          pea       @m68kde~1_335.L
00004A22  1CC2      
00004A24  4EB8 0CD4 8340          jsr       _strcatInstruction
00004A28  584F      8341          addq.w    #4,A7
00004A2A  600C      8342          bra.s     DisassembleInstruction_214
                    8343   DisassembleInstruction_213:
                    8344   ; else
                    8345   ; strcatInstruction(".L ") ;
00004A2C  4879 0084 8346          pea       @m68kde~1_336.L
00004A30  1CC6      
00004A32  4EB8 0CD4 8347          jsr       _strcatInstruction
00004A36  584F      8348          addq.w    #4,A7
                    8349   DisassembleInstruction_214:
                    8350   ; // movem  reg,-(An) if bit 10 = 0
                    8351   ; if((*OpCode & (unsigned short int)(0x0400))  == (unsigned short int)(0x0000))
00004A38  2042      8352          move.l    D2,A0
00004A3A  3010      8353          move.w    (A0),D0
00004A3C  C07C 0400 8354          and.w     #1024,D0
00004A40  6600 00D2 8355          bne       DisassembleInstruction_215
                    8356   ; {
                    8357   ; Mask = 0x8000 ;                     // bit 15 = 1
00004A44  3D7C 8000 8358          move.w    #32768,-2(A6)
00004A48  FFFE      
                    8359   ; DoneSlash = 0 ;
00004A4A  4246      8360          clr.w     D6
                    8361   ; for(i = 0; i < 16; i ++)    {
00004A4C  4284      8362          clr.l     D4
                    8363   DisassembleInstruction_217:
00004A4E  0C84 0000 8364          cmp.l     #16,D4
00004A52  0010      
00004A54  6C00 009E 8365          bge       DisassembleInstruction_219
                    8366   ; printf("") ;    // fixes bug otherwise the address registers doen't get printed (don't know why), something to do with sprintf I guess
00004A58  4879 0084 8367          pea       @m68kde~1_337.L
00004A5C  1CCA      
00004A5E  4EB9 0000 8368          jsr       _printf
00004A62  5644      
00004A64  584F      8369          addq.w    #4,A7
                    8370   ; if((OpCode[1] & Mask) == Mask)    {
00004A66  2042      8371          move.l    D2,A0
00004A68  3028 0002 8372          move.w    2(A0),D0
00004A6C  C06E FFFE 8373          and.w     -2(A6),D0
00004A70  B06E FFFE 8374          cmp.w     -2(A6),D0
00004A74  6600 006E 8375          bne       DisassembleInstruction_220
                    8376   ; if(i < 8 )  {
00004A78  0C84 0000 8377          cmp.l     #8,D4
00004A7C  0008      
00004A7E  6C2C      8378          bge.s     DisassembleInstruction_222
                    8379   ; if(DoneSlash == 0)  {
00004A80  4A46      8380          tst.w     D6
00004A82  6614      8381          bne.s     DisassembleInstruction_224
                    8382   ; sprintf(TempString, "D%d", i) ;
00004A84  2F04      8383          move.l    D4,-(A7)
00004A86  4879 0084 8384          pea       @m68kde~1_338.L
00004A8A  1CCC      
00004A8C  2F0C      8385          move.l    A4,-(A7)
00004A8E  4E95      8386          jsr       (A5)
00004A90  DEFC 000C 8387          add.w     #12,A7
                    8388   ; DoneSlash = 1;
00004A94  7C01      8389          moveq     #1,D6
00004A96  6010      8390          bra.s     DisassembleInstruction_225
                    8391   DisassembleInstruction_224:
                    8392   ; }
                    8393   ; else
                    8394   ; sprintf(TempString, "/D%d", i) ;
00004A98  2F04      8395          move.l    D4,-(A7)
00004A9A  4879 0084 8396          pea       @m68kde~1_339.L
00004A9E  1CD0      
00004AA0  2F0C      8397          move.l    A4,-(A7)
00004AA2  4E95      8398          jsr       (A5)
00004AA4  DEFC 000C 8399          add.w     #12,A7
                    8400   DisassembleInstruction_225:
00004AA8  6000 0032 8401          bra       DisassembleInstruction_227
                    8402   DisassembleInstruction_222:
                    8403   ; }
                    8404   ; else   {
                    8405   ; if(DoneSlash == 0)  {
00004AAC  4A46      8406          tst.w     D6
00004AAE  6618      8407          bne.s     DisassembleInstruction_226
                    8408   ; sprintf(TempString, "A%d", i-8) ;
00004AB0  2204      8409          move.l    D4,D1
00004AB2  5181      8410          subq.l    #8,D1
00004AB4  2F01      8411          move.l    D1,-(A7)
00004AB6  4879 0084 8412          pea       @m68kde~1_340.L
00004ABA  1CD6      
00004ABC  2F0C      8413          move.l    A4,-(A7)
00004ABE  4E95      8414          jsr       (A5)
00004AC0  DEFC 000C 8415          add.w     #12,A7
                    8416   ; DoneSlash = 1;
00004AC4  7C01      8417          moveq     #1,D6
00004AC6  6014      8418          bra.s     DisassembleInstruction_227
                    8419   DisassembleInstruction_226:
                    8420   ; }
                    8421   ; else
                    8422   ; sprintf(TempString, "/A%d", i-8) ;
00004AC8  2204      8423          move.l    D4,D1
00004ACA  5181      8424          subq.l    #8,D1
00004ACC  2F01      8425          move.l    D1,-(A7)
00004ACE  4879 0084 8426          pea       @m68kde~1_341.L
00004AD2  1CDA      
00004AD4  2F0C      8427          move.l    A4,-(A7)
00004AD6  4E95      8428          jsr       (A5)
00004AD8  DEFC 000C 8429          add.w     #12,A7
                    8430   DisassembleInstruction_227:
                    8431   ; }
                    8432   ; strcatInstruction(TempString) ;
00004ADC  2F0C      8433          move.l    A4,-(A7)
00004ADE  4EB8 0CD4 8434          jsr       _strcatInstruction
00004AE2  584F      8435          addq.w    #4,A7
                    8436   DisassembleInstruction_220:
                    8437   ; }
                    8438   ; Mask = Mask >> 1 ;
00004AE4  302E FFFE 8439          move.w    -2(A6),D0
00004AE8  E240      8440          asr.w     #1,D0
00004AEA  3D40 FFFE 8441          move.w    D0,-2(A6)
00004AEE  5284      8442          addq.l    #1,D4
00004AF0  6000 FF5C 8443          bra       DisassembleInstruction_217
                    8444   DisassembleInstruction_219:
                    8445   ; }
                    8446   ; strcatInstruction(",") ;
00004AF4  4879 0084 8447          pea       @m68kde~1_342.L
00004AF8  1CE0      
00004AFA  4EB8 0CD4 8448          jsr       _strcatInstruction
00004AFE  584F      8449          addq.w    #4,A7
                    8450   ; Decode6BitEA(OpCode,0,0,0) ;
00004B00  42A7      8451          clr.l     -(A7)
00004B02  42A7      8452          clr.l     -(A7)
00004B04  42A7      8453          clr.l     -(A7)
00004B06  2F02      8454          move.l    D2,-(A7)
00004B08  4EB8 3038 8455          jsr       _Decode6BitEA
00004B0C  DEFC 0010 8456          add.w     #16,A7
00004B10  6000 00C0 8457          bra       DisassembleInstruction_230
                    8458   DisassembleInstruction_215:
                    8459   ; }
                    8460   ; //movem  (An)+,reg
                    8461   ; else    {
                    8462   ; Decode6BitEA(OpCode,0,0,0) ;
00004B14  42A7      8463          clr.l     -(A7)
00004B16  42A7      8464          clr.l     -(A7)
00004B18  42A7      8465          clr.l     -(A7)
00004B1A  2F02      8466          move.l    D2,-(A7)
00004B1C  4EB8 3038 8467          jsr       _Decode6BitEA
00004B20  DEFC 0010 8468          add.w     #16,A7
                    8469   ; strcatInstruction(",") ;
00004B24  4879 0084 8470          pea       @m68kde~1_343.L
00004B28  1CE2      
00004B2A  4EB8 0CD4 8471          jsr       _strcatInstruction
00004B2E  584F      8472          addq.w    #4,A7
                    8473   ; Mask = 0x0001 ;                     // bit 0 = 1
00004B30  3D7C 0001 8474          move.w    #1,-2(A6)
00004B34  FFFE      
                    8475   ; DoneSlash = 0 ;
00004B36  4246      8476          clr.w     D6
                    8477   ; for(i = 0; i < 16 ; i ++)    {
00004B38  4284      8478          clr.l     D4
                    8479   DisassembleInstruction_228:
00004B3A  0C84 0000 8480          cmp.l     #16,D4
00004B3E  0010      
00004B40  6C00 0090 8481          bge       DisassembleInstruction_230
                    8482   ; if((OpCode[1] & Mask) == Mask)    {
00004B44  2042      8483          move.l    D2,A0
00004B46  3028 0002 8484          move.w    2(A0),D0
00004B4A  C06E FFFE 8485          and.w     -2(A6),D0
00004B4E  B06E FFFE 8486          cmp.w     -2(A6),D0
00004B52  6600 006E 8487          bne       DisassembleInstruction_231
                    8488   ; if(i < 8)   {       // data registers in bits 7-0
00004B56  0C84 0000 8489          cmp.l     #8,D4
00004B5A  0008      
00004B5C  6C2C      8490          bge.s     DisassembleInstruction_233
                    8491   ; if(DoneSlash == 0)  {
00004B5E  4A46      8492          tst.w     D6
00004B60  6614      8493          bne.s     DisassembleInstruction_235
                    8494   ; sprintf(TempString, "D%d", i) ;
00004B62  2F04      8495          move.l    D4,-(A7)
00004B64  4879 0084 8496          pea       @m68kde~1_344.L
00004B68  1CE4      
00004B6A  2F0C      8497          move.l    A4,-(A7)
00004B6C  4E95      8498          jsr       (A5)
00004B6E  DEFC 000C 8499          add.w     #12,A7
                    8500   ; DoneSlash = 1;
00004B72  7C01      8501          moveq     #1,D6
00004B74  6010      8502          bra.s     DisassembleInstruction_236
                    8503   DisassembleInstruction_235:
                    8504   ; }
                    8505   ; else
                    8506   ; sprintf(TempString, "/D%d", i) ;
00004B76  2F04      8507          move.l    D4,-(A7)
00004B78  4879 0084 8508          pea       @m68kde~1_345.L
00004B7C  1CE8      
00004B7E  2F0C      8509          move.l    A4,-(A7)
00004B80  4E95      8510          jsr       (A5)
00004B82  DEFC 000C 8511          add.w     #12,A7
                    8512   DisassembleInstruction_236:
00004B86  6000 0032 8513          bra       DisassembleInstruction_238
                    8514   DisassembleInstruction_233:
                    8515   ; }
                    8516   ; else    {
                    8517   ; if(DoneSlash == 0)  {
00004B8A  4A46      8518          tst.w     D6
00004B8C  6618      8519          bne.s     DisassembleInstruction_237
                    8520   ; sprintf(TempString, "A%d", i-8) ;
00004B8E  2204      8521          move.l    D4,D1
00004B90  5181      8522          subq.l    #8,D1
00004B92  2F01      8523          move.l    D1,-(A7)
00004B94  4879 0084 8524          pea       @m68kde~1_346.L
00004B98  1CEE      
00004B9A  2F0C      8525          move.l    A4,-(A7)
00004B9C  4E95      8526          jsr       (A5)
00004B9E  DEFC 000C 8527          add.w     #12,A7
                    8528   ; DoneSlash = 1;
00004BA2  7C01      8529          moveq     #1,D6
00004BA4  6014      8530          bra.s     DisassembleInstruction_238
                    8531   DisassembleInstruction_237:
                    8532   ; }
                    8533   ; else
                    8534   ; sprintf(TempString, "/A%d", i-8) ;
00004BA6  2204      8535          move.l    D4,D1
00004BA8  5181      8536          subq.l    #8,D1
00004BAA  2F01      8537          move.l    D1,-(A7)
00004BAC  4879 0084 8538          pea       @m68kde~1_347.L
00004BB0  1CF2      
00004BB2  2F0C      8539          move.l    A4,-(A7)
00004BB4  4E95      8540          jsr       (A5)
00004BB6  DEFC 000C 8541          add.w     #12,A7
                    8542   DisassembleInstruction_238:
                    8543   ; }
                    8544   ; strcatInstruction(TempString) ;
00004BBA  2F0C      8545          move.l    A4,-(A7)
00004BBC  4EB8 0CD4 8546          jsr       _strcatInstruction
00004BC0  584F      8547          addq.w    #4,A7
                    8548   DisassembleInstruction_231:
                    8549   ; }
                    8550   ; Mask = Mask << 1 ;
00004BC2  302E FFFE 8551          move.w    -2(A6),D0
00004BC6  E340      8552          asl.w     #1,D0
00004BC8  3D40 FFFE 8553          move.w    D0,-2(A6)
00004BCC  5284      8554          addq.l    #1,D4
00004BCE  6000 FF6A 8555          bra       DisassembleInstruction_228
                    8556   DisassembleInstruction_230:
                    8557   ; }
                    8558   ; }
                    8559   ; }
                    8560   ; }
                    8561   ; /////////////////////////////////////////////////////////////////////////////////
                    8562   ; // if instruction is MOVEP
                    8563   ; /////////////////////////////////////////////////////////////////////////////////
                    8564   ; if((*OpCode & (unsigned short int)(0xF038)) == (unsigned short int)(0x0008))
00004BD2  2042      8565          move.l    D2,A0
00004BD4  3010      8566          move.w    (A0),D0
00004BD6  C07C F038 8567          and.w     #61496,D0
00004BDA  0C40 0008 8568          cmp.w     #8,D0
00004BDE  6600 0112 8569          bne       DisassembleInstruction_247
                    8570   ; {
                    8571   ; InstructionSize = 1;
00004BE2  24BC 0000 8572          move.l    #1,(A2)
00004BE6  0001      
                    8573   ; DataRegister = (*OpCode >> 9) & (unsigned short int)(0x0007);
00004BE8  2042      8574          move.l    D2,A0
00004BEA  3010      8575          move.w    (A0),D0
00004BEC  E040      8576          asr.w     #8,D0
00004BEE  E240      8577          asr.w     #1,D0
00004BF0  C07C 0007 8578          and.w     #7,D0
00004BF4  3A00      8579          move.w    D0,D5
                    8580   ; AddressRegister = (*OpCode & (unsigned short int)(0x0007)) ;
00004BF6  2042      8581          move.l    D2,A0
00004BF8  3010      8582          move.w    (A0),D0
00004BFA  C07C 0007 8583          and.w     #7,D0
00004BFE  3D40 FFF8 8584          move.w    D0,-8(A6)
                    8585   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0007)  ;
00004C02  2042      8586          move.l    D2,A0
00004C04  3010      8587          move.w    (A0),D0
00004C06  EC40      8588          asr.w     #6,D0
00004C08  C07C 0007 8589          and.w     #7,D0
00004C0C  3600      8590          move.w    D0,D3
                    8591   ; InstructionSize++ ;
00004C0E  5292      8592          addq.l    #1,(A2)
                    8593   ; if(OpMode == (unsigned short int)(0x4)) // transfer word from memory to register
00004C10  0C43 0004 8594          cmp.w     #4,D3
00004C14  6634      8595          bne.s     DisassembleInstruction_241
                    8596   ; sprintf(Instruction, "MOVEP.W $%X(A%d),D%d", OpCode[1], AddressRegister, DataRegister) ;
00004C16  CABC 0000 8597          and.l     #65535,D5
00004C1A  FFFF      
00004C1C  2F05      8598          move.l    D5,-(A7)
00004C1E  322E FFF8 8599          move.w    -8(A6),D1
00004C22  C2BC 0000 8600          and.l     #65535,D1
00004C26  FFFF      
00004C28  2F01      8601          move.l    D1,-(A7)
00004C2A  2042      8602          move.l    D2,A0
00004C2C  3228 0002 8603          move.w    2(A0),D1
00004C30  48C1      8604          ext.l     D1
00004C32  2F01      8605          move.l    D1,-(A7)
00004C34  4879 0084 8606          pea       @m68kde~1_348.L
00004C38  1CF8      
00004C3A  4879 0084 8607          pea       _Instruction.L
00004C3E  04DC      
00004C40  4E95      8608          jsr       (A5)
00004C42  DEFC 0014 8609          add.w     #20,A7
00004C46  6000 00AA 8610          bra       DisassembleInstruction_247
                    8611   DisassembleInstruction_241:
                    8612   ; else if(OpMode == (unsigned short int)(0x5)) // transfer long from memory to register
00004C4A  0C43 0005 8613          cmp.w     #5,D3
00004C4E  6634      8614          bne.s     DisassembleInstruction_243
                    8615   ; sprintf(Instruction, "MOVEP.L $%X(A%d),D%d", OpCode[1], AddressRegister, DataRegister) ;
00004C50  CABC 0000 8616          and.l     #65535,D5
00004C54  FFFF      
00004C56  2F05      8617          move.l    D5,-(A7)
00004C58  322E FFF8 8618          move.w    -8(A6),D1
00004C5C  C2BC 0000 8619          and.l     #65535,D1
00004C60  FFFF      
00004C62  2F01      8620          move.l    D1,-(A7)
00004C64  2042      8621          move.l    D2,A0
00004C66  3228 0002 8622          move.w    2(A0),D1
00004C6A  48C1      8623          ext.l     D1
00004C6C  2F01      8624          move.l    D1,-(A7)
00004C6E  4879 0084 8625          pea       @m68kde~1_349.L
00004C72  1D0E      
00004C74  4879 0084 8626          pea       _Instruction.L
00004C78  04DC      
00004C7A  4E95      8627          jsr       (A5)
00004C7C  DEFC 0014 8628          add.w     #20,A7
00004C80  6000 0070 8629          bra       DisassembleInstruction_247
                    8630   DisassembleInstruction_243:
                    8631   ; else if(OpMode == (unsigned short int)(0x6)) // transfer long from register to memory
00004C84  0C43 0006 8632          cmp.w     #6,D3
00004C88  6632      8633          bne.s     DisassembleInstruction_245
                    8634   ; sprintf(Instruction, "MOVEP.W D%d,$%X(A%d)", DataRegister, OpCode[1], AddressRegister ) ;
00004C8A  322E FFF8 8635          move.w    -8(A6),D1
00004C8E  C2BC 0000 8636          and.l     #65535,D1
00004C92  FFFF      
00004C94  2F01      8637          move.l    D1,-(A7)
00004C96  2042      8638          move.l    D2,A0
00004C98  3228 0002 8639          move.w    2(A0),D1
00004C9C  48C1      8640          ext.l     D1
00004C9E  2F01      8641          move.l    D1,-(A7)
00004CA0  CABC 0000 8642          and.l     #65535,D5
00004CA4  FFFF      
00004CA6  2F05      8643          move.l    D5,-(A7)
00004CA8  4879 0084 8644          pea       @m68kde~1_350.L
00004CAC  1D24      
00004CAE  4879 0084 8645          pea       _Instruction.L
00004CB2  04DC      
00004CB4  4E95      8646          jsr       (A5)
00004CB6  DEFC 0014 8647          add.w     #20,A7
00004CBA  6036      8648          bra.s     DisassembleInstruction_247
                    8649   DisassembleInstruction_245:
                    8650   ; else if(OpMode == (unsigned short int)(0x7)) // transfer long from register to memory
00004CBC  0C43 0007 8651          cmp.w     #7,D3
00004CC0  6630      8652          bne.s     DisassembleInstruction_247
                    8653   ; sprintf(Instruction, "MOVEP.L D%d,$%X(A%d)", DataRegister, OpCode[1], AddressRegister ) ;
00004CC2  322E FFF8 8654          move.w    -8(A6),D1
00004CC6  C2BC 0000 8655          and.l     #65535,D1
00004CCA  FFFF      
00004CCC  2F01      8656          move.l    D1,-(A7)
00004CCE  2042      8657          move.l    D2,A0
00004CD0  3228 0002 8658          move.w    2(A0),D1
00004CD4  48C1      8659          ext.l     D1
00004CD6  2F01      8660          move.l    D1,-(A7)
00004CD8  CABC 0000 8661          and.l     #65535,D5
00004CDC  FFFF      
00004CDE  2F05      8662          move.l    D5,-(A7)
00004CE0  4879 0084 8663          pea       @m68kde~1_351.L
00004CE4  1D3A      
00004CE6  4879 0084 8664          pea       _Instruction.L
00004CEA  04DC      
00004CEC  4E95      8665          jsr       (A5)
00004CEE  DEFC 0014 8666          add.w     #20,A7
                    8667   DisassembleInstruction_247:
                    8668   ; }
                    8669   ; /////////////////////////////////////////////////////////////////////////////////
                    8670   ; // if instruction is MOVEQ
                    8671   ; /////////////////////////////////////////////////////////////////////////////////
                    8672   ; if((*OpCode & (unsigned short int)(0xF100)) == (unsigned short int)(0x7000))
00004CF2  2042      8673          move.l    D2,A0
00004CF4  3010      8674          move.w    (A0),D0
00004CF6  C07C F100 8675          and.w     #61696,D0
00004CFA  0C40 7000 8676          cmp.w     #28672,D0
00004CFE  6600 0040 8677          bne       DisassembleInstruction_249
                    8678   ; {
                    8679   ; InstructionSize = 1;
00004D02  24BC 0000 8680          move.l    #1,(A2)
00004D06  0001      
                    8681   ; DataRegister = (*OpCode >> 9) & (unsigned short int)(0x0007) ;
00004D08  2042      8682          move.l    D2,A0
00004D0A  3010      8683          move.w    (A0),D0
00004D0C  E040      8684          asr.w     #8,D0
00004D0E  E240      8685          asr.w     #1,D0
00004D10  C07C 0007 8686          and.w     #7,D0
00004D14  3A00      8687          move.w    D0,D5
                    8688   ; sprintf(Instruction, "MOVEQ #$%X,D%d", (*OpCode & (unsigned short int)(0x00FF)), DataRegister) ;
00004D16  CABC 0000 8689          and.l     #65535,D5
00004D1A  FFFF      
00004D1C  2F05      8690          move.l    D5,-(A7)
00004D1E  2042      8691          move.l    D2,A0
00004D20  3210      8692          move.w    (A0),D1
00004D22  C27C 00FF 8693          and.w     #255,D1
00004D26  C2BC 0000 8694          and.l     #65535,D1
00004D2A  FFFF      
00004D2C  2F01      8695          move.l    D1,-(A7)
00004D2E  4879 0084 8696          pea       @m68kde~1_352.L
00004D32  1D50      
00004D34  4879 0084 8697          pea       _Instruction.L
00004D38  04DC      
00004D3A  4E95      8698          jsr       (A5)
00004D3C  DEFC 0010 8699          add.w     #16,A7
                    8700   DisassembleInstruction_249:
                    8701   ; }
                    8702   ; /////////////////////////////////////////////////////////////////////////////////
                    8703   ; // if instruction is MULS.W
                    8704   ; /////////////////////////////////////////////////////////////////////////////////
                    8705   ; if((*OpCode & (unsigned short int)(0xF1C0)) == (unsigned short int)(0xC1C0))
00004D40  2042      8706          move.l    D2,A0
00004D42  3010      8707          move.w    (A0),D0
00004D44  C07C F1C0 8708          and.w     #61888,D0
00004D48  0C40 C1C0 8709          cmp.w     #49600,D0
00004D4C  6600 004E 8710          bne       DisassembleInstruction_251
                    8711   ; {
                    8712   ; InstructionSize = 1;
00004D50  24BC 0000 8713          move.l    #1,(A2)
00004D54  0001      
                    8714   ; DataRegister = (*OpCode >> 9) & (unsigned short int)(0x0007);
00004D56  2042      8715          move.l    D2,A0
00004D58  3010      8716          move.w    (A0),D0
00004D5A  E040      8717          asr.w     #8,D0
00004D5C  E240      8718          asr.w     #1,D0
00004D5E  C07C 0007 8719          and.w     #7,D0
00004D62  3A00      8720          move.w    D0,D5
                    8721   ; strcpyInstruction("MULS ");
00004D64  4879 0084 8722          pea       @m68kde~1_353.L
00004D68  1D60      
00004D6A  4E93      8723          jsr       (A3)
00004D6C  584F      8724          addq.w    #4,A7
                    8725   ; Decode6BitEA(OpCode,0,0,0) ;
00004D6E  42A7      8726          clr.l     -(A7)
00004D70  42A7      8727          clr.l     -(A7)
00004D72  42A7      8728          clr.l     -(A7)
00004D74  2F02      8729          move.l    D2,-(A7)
00004D76  4EB8 3038 8730          jsr       _Decode6BitEA
00004D7A  DEFC 0010 8731          add.w     #16,A7
                    8732   ; sprintf(TempString, ",D%d", DataRegister) ;
00004D7E  CABC 0000 8733          and.l     #65535,D5
00004D82  FFFF      
00004D84  2F05      8734          move.l    D5,-(A7)
00004D86  4879 0084 8735          pea       @m68kde~1_354.L
00004D8A  1D66      
00004D8C  2F0C      8736          move.l    A4,-(A7)
00004D8E  4E95      8737          jsr       (A5)
00004D90  DEFC 000C 8738          add.w     #12,A7
                    8739   ; strcatInstruction(TempString);
00004D94  2F0C      8740          move.l    A4,-(A7)
00004D96  4EB8 0CD4 8741          jsr       _strcatInstruction
00004D9A  584F      8742          addq.w    #4,A7
                    8743   DisassembleInstruction_251:
                    8744   ; }
                    8745   ; /////////////////////////////////////////////////////////////////////////////////
                    8746   ; // if instruction is MULU.W
                    8747   ; /////////////////////////////////////////////////////////////////////////////////
                    8748   ; if((*OpCode & (unsigned short int)(0xF1C0)) == (unsigned short int)(0xC0C0))
00004D9C  2042      8749          move.l    D2,A0
00004D9E  3010      8750          move.w    (A0),D0
00004DA0  C07C F1C0 8751          and.w     #61888,D0
00004DA4  0C40 C0C0 8752          cmp.w     #49344,D0
00004DA8  6600 004E 8753          bne       DisassembleInstruction_253
                    8754   ; {
                    8755   ; InstructionSize = 1;
00004DAC  24BC 0000 8756          move.l    #1,(A2)
00004DB0  0001      
                    8757   ; DataRegister = (*OpCode >> 9) & (unsigned short int)(0x0007);
00004DB2  2042      8758          move.l    D2,A0
00004DB4  3010      8759          move.w    (A0),D0
00004DB6  E040      8760          asr.w     #8,D0
00004DB8  E240      8761          asr.w     #1,D0
00004DBA  C07C 0007 8762          and.w     #7,D0
00004DBE  3A00      8763          move.w    D0,D5
                    8764   ; strcpyInstruction("MULU ");
00004DC0  4879 0084 8765          pea       @m68kde~1_355.L
00004DC4  1D6C      
00004DC6  4E93      8766          jsr       (A3)
00004DC8  584F      8767          addq.w    #4,A7
                    8768   ; Decode6BitEA(OpCode,0,0,0) ;
00004DCA  42A7      8769          clr.l     -(A7)
00004DCC  42A7      8770          clr.l     -(A7)
00004DCE  42A7      8771          clr.l     -(A7)
00004DD0  2F02      8772          move.l    D2,-(A7)
00004DD2  4EB8 3038 8773          jsr       _Decode6BitEA
00004DD6  DEFC 0010 8774          add.w     #16,A7
                    8775   ; sprintf(TempString, ",D%d", DataRegister) ;
00004DDA  CABC 0000 8776          and.l     #65535,D5
00004DDE  FFFF      
00004DE0  2F05      8777          move.l    D5,-(A7)
00004DE2  4879 0084 8778          pea       @m68kde~1_356.L
00004DE6  1D72      
00004DE8  2F0C      8779          move.l    A4,-(A7)
00004DEA  4E95      8780          jsr       (A5)
00004DEC  DEFC 000C 8781          add.w     #12,A7
                    8782   ; strcatInstruction(TempString);
00004DF0  2F0C      8783          move.l    A4,-(A7)
00004DF2  4EB8 0CD4 8784          jsr       _strcatInstruction
00004DF6  584F      8785          addq.w    #4,A7
                    8786   DisassembleInstruction_253:
                    8787   ; }
                    8788   ; /////////////////////////////////////////////////////////////////////////////////
                    8789   ; // if instruction is NBCD <EA>
                    8790   ; /////////////////////////////////////////////////////////////////////////////////
                    8791   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x4800))
00004DF8  2042      8792          move.l    D2,A0
00004DFA  3010      8793          move.w    (A0),D0
00004DFC  C07C FFC0 8794          and.w     #65472,D0
00004E00  0C40 4800 8795          cmp.w     #18432,D0
00004E04  6620      8796          bne.s     DisassembleInstruction_255
                    8797   ; {
                    8798   ; InstructionSize = 1;
00004E06  24BC 0000 8799          move.l    #1,(A2)
00004E0A  0001      
                    8800   ; strcpyInstruction("NBCD ");
00004E0C  4879 0084 8801          pea       @m68kde~1_357.L
00004E10  1D78      
00004E12  4E93      8802          jsr       (A3)
00004E14  584F      8803          addq.w    #4,A7
                    8804   ; Decode6BitEA(OpCode,0,0,0);
00004E16  42A7      8805          clr.l     -(A7)
00004E18  42A7      8806          clr.l     -(A7)
00004E1A  42A7      8807          clr.l     -(A7)
00004E1C  2F02      8808          move.l    D2,-(A7)
00004E1E  4EB8 3038 8809          jsr       _Decode6BitEA
00004E22  DEFC 0010 8810          add.w     #16,A7
                    8811   DisassembleInstruction_255:
                    8812   ; }
                    8813   ; /////////////////////////////////////////////////////////////////////////////////
                    8814   ; // if instruction is NEG <EA>
                    8815   ; /////////////////////////////////////////////////////////////////////////////////
                    8816   ; if((*OpCode & (unsigned short int)(0xFF00)) == (unsigned short int)(0x4400))
00004E26  2042      8817          move.l    D2,A0
00004E28  3010      8818          move.w    (A0),D0
00004E2A  C07C FF00 8819          and.w     #65280,D0
00004E2E  0C40 4400 8820          cmp.w     #17408,D0
00004E32  6600 0046 8821          bne       DisassembleInstruction_259
                    8822   ; {
                    8823   ; if(((*OpCode >> 6) & (unsigned short int)(0x0003)) != (unsigned short int)(0x0003))
00004E36  2042      8824          move.l    D2,A0
00004E38  3010      8825          move.w    (A0),D0
00004E3A  EC40      8826          asr.w     #6,D0
00004E3C  C07C 0003 8827          and.w     #3,D0
00004E40  0C40 0003 8828          cmp.w     #3,D0
00004E44  6700 0034 8829          beq       DisassembleInstruction_259
                    8830   ; {
                    8831   ; InstructionSize = 1;
00004E48  24BC 0000 8832          move.l    #1,(A2)
00004E4C  0001      
                    8833   ; strcpyInstruction("NEG");
00004E4E  4879 0084 8834          pea       @m68kde~1_358.L
00004E52  1D7E      
00004E54  4E93      8835          jsr       (A3)
00004E56  584F      8836          addq.w    #4,A7
                    8837   ; Decode2BitOperandSize(*OpCode) ;
00004E58  2042      8838          move.l    D2,A0
00004E5A  3210      8839          move.w    (A0),D1
00004E5C  C2BC 0000 8840          and.l     #65535,D1
00004E60  FFFF      
00004E62  2F01      8841          move.l    D1,-(A7)
00004E64  4EB8 2DA4 8842          jsr       _Decode2BitOperandSize
00004E68  584F      8843          addq.w    #4,A7
                    8844   ; Decode6BitEA(OpCode,0,0,0);
00004E6A  42A7      8845          clr.l     -(A7)
00004E6C  42A7      8846          clr.l     -(A7)
00004E6E  42A7      8847          clr.l     -(A7)
00004E70  2F02      8848          move.l    D2,-(A7)
00004E72  4EB8 3038 8849          jsr       _Decode6BitEA
00004E76  DEFC 0010 8850          add.w     #16,A7
                    8851   DisassembleInstruction_259:
                    8852   ; }
                    8853   ; }
                    8854   ; /////////////////////////////////////////////////////////////////////////////////
                    8855   ; // if instruction is NEGX <EA>
                    8856   ; /////////////////////////////////////////////////////////////////////////////////
                    8857   ; if((*OpCode & (unsigned short int)(0xFF00)) == (unsigned short int)(0x4000))
00004E7A  2042      8858          move.l    D2,A0
00004E7C  3010      8859          move.w    (A0),D0
00004E7E  C07C FF00 8860          and.w     #65280,D0
00004E82  0C40 4000 8861          cmp.w     #16384,D0
00004E86  6600 0046 8862          bne       DisassembleInstruction_263
                    8863   ; {
                    8864   ; if(((*OpCode >> 6) & (unsigned short int)(0x0003)) != (unsigned short int)(0x0003))
00004E8A  2042      8865          move.l    D2,A0
00004E8C  3010      8866          move.w    (A0),D0
00004E8E  EC40      8867          asr.w     #6,D0
00004E90  C07C 0003 8868          and.w     #3,D0
00004E94  0C40 0003 8869          cmp.w     #3,D0
00004E98  6700 0034 8870          beq       DisassembleInstruction_263
                    8871   ; {
                    8872   ; InstructionSize = 1;
00004E9C  24BC 0000 8873          move.l    #1,(A2)
00004EA0  0001      
                    8874   ; strcpyInstruction("NEGX");
00004EA2  4879 0084 8875          pea       @m68kde~1_359.L
00004EA6  1D82      
00004EA8  4E93      8876          jsr       (A3)
00004EAA  584F      8877          addq.w    #4,A7
                    8878   ; Decode2BitOperandSize(*OpCode) ;
00004EAC  2042      8879          move.l    D2,A0
00004EAE  3210      8880          move.w    (A0),D1
00004EB0  C2BC 0000 8881          and.l     #65535,D1
00004EB4  FFFF      
00004EB6  2F01      8882          move.l    D1,-(A7)
00004EB8  4EB8 2DA4 8883          jsr       _Decode2BitOperandSize
00004EBC  584F      8884          addq.w    #4,A7
                    8885   ; Decode6BitEA(OpCode,0,0,0);
00004EBE  42A7      8886          clr.l     -(A7)
00004EC0  42A7      8887          clr.l     -(A7)
00004EC2  42A7      8888          clr.l     -(A7)
00004EC4  2F02      8889          move.l    D2,-(A7)
00004EC6  4EB8 3038 8890          jsr       _Decode6BitEA
00004ECA  DEFC 0010 8891          add.w     #16,A7
                    8892   DisassembleInstruction_263:
                    8893   ; }
                    8894   ; }
                    8895   ; /////////////////////////////////////////////////////////////////////////////////
                    8896   ; // if instruction is NOP
                    8897   ; /////////////////////////////////////////////////////////////////////////////////
                    8898   ; if(*OpCode == (unsigned short int)(0x4E71))
00004ECE  2042      8899          move.l    D2,A0
00004ED0  3010      8900          move.w    (A0),D0
00004ED2  0C40 4E71 8901          cmp.w     #20081,D0
00004ED6  6610      8902          bne.s     DisassembleInstruction_265
                    8903   ; {
                    8904   ; InstructionSize = 1;
00004ED8  24BC 0000 8905          move.l    #1,(A2)
00004EDC  0001      
                    8906   ; strcpyInstruction("NOP");
00004EDE  4879 0084 8907          pea       @m68kde~1_360.L
00004EE2  1D88      
00004EE4  4E93      8908          jsr       (A3)
00004EE6  584F      8909          addq.w    #4,A7
                    8910   DisassembleInstruction_265:
                    8911   ; }
                    8912   ; /////////////////////////////////////////////////////////////////////////////////
                    8913   ; // if instruction is NOT <EA>
                    8914   ; /////////////////////////////////////////////////////////////////////////////////
                    8915   ; if((*OpCode & (unsigned short int)(0xFF00)) == (unsigned short int)(0x4600))
00004EE8  2042      8916          move.l    D2,A0
00004EEA  3010      8917          move.w    (A0),D0
00004EEC  C07C FF00 8918          and.w     #65280,D0
00004EF0  0C40 4600 8919          cmp.w     #17920,D0
00004EF4  6600 0046 8920          bne       DisassembleInstruction_269
                    8921   ; {
                    8922   ; if(((*OpCode >> 6) & (unsigned short int)(0x0003)) != (unsigned short int)(0x0003))
00004EF8  2042      8923          move.l    D2,A0
00004EFA  3010      8924          move.w    (A0),D0
00004EFC  EC40      8925          asr.w     #6,D0
00004EFE  C07C 0003 8926          and.w     #3,D0
00004F02  0C40 0003 8927          cmp.w     #3,D0
00004F06  6700 0034 8928          beq       DisassembleInstruction_269
                    8929   ; {
                    8930   ; InstructionSize = 1;
00004F0A  24BC 0000 8931          move.l    #1,(A2)
00004F0E  0001      
                    8932   ; strcpyInstruction("NOT");
00004F10  4879 0084 8933          pea       @m68kde~1_361.L
00004F14  1D8C      
00004F16  4E93      8934          jsr       (A3)
00004F18  584F      8935          addq.w    #4,A7
                    8936   ; Decode2BitOperandSize(*OpCode) ;
00004F1A  2042      8937          move.l    D2,A0
00004F1C  3210      8938          move.w    (A0),D1
00004F1E  C2BC 0000 8939          and.l     #65535,D1
00004F22  FFFF      
00004F24  2F01      8940          move.l    D1,-(A7)
00004F26  4EB8 2DA4 8941          jsr       _Decode2BitOperandSize
00004F2A  584F      8942          addq.w    #4,A7
                    8943   ; Decode6BitEA(OpCode,0,0,0);
00004F2C  42A7      8944          clr.l     -(A7)
00004F2E  42A7      8945          clr.l     -(A7)
00004F30  42A7      8946          clr.l     -(A7)
00004F32  2F02      8947          move.l    D2,-(A7)
00004F34  4EB8 3038 8948          jsr       _Decode6BitEA
00004F38  DEFC 0010 8949          add.w     #16,A7
                    8950   DisassembleInstruction_269:
                    8951   ; }
                    8952   ; }
                    8953   ; /////////////////////////////////////////////////////////////////////////////////
                    8954   ; // if instruction is OR <EA>,Dn or OR Dn,<EA>
                    8955   ; /////////////////////////////////////////////////////////////////////////////////
                    8956   ; if((*OpCode & (unsigned short int)(0xF000)) == (unsigned short int)(0x8000))
00004F3C  2042      8957          move.l    D2,A0
00004F3E  3010      8958          move.w    (A0),D0
00004F40  C07C F000 8959          and.w     #61440,D0
00004F44  0C40 8000 8960          cmp.w     #32768,D0
00004F48  6600 0038 8961          bne       DisassembleInstruction_273
                    8962   ; {
                    8963   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0007) ;
00004F4C  2042      8964          move.l    D2,A0
00004F4E  3010      8965          move.w    (A0),D0
00004F50  EC40      8966          asr.w     #6,D0
00004F52  C07C 0007 8967          and.w     #7,D0
00004F56  3600      8968          move.w    D0,D3
                    8969   ; if( (OpMode <= (unsigned short int)(0x0002)) ||
00004F58  0C43 0002 8970          cmp.w     #2,D3
00004F5C  630C      8971          bls.s     DisassembleInstruction_275
00004F5E  0C43 0004 8972          cmp.w     #4,D3
00004F62  651E      8973          blo.s     DisassembleInstruction_273
00004F64  0C43 0006 8974          cmp.w     #6,D3
00004F68  6218      8975          bhi.s     DisassembleInstruction_273
                    8976   DisassembleInstruction_275:
                    8977   ; ((OpMode >= (unsigned short int)(0x0004)) && (OpMode <= (unsigned short int)(0x0006))))
                    8978   ; {
                    8979   ; InstructionSize = 1;
00004F6A  24BC 0000 8980          move.l    #1,(A2)
00004F6E  0001      
                    8981   ; strcpyInstruction("OR") ;
00004F70  4879 0084 8982          pea       @m68kde~1_362.L
00004F74  1D90      
00004F76  4E93      8983          jsr       (A3)
00004F78  584F      8984          addq.w    #4,A7
                    8985   ; Decode3BitOperandMode(OpCode) ;
00004F7A  2F02      8986          move.l    D2,-(A7)
00004F7C  4EB8 3460 8987          jsr       _Decode3BitOperandMode
00004F80  584F      8988          addq.w    #4,A7
                    8989   DisassembleInstruction_273:
                    8990   ; }
                    8991   ; }
                    8992   ; /////////////////////////////////////////////////////////////////////////////////
                    8993   ; // if instruction is ORI to CCR
                    8994   ; /////////////////////////////////////////////////////////////////////////////////
                    8995   ; if(*OpCode == (unsigned short int)(0x003C))   {
00004F82  2042      8996          move.l    D2,A0
00004F84  3010      8997          move.w    (A0),D0
00004F86  0C40 003C 8998          cmp.w     #60,D0
00004F8A  662A      8999          bne.s     DisassembleInstruction_276
                    9000   ; sprintf(Instruction, "ORI #$%2X,CCR", OpCode[1] & (unsigned short int)(0x00FF)) ;
00004F8C  2042      9001          move.l    D2,A0
00004F8E  3228 0002 9002          move.w    2(A0),D1
00004F92  C27C 00FF 9003          and.w     #255,D1
00004F96  C2BC 0000 9004          and.l     #65535,D1
00004F9A  FFFF      
00004F9C  2F01      9005          move.l    D1,-(A7)
00004F9E  4879 0084 9006          pea       @m68kde~1_363.L
00004FA2  1D94      
00004FA4  4879 0084 9007          pea       _Instruction.L
00004FA8  04DC      
00004FAA  4E95      9008          jsr       (A5)
00004FAC  DEFC 000C 9009          add.w     #12,A7
                    9010   ; InstructionSize = 2;
00004FB0  24BC 0000 9011          move.l    #2,(A2)
00004FB4  0002      
                    9012   DisassembleInstruction_276:
                    9013   ; }
                    9014   ; /////////////////////////////////////////////////////////////////////////////////
                    9015   ; // if instruction is ORI #data,SR
                    9016   ; /////////////////////////////////////////////////////////////////////////////////
                    9017   ; if(*OpCode  == (unsigned short int)(0x007c))
00004FB6  2042      9018          move.l    D2,A0
00004FB8  3010      9019          move.w    (A0),D0
00004FBA  0C40 007C 9020          cmp.w     #124,D0
00004FBE  6622      9021          bne.s     DisassembleInstruction_278
                    9022   ; {
                    9023   ; InstructionSize = 2;
00004FC0  24BC 0000 9024          move.l    #2,(A2)
00004FC4  0002      
                    9025   ; sprintf(Instruction, "ORI  #$%X,SR", OpCode[1]);
00004FC6  2042      9026          move.l    D2,A0
00004FC8  3228 0002 9027          move.w    2(A0),D1
00004FCC  48C1      9028          ext.l     D1
00004FCE  2F01      9029          move.l    D1,-(A7)
00004FD0  4879 0084 9030          pea       @m68kde~1_364.L
00004FD4  1DA2      
00004FD6  4879 0084 9031          pea       _Instruction.L
00004FDA  04DC      
00004FDC  4E95      9032          jsr       (A5)
00004FDE  DEFC 000C 9033          add.w     #12,A7
                    9034   DisassembleInstruction_278:
                    9035   ; }
                    9036   ; /////////////////////////////////////////////////////////////////////////////////
                    9037   ; // if instruction is PEA
                    9038   ; /////////////////////////////////////////////////////////////////////////////////
                    9039   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x4840))
00004FE2  2042      9040          move.l    D2,A0
00004FE4  3010      9041          move.w    (A0),D0
00004FE6  C07C FFC0 9042          and.w     #65472,D0
00004FEA  0C40 4840 9043          cmp.w     #18496,D0
00004FEE  6620      9044          bne.s     DisassembleInstruction_280
                    9045   ; {
                    9046   ; InstructionSize = 1;
00004FF0  24BC 0000 9047          move.l    #1,(A2)
00004FF4  0001      
                    9048   ; strcpyInstruction("PEA ");
00004FF6  4879 0084 9049          pea       @m68kde~1_365.L
00004FFA  1DB0      
00004FFC  4E93      9050          jsr       (A3)
00004FFE  584F      9051          addq.w    #4,A7
                    9052   ; Decode6BitEA(OpCode,0,0,0);
00005000  42A7      9053          clr.l     -(A7)
00005002  42A7      9054          clr.l     -(A7)
00005004  42A7      9055          clr.l     -(A7)
00005006  2F02      9056          move.l    D2,-(A7)
00005008  4EB8 3038 9057          jsr       _Decode6BitEA
0000500C  DEFC 0010 9058          add.w     #16,A7
                    9059   DisassembleInstruction_280:
                    9060   ; }
                    9061   ; /////////////////////////////////////////////////////////////////////////////////
                    9062   ; // if instruction is reset
                    9063   ; /////////////////////////////////////////////////////////////////////////////////
                    9064   ; if(*OpCode  == (unsigned short int)(0x4E70))
00005010  2042      9065          move.l    D2,A0
00005012  3010      9066          move.w    (A0),D0
00005014  0C40 4E70 9067          cmp.w     #20080,D0
00005018  6616      9068          bne.s     DisassembleInstruction_282
                    9069   ; {
                    9070   ; InstructionSize = 1;
0000501A  24BC 0000 9071          move.l    #1,(A2)
0000501E  0001      
                    9072   ; sprintf(Instruction, "RESET");
00005020  4879 0084 9073          pea       @m68kde~1_366.L
00005024  1DB6      
00005026  4879 0084 9074          pea       _Instruction.L
0000502A  04DC      
0000502C  4E95      9075          jsr       (A5)
0000502E  504F      9076          addq.w    #8,A7
                    9077   DisassembleInstruction_282:
                    9078   ; }
                    9079   ; /////////////////////////////////////////////////////////////////////////////////
                    9080   ; // if instruction is RTE
                    9081   ; /////////////////////////////////////////////////////////////////////////////////
                    9082   ; if(*OpCode  == (unsigned short int)(0x4E73))
00005030  2042      9083          move.l    D2,A0
00005032  3010      9084          move.w    (A0),D0
00005034  0C40 4E73 9085          cmp.w     #20083,D0
00005038  6616      9086          bne.s     DisassembleInstruction_284
                    9087   ; {
                    9088   ; InstructionSize = 1;
0000503A  24BC 0000 9089          move.l    #1,(A2)
0000503E  0001      
                    9090   ; sprintf(Instruction, "RTE");
00005040  4879 0084 9091          pea       @m68kde~1_367.L
00005044  1DBC      
00005046  4879 0084 9092          pea       _Instruction.L
0000504A  04DC      
0000504C  4E95      9093          jsr       (A5)
0000504E  504F      9094          addq.w    #8,A7
                    9095   DisassembleInstruction_284:
                    9096   ; }
                    9097   ; /////////////////////////////////////////////////////////////////////////////////
                    9098   ; // if instruction is RTR
                    9099   ; /////////////////////////////////////////////////////////////////////////////////
                    9100   ; if(*OpCode == (unsigned short int)(0x4E77))
00005050  2042      9101          move.l    D2,A0
00005052  3010      9102          move.w    (A0),D0
00005054  0C40 4E77 9103          cmp.w     #20087,D0
00005058  6610      9104          bne.s     DisassembleInstruction_286
                    9105   ; {
                    9106   ; InstructionSize = 1;
0000505A  24BC 0000 9107          move.l    #1,(A2)
0000505E  0001      
                    9108   ; strcpyInstruction("RTR");
00005060  4879 0084 9109          pea       @m68kde~1_368.L
00005064  1DC0      
00005066  4E93      9110          jsr       (A3)
00005068  584F      9111          addq.w    #4,A7
                    9112   DisassembleInstruction_286:
                    9113   ; }
                    9114   ; /////////////////////////////////////////////////////////////////////////////////
                    9115   ; // if instruction is RTS
                    9116   ; /////////////////////////////////////////////////////////////////////////////////
                    9117   ; if(*OpCode == (unsigned short int)(0x4E75))
0000506A  2042      9118          move.l    D2,A0
0000506C  3010      9119          move.w    (A0),D0
0000506E  0C40 4E75 9120          cmp.w     #20085,D0
00005072  6610      9121          bne.s     DisassembleInstruction_288
                    9122   ; {
                    9123   ; InstructionSize = 1;
00005074  24BC 0000 9124          move.l    #1,(A2)
00005078  0001      
                    9125   ; strcpyInstruction("RTS");
0000507A  4879 0084 9126          pea       @m68kde~1_369.L
0000507E  1DC4      
00005080  4E93      9127          jsr       (A3)
00005082  584F      9128          addq.w    #4,A7
                    9129   DisassembleInstruction_288:
                    9130   ; }
                    9131   ; /////////////////////////////////////////////////////////////////////////////////
                    9132   ; // if instruction is STOP
                    9133   ; /////////////////////////////////////////////////////////////////////////////////
                    9134   ; if(*OpCode  == (unsigned short int)(0x4E72))
00005084  2042      9135          move.l    D2,A0
00005086  3010      9136          move.w    (A0),D0
00005088  0C40 4E72 9137          cmp.w     #20082,D0
0000508C  6622      9138          bne.s     DisassembleInstruction_290
                    9139   ; {
                    9140   ; InstructionSize = 2;
0000508E  24BC 0000 9141          move.l    #2,(A2)
00005092  0002      
                    9142   ; sprintf(Instruction, "STOP #$%X", OpCode[1]);
00005094  2042      9143          move.l    D2,A0
00005096  3228 0002 9144          move.w    2(A0),D1
0000509A  48C1      9145          ext.l     D1
0000509C  2F01      9146          move.l    D1,-(A7)
0000509E  4879 0084 9147          pea       @m68kde~1_370.L
000050A2  1DC8      
000050A4  4879 0084 9148          pea       _Instruction.L
000050A8  04DC      
000050AA  4E95      9149          jsr       (A5)
000050AC  DEFC 000C 9150          add.w     #12,A7
                    9151   DisassembleInstruction_290:
                    9152   ; }
                    9153   ; /////////////////////////////////////////////////////////////////////////////////
                    9154   ; // if instruction is SBCD
                    9155   ; /////////////////////////////////////////////////////////////////////////////////
                    9156   ; if((*OpCode & (unsigned short int)(0xF1F0 )) == (unsigned short int)(0x8100))
000050B0  2042      9157          move.l    D2,A0
000050B2  3010      9158          move.w    (A0),D0
000050B4  C07C F1F0 9159          and.w     #61936,D0
000050B8  0C40 8100 9160          cmp.w     #33024,D0
000050BC  6600 0092 9161          bne       DisassembleInstruction_295
                    9162   ; {
                    9163   ; InstructionSize = 1;
000050C0  24BC 0000 9164          move.l    #1,(A2)
000050C4  0001      
                    9165   ; DestBits = (*OpCode >> 9) & (unsigned short int )(0x0007) ;
000050C6  2042      9166          move.l    D2,A0
000050C8  3010      9167          move.w    (A0),D0
000050CA  E040      9168          asr.w     #8,D0
000050CC  E240      9169          asr.w     #1,D0
000050CE  C07C 0007 9170          and.w     #7,D0
000050D2  3D40 FFE0 9171          move.w    D0,-32(A6)
                    9172   ; SourceBits = (*OpCode & (unsigned short int )(0x0007));
000050D6  2042      9173          move.l    D2,A0
000050D8  3010      9174          move.w    (A0),D0
000050DA  C07C 0007 9175          and.w     #7,D0
000050DE  3D40 FFDE 9176          move.w    D0,-34(A6)
                    9177   ; Mode = (*OpCode >> 3) & (unsigned short int )(0x0001) ;
000050E2  2042      9178          move.l    D2,A0
000050E4  3010      9179          move.w    (A0),D0
000050E6  E640      9180          asr.w     #3,D0
000050E8  48C0      9181          ext.l     D0
000050EA  C0BC 0000 9182          and.l     #1,D0
000050EE  0001      
000050F0  2D40 FFE4 9183          move.l    D0,-28(A6)
                    9184   ; if(Mode == 0)
000050F4  202E FFE4 9185          move.l    -28(A6),D0
000050F8  662C      9186          bne.s     DisassembleInstruction_294
                    9187   ; sprintf(Instruction, "SBCD D%d,D%d", SourceBits, DestBits) ;
000050FA  322E FFE0 9188          move.w    -32(A6),D1
000050FE  C2BC 0000 9189          and.l     #65535,D1
00005102  FFFF      
00005104  2F01      9190          move.l    D1,-(A7)
00005106  322E FFDE 9191          move.w    -34(A6),D1
0000510A  C2BC 0000 9192          and.l     #65535,D1
0000510E  FFFF      
00005110  2F01      9193          move.l    D1,-(A7)
00005112  4879 0084 9194          pea       @m68kde~1_371.L
00005116  1DD2      
00005118  4879 0084 9195          pea       _Instruction.L
0000511C  04DC      
0000511E  4E95      9196          jsr       (A5)
00005120  DEFC 0010 9197          add.w     #16,A7
00005124  602A      9198          bra.s     DisassembleInstruction_295
                    9199   DisassembleInstruction_294:
                    9200   ; else
                    9201   ; sprintf(Instruction, "SBCD -(A%d),-(A%d)", SourceBits, DestBits) ;
00005126  322E FFE0 9202          move.w    -32(A6),D1
0000512A  C2BC 0000 9203          and.l     #65535,D1
0000512E  FFFF      
00005130  2F01      9204          move.l    D1,-(A7)
00005132  322E FFDE 9205          move.w    -34(A6),D1
00005136  C2BC 0000 9206          and.l     #65535,D1
0000513A  FFFF      
0000513C  2F01      9207          move.l    D1,-(A7)
0000513E  4879 0084 9208          pea       @m68kde~1_372.L
00005142  1DE0      
00005144  4879 0084 9209          pea       _Instruction.L
00005148  04DC      
0000514A  4E95      9210          jsr       (A5)
0000514C  DEFC 0010 9211          add.w     #16,A7
                    9212   DisassembleInstruction_295:
                    9213   ; }
                    9214   ; /////////////////////////////////////////////////////////////////////////////////
                    9215   ; // if instruction is Scc
                    9216   ; /////////////////////////////////////////////////////////////////////////////////
                    9217   ; if((*OpCode & (unsigned short int)(0xF0C0 )) == (unsigned short int)(0x50C0))
00005150  2042      9218          move.l    D2,A0
00005152  3010      9219          move.w    (A0),D0
00005154  C07C F0C0 9220          and.w     #61632,D0
00005158  0C40 50C0 9221          cmp.w     #20672,D0
0000515C  6600 0060 9222          bne       DisassembleInstruction_298
                    9223   ; {
                    9224   ; EAMode = (*OpCode >> 3) & (unsigned short int)(0x0007) ;    // mode cannot be 1 for Scc as it it used by DBcc instruction as a differentiator
00005160  2042      9225          move.l    D2,A0
00005162  3010      9226          move.w    (A0),D0
00005164  E640      9227          asr.w     #3,D0
00005166  C07C 0007 9228          and.w     #7,D0
0000516A  3D40 FFEC 9229          move.w    D0,-20(A6)
                    9230   ; if(EAMode != (unsigned short int)(0x0001))
0000516E  302E FFEC 9231          move.w    -20(A6),D0
00005172  0C40 0001 9232          cmp.w     #1,D0
00005176  6700 0046 9233          beq       DisassembleInstruction_298
                    9234   ; {
                    9235   ; InstructionSize = 1;
0000517A  24BC 0000 9236          move.l    #1,(A2)
0000517E  0001      
                    9237   ; Condition = ((*OpCode >> 8) & (unsigned short int)(0xF)) ;
00005180  2042      9238          move.l    D2,A0
00005182  3010      9239          move.w    (A0),D0
00005184  E040      9240          asr.w     #8,D0
00005186  C07C 000F 9241          and.w     #15,D0
0000518A  1D40 FFE9 9242          move.b    D0,-23(A6)
                    9243   ; strcpyInstruction("S") ;
0000518E  4879 0084 9244          pea       @m68kde~1_373.L
00005192  1DF4      
00005194  4E93      9245          jsr       (A3)
00005196  584F      9246          addq.w    #4,A7
                    9247   ; DecodeBranchCondition(Condition) ;
00005198  122E FFE9 9248          move.b    -23(A6),D1
0000519C  C27C 00FF 9249          and.w     #255,D1
000051A0  C2BC 0000 9250          and.l     #65535,D1
000051A4  FFFF      
000051A6  2F01      9251          move.l    D1,-(A7)
000051A8  4EB8 34F6 9252          jsr       _DecodeBranchCondition
000051AC  584F      9253          addq.w    #4,A7
                    9254   ; Decode6BitEA(OpCode,0,0,0);
000051AE  42A7      9255          clr.l     -(A7)
000051B0  42A7      9256          clr.l     -(A7)
000051B2  42A7      9257          clr.l     -(A7)
000051B4  2F02      9258          move.l    D2,-(A7)
000051B6  4EB8 3038 9259          jsr       _Decode6BitEA
000051BA  DEFC 0010 9260          add.w     #16,A7
                    9261   DisassembleInstruction_298:
                    9262   ; }
                    9263   ; }
                    9264   ; /////////////////////////////////////////////////////////////////////////////////
                    9265   ; // if instruction is SUB or SUBA
                    9266   ; /////////////////////////////////////////////////////////////////////////////////
                    9267   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0x9000))   {
000051BE  2042      9268          move.l    D2,A0
000051C0  3010      9269          move.w    (A0),D0
000051C2  C07C F000 9270          and.w     #61440,D0
000051C6  0C40 9000 9271          cmp.w     #36864,D0
000051CA  6600 008C 9272          bne       DisassembleInstruction_303
                    9273   ; OpMode = ((*OpCode >> 6) & (unsigned short int)(0x0007)) ;
000051CE  2042      9274          move.l    D2,A0
000051D0  3010      9275          move.w    (A0),D0
000051D2  EC40      9276          asr.w     #6,D0
000051D4  C07C 0007 9277          and.w     #7,D0
000051D8  3600      9278          move.w    D0,D3
                    9279   ; InstructionSize = 1;
000051DA  24BC 0000 9280          move.l    #1,(A2)
000051DE  0001      
                    9281   ; if((OpMode == (unsigned short int)(0x0003)) || (OpMode == (unsigned short int)(0x0007)))      // if destination is an address register then use ADDA otherwise use ADD
000051E0  0C43 0003 9282          cmp.w     #3,D3
000051E4  6708      9283          beq.s     DisassembleInstruction_304
000051E6  0C43 0007 9284          cmp.w     #7,D3
000051EA  6600 005A 9285          bne       DisassembleInstruction_302
                    9286   DisassembleInstruction_304:
                    9287   ; {
                    9288   ; if(OpMode == (unsigned short int)(0x0003))
000051EE  0C43 0003 9289          cmp.w     #3,D3
000051F2  660C      9290          bne.s     DisassembleInstruction_305
                    9291   ; strcpyInstruction("SUBA.W ") ;
000051F4  4879 0084 9292          pea       @m68kde~1_374.L
000051F8  1DF6      
000051FA  4E93      9293          jsr       (A3)
000051FC  584F      9294          addq.w    #4,A7
000051FE  600A      9295          bra.s     DisassembleInstruction_306
                    9296   DisassembleInstruction_305:
                    9297   ; else
                    9298   ; strcpyInstruction("SUBA.L ") ;
00005200  4879 0084 9299          pea       @m68kde~1_375.L
00005204  1DFE      
00005206  4E93      9300          jsr       (A3)
00005208  584F      9301          addq.w    #4,A7
                    9302   DisassembleInstruction_306:
                    9303   ; Decode6BitEA(OpCode,0,0,0)  ;
0000520A  42A7      9304          clr.l     -(A7)
0000520C  42A7      9305          clr.l     -(A7)
0000520E  42A7      9306          clr.l     -(A7)
00005210  2F02      9307          move.l    D2,-(A7)
00005212  4EB8 3038 9308          jsr       _Decode6BitEA
00005216  DEFC 0010 9309          add.w     #16,A7
                    9310   ; sprintf(TempString, ",A%X", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
0000521A  2042      9311          move.l    D2,A0
0000521C  3210      9312          move.w    (A0),D1
0000521E  E041      9313          asr.w     #8,D1
00005220  E241      9314          asr.w     #1,D1
00005222  C27C 0007 9315          and.w     #7,D1
00005226  C2BC 0000 9316          and.l     #65535,D1
0000522A  FFFF      
0000522C  2F01      9317          move.l    D1,-(A7)
0000522E  4879 0084 9318          pea       @m68kde~1_376.L
00005232  1E06      
00005234  2F0C      9319          move.l    A4,-(A7)
00005236  4E95      9320          jsr       (A5)
00005238  DEFC 000C 9321          add.w     #12,A7
                    9322   ; strcatInstruction(TempString) ;
0000523C  2F0C      9323          move.l    A4,-(A7)
0000523E  4EB8 0CD4 9324          jsr       _strcatInstruction
00005242  584F      9325          addq.w    #4,A7
00005244  6012      9326          bra.s     DisassembleInstruction_303
                    9327   DisassembleInstruction_302:
                    9328   ; }
                    9329   ; else {
                    9330   ; strcpyInstruction("SUB") ;
00005246  4879 0084 9331          pea       @m68kde~1_377.L
0000524A  1E0C      
0000524C  4E93      9332          jsr       (A3)
0000524E  584F      9333          addq.w    #4,A7
                    9334   ; Decode3BitOperandMode(OpCode) ;
00005250  2F02      9335          move.l    D2,-(A7)
00005252  4EB8 3460 9336          jsr       _Decode3BitOperandMode
00005256  584F      9337          addq.w    #4,A7
                    9338   DisassembleInstruction_303:
                    9339   ; }
                    9340   ; }
                    9341   ; /////////////////////////////////////////////////////////////////////////////////
                    9342   ; // if instruction is SUBQ
                    9343   ; /////////////////////////////////////////////////////////////////////////////////
                    9344   ; if((*OpCode & (unsigned short int)(0xF100 )) == (unsigned short int)(0x5100))
00005258  2042      9345          move.l    D2,A0
0000525A  3010      9346          move.w    (A0),D0
0000525C  C07C F100 9347          and.w     #61696,D0
00005260  0C40 5100 9348          cmp.w     #20736,D0
00005264  6600 0072 9349          bne       DisassembleInstruction_309
                    9350   ; {
                    9351   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0003) ;
00005268  2042      9352          move.l    D2,A0
0000526A  3010      9353          move.w    (A0),D0
0000526C  EC40      9354          asr.w     #6,D0
0000526E  C07C 0003 9355          and.w     #3,D0
00005272  3600      9356          move.w    D0,D3
                    9357   ; if(OpMode <= (unsigned short int)(0x0002))
00005274  0C43 0002 9358          cmp.w     #2,D3
00005278  6200 005E 9359          bhi       DisassembleInstruction_309
                    9360   ; {
                    9361   ; InstructionSize = 1;
0000527C  24BC 0000 9362          move.l    #1,(A2)
00005280  0001      
                    9363   ; strcpyInstruction("SUBQ") ;
00005282  4879 0084 9364          pea       @m68kde~1_378.L
00005286  1E10      
00005288  4E93      9365          jsr       (A3)
0000528A  584F      9366          addq.w    #4,A7
                    9367   ; Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
0000528C  2042      9368          move.l    D2,A0
0000528E  3210      9369          move.w    (A0),D1
00005290  C2BC 0000 9370          and.l     #65535,D1
00005294  FFFF      
00005296  2F01      9371          move.l    D1,-(A7)
00005298  4EB8 2DA4 9372          jsr       _Decode2BitOperandSize
0000529C  584F      9373          addq.w    #4,A7
                    9374   ; sprintf(TempString, "#%1X,", ((*OpCode >> 9) & (unsigned short int)(0x0007)));    // print 3 bit #data in positions 11,10,9 in opcode
0000529E  2042      9375          move.l    D2,A0
000052A0  3210      9376          move.w    (A0),D1
000052A2  E041      9377          asr.w     #8,D1
000052A4  E241      9378          asr.w     #1,D1
000052A6  C27C 0007 9379          and.w     #7,D1
000052AA  C2BC 0000 9380          and.l     #65535,D1
000052AE  FFFF      
000052B0  2F01      9381          move.l    D1,-(A7)
000052B2  4879 0084 9382          pea       @m68kde~1_379.L
000052B6  1E16      
000052B8  2F0C      9383          move.l    A4,-(A7)
000052BA  4E95      9384          jsr       (A5)
000052BC  DEFC 000C 9385          add.w     #12,A7
                    9386   ; strcatInstruction(TempString) ;
000052C0  2F0C      9387          move.l    A4,-(A7)
000052C2  4EB8 0CD4 9388          jsr       _strcatInstruction
000052C6  584F      9389          addq.w    #4,A7
                    9390   ; Decode6BitEA(OpCode,0,0,0) ;                                           // decode EA
000052C8  42A7      9391          clr.l     -(A7)
000052CA  42A7      9392          clr.l     -(A7)
000052CC  42A7      9393          clr.l     -(A7)
000052CE  2F02      9394          move.l    D2,-(A7)
000052D0  4EB8 3038 9395          jsr       _Decode6BitEA
000052D4  DEFC 0010 9396          add.w     #16,A7
                    9397   DisassembleInstruction_309:
                    9398   ; }
                    9399   ; }
                    9400   ; /////////////////////////////////////////////////////////////////////////////////
                    9401   ; // if instruction is SUBX
                    9402   ; /////////////////////////////////////////////////////////////////////////////////
                    9403   ; if((*OpCode & (unsigned short int)(0xF130 )) == (unsigned short int)(0x9100))
000052D8  2042      9404          move.l    D2,A0
000052DA  3010      9405          move.w    (A0),D0
000052DC  C07C F130 9406          and.w     #61744,D0
000052E0  0C40 9100 9407          cmp.w     #37120,D0
000052E4  6600 00A4 9408          bne       DisassembleInstruction_313
                    9409   ; {
                    9410   ; InstructionSize = 1;
000052E8  24BC 0000 9411          move.l    #1,(A2)
000052EC  0001      
                    9412   ; OpMode = ((*OpCode >> 6) & (unsigned short int)(0x0003)) ;
000052EE  2042      9413          move.l    D2,A0
000052F0  3010      9414          move.w    (A0),D0
000052F2  EC40      9415          asr.w     #6,D0
000052F4  C07C 0003 9416          and.w     #3,D0
000052F8  3600      9417          move.w    D0,D3
                    9418   ; if(OpMode != (unsigned short int)(0x0003)) // if size = 11 then it's SUBA not SUBX
000052FA  0C43 0003 9419          cmp.w     #3,D3
000052FE  6700 008A 9420          beq       DisassembleInstruction_313
                    9421   ; {
                    9422   ; strcpyInstruction("SUBX") ;
00005302  4879 0084 9423          pea       @m68kde~1_380.L
00005306  1E1C      
00005308  4E93      9424          jsr       (A3)
0000530A  584F      9425          addq.w    #4,A7
                    9426   ; Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
0000530C  2042      9427          move.l    D2,A0
0000530E  3210      9428          move.w    (A0),D1
00005310  C2BC 0000 9429          and.l     #65535,D1
00005314  FFFF      
00005316  2F01      9430          move.l    D1,-(A7)
00005318  4EB8 2DA4 9431          jsr       _Decode2BitOperandSize
0000531C  584F      9432          addq.w    #4,A7
                    9433   ; if((*OpCode & (unsigned short int)(0x0008)) == (unsigned short int)(0))    // if bit 3 of opcode is 0 indicates data registers are used as source and destination
0000531E  2042      9434          move.l    D2,A0
00005320  3010      9435          move.w    (A0),D0
00005322  C07C 0008 9436          and.w     #8,D0
00005326  6600 0030 9437          bne       DisassembleInstruction_315
                    9438   ; sprintf(TempString, "D%1X,D%1X", (*OpCode & 0x0007), ((*OpCode >> 9) & 0x0007)) ;
0000532A  2042      9439          move.l    D2,A0
0000532C  3210      9440          move.w    (A0),D1
0000532E  E041      9441          asr.w     #8,D1
00005330  E241      9442          asr.w     #1,D1
00005332  C27C 0007 9443          and.w     #7,D1
00005336  48C1      9444          ext.l     D1
00005338  2F01      9445          move.l    D1,-(A7)
0000533A  2042      9446          move.l    D2,A0
0000533C  3210      9447          move.w    (A0),D1
0000533E  C27C 0007 9448          and.w     #7,D1
00005342  48C1      9449          ext.l     D1
00005344  2F01      9450          move.l    D1,-(A7)
00005346  4879 0084 9451          pea       @m68kde~1_381.L
0000534A  1E22      
0000534C  2F0C      9452          move.l    A4,-(A7)
0000534E  4E95      9453          jsr       (A5)
00005350  DEFC 0010 9454          add.w     #16,A7
00005354  6000 002C 9455          bra       DisassembleInstruction_316
                    9456   DisassembleInstruction_315:
                    9457   ; else        // -(ax),-(ay) mode used
                    9458   ; sprintf(TempString, "-(A%1X),-(A%1X)", (*OpCode & 0x0007), ((*OpCode >> 9) & 0x0007)) ;
00005358  2042      9459          move.l    D2,A0
0000535A  3210      9460          move.w    (A0),D1
0000535C  E041      9461          asr.w     #8,D1
0000535E  E241      9462          asr.w     #1,D1
00005360  C27C 0007 9463          and.w     #7,D1
00005364  48C1      9464          ext.l     D1
00005366  2F01      9465          move.l    D1,-(A7)
00005368  2042      9466          move.l    D2,A0
0000536A  3210      9467          move.w    (A0),D1
0000536C  C27C 0007 9468          and.w     #7,D1
00005370  48C1      9469          ext.l     D1
00005372  2F01      9470          move.l    D1,-(A7)
00005374  4879 0084 9471          pea       @m68kde~1_382.L
00005378  1E2C      
0000537A  2F0C      9472          move.l    A4,-(A7)
0000537C  4E95      9473          jsr       (A5)
0000537E  DEFC 0010 9474          add.w     #16,A7
                    9475   DisassembleInstruction_316:
                    9476   ; strcatInstruction(TempString) ;
00005382  2F0C      9477          move.l    A4,-(A7)
00005384  4EB8 0CD4 9478          jsr       _strcatInstruction
00005388  584F      9479          addq.w    #4,A7
                    9480   DisassembleInstruction_313:
                    9481   ; }
                    9482   ; }
                    9483   ; /////////////////////////////////////////////////////////////////////////////////
                    9484   ; // if instruction is SWAP
                    9485   ; /////////////////////////////////////////////////////////////////////////////////
                    9486   ; if((*OpCode & (unsigned short int)(0xFFF8 )) == (unsigned short int)(0x4840))
0000538A  2042      9487          move.l    D2,A0
0000538C  3010      9488          move.w    (A0),D0
0000538E  C07C FFF8 9489          and.w     #65528,D0
00005392  0C40 4840 9490          cmp.w     #18496,D0
00005396  662A      9491          bne.s     DisassembleInstruction_317
                    9492   ; {
                    9493   ; InstructionSize = 1;
00005398  24BC 0000 9494          move.l    #1,(A2)
0000539C  0001      
                    9495   ; DataRegister = *OpCode & (unsigned short int)(0x0007) ;
0000539E  2042      9496          move.l    D2,A0
000053A0  3010      9497          move.w    (A0),D0
000053A2  C07C 0007 9498          and.w     #7,D0
000053A6  3A00      9499          move.w    D0,D5
                    9500   ; sprintf(Instruction, "SWAP D%d", DataRegister) ;
000053A8  CABC 0000 9501          and.l     #65535,D5
000053AC  FFFF      
000053AE  2F05      9502          move.l    D5,-(A7)
000053B0  4879 0084 9503          pea       @m68kde~1_383.L
000053B4  1E3C      
000053B6  4879 0084 9504          pea       _Instruction.L
000053BA  04DC      
000053BC  4E95      9505          jsr       (A5)
000053BE  DEFC 000C 9506          add.w     #12,A7
                    9507   DisassembleInstruction_317:
                    9508   ; }
                    9509   ; /////////////////////////////////////////////////////////////////////////////////
                    9510   ; // if instruction is TAS
                    9511   ; /////////////////////////////////////////////////////////////////////////////////
                    9512   ; if((*OpCode & (unsigned short int)(0xFFC0 )) == (unsigned short int)(0x4AC0))
000053C2  2042      9513          move.l    D2,A0
000053C4  3010      9514          move.w    (A0),D0
000053C6  C07C FFC0 9515          and.w     #65472,D0
000053CA  0C40 4AC0 9516          cmp.w     #19136,D0
000053CE  662A      9517          bne.s     DisassembleInstruction_321
                    9518   ; {
                    9519   ; if(*OpCode != (unsigned short int)(0x4AFC))
000053D0  2042      9520          move.l    D2,A0
000053D2  3010      9521          move.w    (A0),D0
000053D4  0C40 4AFC 9522          cmp.w     #19196,D0
000053D8  6720      9523          beq.s     DisassembleInstruction_321
                    9524   ; {
                    9525   ; InstructionSize = 1;
000053DA  24BC 0000 9526          move.l    #1,(A2)
000053DE  0001      
                    9527   ; strcpyInstruction("TAS ") ;
000053E0  4879 0084 9528          pea       @m68kde~1_384.L
000053E4  1E46      
000053E6  4E93      9529          jsr       (A3)
000053E8  584F      9530          addq.w    #4,A7
                    9531   ; Decode6BitEA(OpCode,0,0,0) ;
000053EA  42A7      9532          clr.l     -(A7)
000053EC  42A7      9533          clr.l     -(A7)
000053EE  42A7      9534          clr.l     -(A7)
000053F0  2F02      9535          move.l    D2,-(A7)
000053F2  4EB8 3038 9536          jsr       _Decode6BitEA
000053F6  DEFC 0010 9537          add.w     #16,A7
                    9538   DisassembleInstruction_321:
                    9539   ; }
                    9540   ; }
                    9541   ; /////////////////////////////////////////////////////////////////////////////////
                    9542   ; // if instruction is TRAP
                    9543   ; /////////////////////////////////////////////////////////////////////////////////
                    9544   ; if((*OpCode & (unsigned short int)(0xFFF0 )) == (unsigned short int)(0x4E40))   {
000053FA  2042      9545          move.l    D2,A0
000053FC  3010      9546          move.w    (A0),D0
000053FE  C07C FFF0 9547          and.w     #65520,D0
00005402  0C40 4E40 9548          cmp.w     #20032,D0
00005406  6622      9549          bne.s     DisassembleInstruction_323
                    9550   ; sprintf(Instruction, "TRAP #%d", *OpCode & (unsigned short int)(0x000F)) ;
00005408  2042      9551          move.l    D2,A0
0000540A  3210      9552          move.w    (A0),D1
0000540C  C27C 000F 9553          and.w     #15,D1
00005410  C2BC 0000 9554          and.l     #65535,D1
00005414  FFFF      
00005416  2F01      9555          move.l    D1,-(A7)
00005418  4879 0084 9556          pea       @m68kde~1_385.L
0000541C  1E4C      
0000541E  4879 0084 9557          pea       _Instruction.L
00005422  04DC      
00005424  4E95      9558          jsr       (A5)
00005426  DEFC 000C 9559          add.w     #12,A7
                    9560   DisassembleInstruction_323:
                    9561   ; }
                    9562   ; /////////////////////////////////////////////////////////////////////////////////
                    9563   ; // if instruction is TRAPV
                    9564   ; /////////////////////////////////////////////////////////////////////////////////
                    9565   ; if(*OpCode == (unsigned short int)(0x4E76))
0000542A  2042      9566          move.l    D2,A0
0000542C  3010      9567          move.w    (A0),D0
0000542E  0C40 4E76 9568          cmp.w     #20086,D0
00005432  6610      9569          bne.s     DisassembleInstruction_325
                    9570   ; {
                    9571   ; InstructionSize = 1;
00005434  24BC 0000 9572          move.l    #1,(A2)
00005438  0001      
                    9573   ; strcpyInstruction("TRAPV") ;
0000543A  4879 0084 9574          pea       @m68kde~1_386.L
0000543E  1E56      
00005440  4E93      9575          jsr       (A3)
00005442  584F      9576          addq.w    #4,A7
                    9577   DisassembleInstruction_325:
                    9578   ; }
                    9579   ; /////////////////////////////////////////////////////////////////////////////////
                    9580   ; // if instruction is TST
                    9581   ; /////////////////////////////////////////////////////////////////////////////////
                    9582   ; if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x4A00))
00005444  2042      9583          move.l    D2,A0
00005446  3010      9584          move.w    (A0),D0
00005448  C07C FF00 9585          and.w     #65280,D0
0000544C  0C40 4A00 9586          cmp.w     #18944,D0
00005450  6600 005A 9587          bne       DisassembleInstruction_329
                    9588   ; {
                    9589   ; Size = (*OpCode >> 6) & (unsigned short int)(0x0003) ;
00005454  2042      9590          move.l    D2,A0
00005456  3010      9591          move.w    (A0),D0
00005458  EC40      9592          asr.w     #6,D0
0000545A  C07C 0003 9593          and.w     #3,D0
0000545E  3D40 FFE2 9594          move.w    D0,-30(A6)
                    9595   ; if((*OpCode != (unsigned short int)(0x4AFC)) && (Size != (unsigned short int)(0x0003)))       { // test for size to eliminate TAS instruction which shares similar opcode
00005462  2042      9596          move.l    D2,A0
00005464  3010      9597          move.w    (A0),D0
00005466  0C40 4AFC 9598          cmp.w     #19196,D0
0000546A  6700 0040 9599          beq       DisassembleInstruction_329
0000546E  302E FFE2 9600          move.w    -30(A6),D0
00005472  0C40 0003 9601          cmp.w     #3,D0
00005476  6700 0034 9602          beq       DisassembleInstruction_329
                    9603   ; InstructionSize = 1;
0000547A  24BC 0000 9604          move.l    #1,(A2)
0000547E  0001      
                    9605   ; strcpyInstruction("TST") ;
00005480  4879 0084 9606          pea       @m68kde~1_387.L
00005484  1E5C      
00005486  4E93      9607          jsr       (A3)
00005488  584F      9608          addq.w    #4,A7
                    9609   ; Decode2BitOperandSize(*OpCode) ;
0000548A  2042      9610          move.l    D2,A0
0000548C  3210      9611          move.w    (A0),D1
0000548E  C2BC 0000 9612          and.l     #65535,D1
00005492  FFFF      
00005494  2F01      9613          move.l    D1,-(A7)
00005496  4EB8 2DA4 9614          jsr       _Decode2BitOperandSize
0000549A  584F      9615          addq.w    #4,A7
                    9616   ; Decode6BitEA(OpCode,0,0,0) ;
0000549C  42A7      9617          clr.l     -(A7)
0000549E  42A7      9618          clr.l     -(A7)
000054A0  42A7      9619          clr.l     -(A7)
000054A2  2F02      9620          move.l    D2,-(A7)
000054A4  4EB8 3038 9621          jsr       _Decode6BitEA
000054A8  DEFC 0010 9622          add.w     #16,A7
                    9623   DisassembleInstruction_329:
                    9624   ; }
                    9625   ; }
                    9626   ; /////////////////////////////////////////////////////////////////////////////////
                    9627   ; // if instruction is UNLK
                    9628   ; //////////////////////////////////////////////////////////
                    9629   ; if((*OpCode & (unsigned short int)(0xFFF8 )) == (unsigned short int)(0x4E58))
000054AC  2042      9630          move.l    D2,A0
000054AE  3010      9631          move.w    (A0),D0
000054B0  C07C FFF8 9632          and.w     #65528,D0
000054B4  0C40 4E58 9633          cmp.w     #20056,D0
000054B8  6628      9634          bne.s     DisassembleInstruction_331
                    9635   ; {
                    9636   ; InstructionSize = 1;
000054BA  24BC 0000 9637          move.l    #1,(A2)
000054BE  0001      
                    9638   ; sprintf(Instruction, "UNLK A%d", *OpCode & (unsigned short int)(0x0007)) ;
000054C0  2042      9639          move.l    D2,A0
000054C2  3210      9640          move.w    (A0),D1
000054C4  C27C 0007 9641          and.w     #7,D1
000054C8  C2BC 0000 9642          and.l     #65535,D1
000054CC  FFFF      
000054CE  2F01      9643          move.l    D1,-(A7)
000054D0  4879 0084 9644          pea       @m68kde~1_388.L
000054D4  1E60      
000054D6  4879 0084 9645          pea       _Instruction.L
000054DA  04DC      
000054DC  4E95      9646          jsr       (A5)
000054DE  DEFC 000C 9647          add.w     #12,A7
                    9648   DisassembleInstruction_331:
                    9649   ; }
                    9650   ; FormatInstruction() ;
000054E2  4EB8 2D12 9651          jsr       _FormatInstruction
000054E6  4CDF 3CFC 9652          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
000054EA  4E5E      9653          unlk      A6
000054EC  4E75      9654          rts
                    9655   ; }
                    9656   _strcpy:
000054EE  206F 0004 9657          move.l    (4,A7),A0
000054F2  226F 0008 9658          move.l    (8,A7),A1
000054F6  2008      9659          move.l    A0,D0
                    9660   strcpy_1:
000054F8  10D9      9661          move.b    (A1)+,(A0)+
000054FA  66FC      9662          bne       strcpy_1
000054FC  4E75      9663          rts
                    9664   _puts:
000054FE  4E56 0000 9665          link      A6,#0
00005502  48E7 2000 9666          movem.l   D2,-(A7)
                    9667   puts_1:
00005506  206E 0008 9668          move.l    8(A6),A0
0000550A  52AE 0008 9669          addq.l    #1,8(A6)
0000550E  1010      9670          move.b    (A0),D0
00005510  4880      9671          ext.w     D0
00005512  48C0      9672          ext.l     D0
00005514  2400      9673          move.l    D0,D2
00005516  670A      9674          beq.s     puts_3
00005518  2F02      9675          move.l    D2,-(A7)
0000551A  6100 001A 9676          bsr       _putch
0000551E  584F      9677          addq.w    #4,A7
00005520  60E4      9678          bra       puts_1
                    9679   puts_3:
00005522  4878 000A 9680          pea       10
00005526  6100 000E 9681          bsr       _putch
0000552A  584F      9682          addq.w    #4,A7
0000552C  2002      9683          move.l    D2,D0
0000552E  4CDF 0004 9684          movem.l   (A7)+,D2
00005532  4E5E      9685          unlk      A6
00005534  4E75      9686          rts
                    9687   _putch:
00005536  4E56 0000 9688          link      A6,#0
0000553A  48E7 2000 9689          movem.l   D2,-(A7)
0000553E  242E 0008 9690          move.l    8(A6),D2
00005542  0C82 0000 9691          cmp.l     #10,D2
00005546  000A      
00005548  660A      9692          bne.s     putch_1
0000554A  4878 000D 9693          pea       13
0000554E  6100 B5FC 9694          bsr       __putch
00005552  584F      9695          addq.w    #4,A7
                    9696   putch_1:
00005554  2F02      9697          move.l    D2,-(A7)
00005556  6100 B5F4 9698          bsr       __putch
0000555A  584F      9699          addq.w    #4,A7
0000555C  2002      9700          move.l    D2,D0
0000555E  4CDF 0004 9701          movem.l   (A7)+,D2
00005562  4E5E      9702          unlk      A6
00005564  4E75      9703          rts
                    9704   _getch:
00005566  48E7 2000 9705          movem.l   D2,-(A7)
0000556A  2439 0084 9706          move.l    __ungetbuf,D2
0000556E  00C0      
00005570  2039 0084 9707          move.l    __ungetbuf,D0
00005574  00C0      
00005576  0C80 FFFF 9708          cmp.l     #-1,D0
0000557A  FFFF      
0000557C  670C      9709          beq.s     getch_1
0000557E  23FC FFFF 9710          move.l    #-1,__ungetbuf
00005582  FFFF 0084 
00005586  00C0      
00005588  6010      9711          bra.s     getch_3
                    9712   getch_1:
0000558A  6100 B5EC 9713          bsr       __getch
0000558E  2400      9714          move.l    D0,D2
00005590  0C80 0000 9715          cmp.l     #13,D0
00005594  000D      
00005596  6602      9716          bne.s     getch_3
00005598  740A      9717          moveq     #10,D2
                    9718   getch_3:
0000559A  2002      9719          move.l    D2,D0
0000559C  4CDF 0004 9720          movem.l   (A7)+,D2
000055A0  4E75      9721          rts
                    9722   _tolower:
000055A2  4E56 0000 9723          link      A6,#0
000055A6  48E7 2000 9724          movem.l   D2,-(A7)
000055AA  242E 0008 9725          move.l    8(A6),D2
000055AE  0C82 0000 9726          cmp.l     #65,D2
000055B2  0041      
000055B4  6D0E      9727          blt.s     tolower_1
000055B6  0C82 0000 9728          cmp.l     #90,D2
000055BA  005A      
000055BC  6E06      9729          bgt.s     tolower_1
000055BE  84BC 0000 9730          or.l      #32,D2
000055C2  0020      
                    9731   tolower_1:
000055C4  2002      9732          move.l    D2,D0
000055C6  4CDF 0004 9733          movem.l   (A7)+,D2
000055CA  4E5E      9734          unlk      A6
000055CC  4E75      9735          rts
                    9736   _sprintf:
000055CE  4E56 FFFC 9737          link      A6,#-4
000055D2  48E7 2000 9738          movem.l   D2,-(A7)
000055D6  41EE 000C 9739          lea       12(A6),A0
000055DA  5848      9740          addq.w    #4,A0
000055DC  2408      9741          move.l    A0,D2
000055DE  2F02      9742          move.l    D2,-(A7)
000055E0  2F2E 000C 9743          move.l    12(A6),-(A7)
000055E4  2F2E 0008 9744          move.l    8(A6),-(A7)
000055E8  6100 013E 9745          bsr       _vsprintf
000055EC  DEFC 000C 9746          add.w     #12,A7
000055F0  2D40 FFFC 9747          move.l    D0,-4(A6)
000055F4  4282      9748          clr.l     D2
000055F6  202E FFFC 9749          move.l    -4(A6),D0
000055FA  4CDF 0004 9750          movem.l   (A7)+,D2
000055FE  4E5E      9751          unlk      A6
00005600  4E75      9752          rts
                    9753   _strcat:
00005602  206F 0004 9754          move.l    (4,A7),A0	
00005606  226F 0008 9755          move.l    (8,A7),A1	
0000560A  2008      9756          move.l    A0,D0		
                    9757   strcat_0:
0000560C  4A18      9758          tst.b     (A0)+
0000560E  66FC      9759          bne       strcat_0
00005610  5348      9760          subq      #1,A0
                    9761   strcat_1:
00005612  10D9      9762          move.b    (A1)+,(A0)+
00005614  66FC      9763          bne       strcat_1
00005616  4E75      9764          rts
                    9765   _toupper:
00005618  4E56 0000 9766          link      A6,#0
0000561C  48E7 2000 9767          movem.l   D2,-(A7)
00005620  242E 0008 9768          move.l    8(A6),D2
00005624  0C82 0000 9769          cmp.l     #97,D2
00005628  0061      
0000562A  6D0E      9770          blt.s     toupper_1
0000562C  0C82 0000 9771          cmp.l     #122,D2
00005630  007A      
00005632  6E06      9772          bgt.s     toupper_1
00005634  C4BC 0000 9773          and.l     #95,D2
00005638  005F      
                    9774   toupper_1:
0000563A  2002      9775          move.l    D2,D0
0000563C  4CDF 0004 9776          movem.l   (A7)+,D2
00005640  4E5E      9777          unlk      A6
00005642  4E75      9778          rts
                    9779   _printf:
00005644  4E56 FFFC 9780          link      A6,#-4
00005648  48E7 2000 9781          movem.l   D2,-(A7)
0000564C  41EE 0008 9782          lea       8(A6),A0
00005650  5848      9783          addq.w    #4,A0
00005652  2408      9784          move.l    A0,D2
00005654  2F02      9785          move.l    D2,-(A7)
00005656  2F2E 0008 9786          move.l    8(A6),-(A7)
0000565A  42A7      9787          clr.l     -(A7)
0000565C  6100 00CA 9788          bsr       _vsprintf
00005660  DEFC 000C 9789          add.w     #12,A7
00005664  2D40 FFFC 9790          move.l    D0,-4(A6)
00005668  4282      9791          clr.l     D2
0000566A  202E FFFC 9792          move.l    -4(A6),D0
0000566E  4CDF 0004 9793          movem.l   (A7)+,D2
00005672  4E5E      9794          unlk      A6
00005674  4E75      9795          rts
                    9796   @vsprintf_copy:
00005676  4E56 0000 9797          link      A6,#0
0000567A  206E 0008 9798          move.l    8(A6),A0
0000567E  4A90      9799          tst.l     (A0)
00005680  6710      9800          beq.s     @vsprintf_copy_1
00005682  202E 000C 9801          move.l    12(A6),D0
00005686  206E 0008 9802          move.l    8(A6),A0
0000568A  2250      9803          move.l    (A0),A1
0000568C  5290      9804          addq.l    #1,(A0)
0000568E  1280      9805          move.b    D0,(A1)
00005690  600A      9806          bra.s     @vsprintf_copy_2
                    9807   @vsprintf_copy_1:
00005692  2F2E 000C 9808          move.l    12(A6),-(A7)
00005696  6100 FE9E 9809          bsr       _putch
0000569A  584F      9810          addq.w    #4,A7
                    9811   @vsprintf_copy_2:
0000569C  4E5E      9812          unlk      A6
0000569E  4E75      9813          rts
                    9814   @vsprintf_getval:
000056A0  4E56 0000 9815          link      A6,#0
000056A4  48E7 3000 9816          movem.l   D2/D3,-(A7)
000056A8  242E 0008 9817          move.l    8(A6),D2
000056AC  4283      9818          clr.l     D3
000056AE  2042      9819          move.l    D2,A0
000056B0  2050      9820          move.l    (A0),A0
000056B2  1010      9821          move.b    (A0),D0
000056B4  4880      9822          ext.w     D0
000056B6  48C0      9823          ext.l     D0
000056B8  0C80 0000 9824          cmp.l     #42,D0
000056BC  002A      
000056BE  6612      9825          bne.s     @vsprintf_getval_1
000056C0  206E 000C 9826          move.l    12(A6),A0
000056C4  2250      9827          move.l    (A0),A1
000056C6  5890      9828          addq.l    #4,(A0)
000056C8  2611      9829          move.l    (A1),D3
000056CA  2042      9830          move.l    D2,A0
000056CC  5290      9831          addq.l    #1,(A0)
000056CE  6000 004E 9832          bra       @vsprintf_getval_5
                    9833   @vsprintf_getval_1:
000056D2  2042      9834          move.l    D2,A0
000056D4  2050      9835          move.l    (A0),A0
000056D6  1010      9836          move.b    (A0),D0
000056D8  4880      9837          ext.w     D0
000056DA  48C0      9838          ext.l     D0
000056DC  0C80 0000 9839          cmp.l     #48,D0
000056E0  0030      
000056E2  6D00 003A 9840          blt       @vsprintf_getval_5
000056E6  2042      9841          move.l    D2,A0
000056E8  2050      9842          move.l    (A0),A0
000056EA  1010      9843          move.b    (A0),D0
000056EC  4880      9844          ext.w     D0
000056EE  48C0      9845          ext.l     D0
000056F0  0C80 0000 9846          cmp.l     #57,D0
000056F4  0039      
000056F6  6E26      9847          bgt.s     @vsprintf_getval_5
000056F8  2F03      9848          move.l    D3,-(A7)
000056FA  4878 000A 9849          pea       10
000056FE  6100 07F4 9850          bsr       LMUL
00005702  2017      9851          move.l    (A7),D0
00005704  504F      9852          addq.w    #8,A7
00005706  2042      9853          move.l    D2,A0
00005708  2250      9854          move.l    (A0),A1
0000570A  5290      9855          addq.l    #1,(A0)
0000570C  1211      9856          move.b    (A1),D1
0000570E  4881      9857          ext.w     D1
00005710  48C1      9858          ext.l     D1
00005712  D081      9859          add.l     D1,D0
00005714  0480 0000 9860          sub.l     #48,D0
00005718  0030      
0000571A  2600      9861          move.l    D0,D3
0000571C  60B4      9862          bra       @vsprintf_getval_1
                    9863   @vsprintf_getval_5:
0000571E  2003      9864          move.l    D3,D0
00005720  4CDF 000C 9865          movem.l   (A7)+,D2/D3
00005724  4E5E      9866          unlk      A6
00005726  4E75      9867          rts
                    9868   _vsprintf:
00005728  4E56 FFCC 9869          link      A6,#-52
0000572C  48E7 3F3C 9870          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00005730  45EE 0008 9871          lea       8(A6),A2
00005734  47F8 5676 9872          lea       @vsprintf_copy,A3
00005738  49F9 0000 9873          lea       _ultoa,A4
0000573C  5E80      
0000573E  4286      9874          clr.l     D6
                    9875   vsprintf_1:
00005740  206E 000C 9876          move.l    12(A6),A0
00005744  4A10      9877          tst.b     (A0)
00005746  6700 0624 9878          beq       vsprintf_3
0000574A  206E 000C 9879          move.l    12(A6),A0
0000574E  1010      9880          move.b    (A0),D0
00005750  4880      9881          ext.w     D0
00005752  48C0      9882          ext.l     D0
00005754  0C80 0000 9883          cmp.l     #37,D0
00005758  0025      
0000575A  671C      9884          beq.s     vsprintf_4
0000575C  206E 000C 9885          move.l    12(A6),A0
00005760  52AE 000C 9886          addq.l    #1,12(A6)
00005764  1210      9887          move.b    (A0),D1
00005766  4881      9888          ext.w     D1
00005768  48C1      9889          ext.l     D1
0000576A  2F01      9890          move.l    D1,-(A7)
0000576C  2F0A      9891          move.l    A2,-(A7)
0000576E  4E93      9892          jsr       (A3)
00005770  504F      9893          addq.w    #8,A7
00005772  5286      9894          addq.l    #1,D6
00005774  6000 05F2 9895          bra       vsprintf_2
                    9896   vsprintf_4:
00005778  52AE 000C 9897          addq.l    #1,12(A6)
0000577C  422E FFD3 9898          clr.b     -45(A6)
00005780  422E FFD2 9899          clr.b     -46(A6)
00005784  422E FFD0 9900          clr.b     -48(A6)
00005788  422E FFCF 9901          clr.b     -49(A6)
0000578C  422E FFCE 9902          clr.b     -50(A6)
00005790  422E FFCD 9903          clr.b     -51(A6)
00005794  42AE FFFC 9904          clr.l     -4(A6)
00005798  7AFF      9905          moveq     #-1,D5
0000579A  41EE FFDC 9906          lea       -36(A6),A0
0000579E  2608      9907          move.l    A0,D3
000057A0  2408      9908          move.l    A0,D2
                    9909   vsprintf_6:
000057A2  206E 000C 9910          move.l    12(A6),A0
000057A6  1010      9911          move.b    (A0),D0
000057A8  4880      9912          ext.w     D0
000057AA  48C0      9913          ext.l     D0
000057AC  0C80 0000 9914          cmp.l     #43,D0
000057B0  002B      
000057B2  6730      9915          beq.s     vsprintf_12
000057B4  6E18      9916          bgt.s     vsprintf_15
000057B6  0C80 0000 9917          cmp.l     #35,D0
000057BA  0023      
000057BC  6700 003E 9918          beq       vsprintf_14
000057C0  6E00 0046 9919          bgt       vsprintf_9
000057C4  0C80 0000 9920          cmp.l     #32,D0
000057C8  0020      
000057CA  6724      9921          beq.s     vsprintf_13
000057CC  603A      9922          bra.s     vsprintf_9
                    9923   vsprintf_15:
000057CE  0C80 0000 9924          cmp.l     #45,D0
000057D2  002D      
000057D4  6702      9925          beq.s     vsprintf_11
000057D6  6030      9926          bra.s     vsprintf_9
                    9927   vsprintf_11:
000057D8  1D7C 0001 9928          move.b    #1,-51(A6)
000057DC  FFCD      
000057DE  52AE 000C 9929          addq.l    #1,12(A6)
000057E2  6026      9930          bra.s     vsprintf_7
                    9931   vsprintf_12:
000057E4  1D7C 0001 9932          move.b    #1,-50(A6)
000057E8  FFCE      
000057EA  52AE 000C 9933          addq.l    #1,12(A6)
000057EE  601A      9934          bra.s     vsprintf_7
                    9935   vsprintf_13:
000057F0  1D7C 0001 9936          move.b    #1,-49(A6)
000057F4  FFCF      
000057F6  52AE 000C 9937          addq.l    #1,12(A6)
000057FA  600E      9938          bra.s     vsprintf_7
                    9939   vsprintf_14:
000057FC  1D7C 0001 9940          move.b    #1,-48(A6)
00005800  FFD0      
00005802  52AE 000C 9941          addq.l    #1,12(A6)
00005806  6002      9942          bra.s     vsprintf_7
                    9943   vsprintf_9:
00005808  6002      9944          bra.s     vsprintf_8
                    9945   vsprintf_7:
0000580A  6096      9946          bra       vsprintf_6
                    9947   vsprintf_8:
0000580C  206E 000C 9948          move.l    12(A6),A0
00005810  1010      9949          move.b    (A0),D0
00005812  4880      9950          ext.w     D0
00005814  48C0      9951          ext.l     D0
00005816  0C80 0000 9952          cmp.l     #48,D0
0000581A  0030      
0000581C  660A      9953          bne.s     vsprintf_16
0000581E  52AE 000C 9954          addq.l    #1,12(A6)
00005822  1D7C 0001 9955          move.b    #1,-46(A6)
00005826  FFD2      
                    9956   vsprintf_16:
00005828  486E 0010 9957          pea       16(A6)
0000582C  486E 000C 9958          pea       12(A6)
00005830  6100 FE6E 9959          bsr       @vsprintf_getval
00005834  504F      9960          addq.w    #8,A7
00005836  2A40      9961          move.l    D0,A5
00005838  206E 000C 9962          move.l    12(A6),A0
0000583C  1010      9963          move.b    (A0),D0
0000583E  4880      9964          ext.w     D0
00005840  48C0      9965          ext.l     D0
00005842  0C80 0000 9966          cmp.l     #46,D0
00005846  002E      
00005848  6614      9967          bne.s     vsprintf_18
0000584A  52AE 000C 9968          addq.l    #1,12(A6)
0000584E  486E 0010 9969          pea       16(A6)
00005852  486E 000C 9970          pea       12(A6)
00005856  6100 FE48 9971          bsr       @vsprintf_getval
0000585A  504F      9972          addq.w    #8,A7
0000585C  2A00      9973          move.l    D0,D5
                    9974   vsprintf_18:
0000585E  206E 000C 9975          move.l    12(A6),A0
00005862  1010      9976          move.b    (A0),D0
00005864  4880      9977          ext.w     D0
00005866  48C0      9978          ext.l     D0
00005868  0C80 0000 9979          cmp.l     #108,D0
0000586C  006C      
0000586E  660A      9980          bne.s     vsprintf_20
00005870  52AE 000C 9981          addq.l    #1,12(A6)
00005874  1D7C 0001 9982          move.b    #1,-45(A6)
00005878  FFD3      
                    9983   vsprintf_20:
0000587A  206E 000C 9984          move.l    12(A6),A0
0000587E  1010      9985          move.b    (A0),D0
00005880  4880      9986          ext.w     D0
00005882  48C0      9987          ext.l     D0
00005884  0C80 0000 9988          cmp.l     #111,D0
00005888  006F      
0000588A  6700 00D4 9989          beq       vsprintf_27
0000588E  6E34      9990          bgt.s     vsprintf_33
00005890  0C80 0000 9991          cmp.l     #100,D0
00005894  0064      
00005896  6700 0054 9992          beq       vsprintf_24
0000589A  6E1C      9993          bgt.s     vsprintf_34
0000589C  0C80 0000 9994          cmp.l     #99,D0
000058A0  0063      
000058A2  6700 012C 9995          beq       vsprintf_30
000058A6  6E00 016A 9996          bgt       vsprintf_22
000058AA  0C80 0000 9997          cmp.l     #88,D0
000058AE  0058      
000058B0  6700 00E6 9998          beq       vsprintf_28
000058B4  6000 015C 9999          bra       vsprintf_22
                    10000   vsprintf_34:
000058B8  0C80 0000 10001          cmp.l     #105,D0
000058BC  0069      
000058BE  672C      10002          beq.s     vsprintf_24
000058C0  6000 0150 10003          bra       vsprintf_22
                    10004   vsprintf_33:
000058C4  0C80 0000 10005          cmp.l     #117,D0
000058C8  0075      
000058CA  6700 005C 10006          beq       vsprintf_26
000058CE  6E0E      10007          bgt.s     vsprintf_35
000058D0  0C80 0000 10008          cmp.l     #115,D0
000058D4  0073      
000058D6  6700 011C 10009          beq       vsprintf_31
000058DA  6000 0136 10010          bra       vsprintf_22
                    10011   vsprintf_35:
000058DE  0C80 0000 10012          cmp.l     #120,D0
000058E2  0078      
000058E4  6700 00B2 10013          beq       vsprintf_28
000058E8  6000 0128 10014          bra       vsprintf_22
                    10015   vsprintf_24:
000058EC  4A2E FFD3 10016          tst.b     -45(A6)
000058F0  671A      10017          beq.s     vsprintf_36
000058F2  4878 000A 10018          pea       10
000058F6  2F03      10019          move.l    D3,-(A7)
000058F8  206E 0010 10020          move.l    16(A6),A0
000058FC  58AE 0010 10021          addq.l    #4,16(A6)
00005900  2F10      10022          move.l    (A0),-(A7)
00005902  6100 04F8 10023          bsr       _ltoa
00005906  DEFC 000C 10024          add.w     #12,A7
0000590A  6018      10025          bra.s     vsprintf_37
                    10026   vsprintf_36:
0000590C  4878 000A 10027          pea       10
00005910  2F03      10028          move.l    D3,-(A7)
00005912  206E 0010 10029          move.l    16(A6),A0
00005916  58AE 0010 10030          addq.l    #4,16(A6)
0000591A  2F10      10031          move.l    (A0),-(A7)
0000591C  6100 04DE 10032          bsr       _ltoa
00005920  DEFC 000C 10033          add.w     #12,A7
                    10034   vsprintf_37:
00005924  6000 00FA 10035          bra       vsprintf_23
                    10036   vsprintf_26:
00005928  4A2E FFD3 10037          tst.b     -45(A6)
0000592C  6718      10038          beq.s     vsprintf_38
0000592E  4878 000A 10039          pea       10
00005932  2F03      10040          move.l    D3,-(A7)
00005934  206E 0010 10041          move.l    16(A6),A0
00005938  58AE 0010 10042          addq.l    #4,16(A6)
0000593C  2F10      10043          move.l    (A0),-(A7)
0000593E  4E94      10044          jsr       (A4)
00005940  DEFC 000C 10045          add.w     #12,A7
00005944  6016      10046          bra.s     vsprintf_39
                    10047   vsprintf_38:
00005946  4878 000A 10048          pea       10
0000594A  2F03      10049          move.l    D3,-(A7)
0000594C  206E 0010 10050          move.l    16(A6),A0
00005950  58AE 0010 10051          addq.l    #4,16(A6)
00005954  2F10      10052          move.l    (A0),-(A7)
00005956  4E94      10053          jsr       (A4)
00005958  DEFC 000C 10054          add.w     #12,A7
                    10055   vsprintf_39:
0000595C  6000 00C2 10056          bra       vsprintf_23
                    10057   vsprintf_27:
00005960  4A2E FFD3 10058          tst.b     -45(A6)
00005964  6718      10059          beq.s     vsprintf_40
00005966  4878 0008 10060          pea       8
0000596A  2F03      10061          move.l    D3,-(A7)
0000596C  206E 0010 10062          move.l    16(A6),A0
00005970  58AE 0010 10063          addq.l    #4,16(A6)
00005974  2F10      10064          move.l    (A0),-(A7)
00005976  4E94      10065          jsr       (A4)
00005978  DEFC 000C 10066          add.w     #12,A7
0000597C  6016      10067          bra.s     vsprintf_41
                    10068   vsprintf_40:
0000597E  4878 0008 10069          pea       8
00005982  2F03      10070          move.l    D3,-(A7)
00005984  206E 0010 10071          move.l    16(A6),A0
00005988  58AE 0010 10072          addq.l    #4,16(A6)
0000598C  2F10      10073          move.l    (A0),-(A7)
0000598E  4E94      10074          jsr       (A4)
00005990  DEFC 000C 10075          add.w     #12,A7
                    10076   vsprintf_41:
00005994  6000 008A 10077          bra       vsprintf_23
                    10078   vsprintf_28:
00005998  4A2E FFD3 10079          tst.b     -45(A6)
0000599C  6718      10080          beq.s     vsprintf_42
0000599E  4878 0010 10081          pea       16
000059A2  2F03      10082          move.l    D3,-(A7)
000059A4  206E 0010 10083          move.l    16(A6),A0
000059A8  58AE 0010 10084          addq.l    #4,16(A6)
000059AC  2F10      10085          move.l    (A0),-(A7)
000059AE  4E94      10086          jsr       (A4)
000059B0  DEFC 000C 10087          add.w     #12,A7
000059B4  6016      10088          bra.s     vsprintf_43
                    10089   vsprintf_42:
000059B6  4878 0010 10090          pea       16
000059BA  2F03      10091          move.l    D3,-(A7)
000059BC  206E 0010 10092          move.l    16(A6),A0
000059C0  58AE 0010 10093          addq.l    #4,16(A6)
000059C4  2F10      10094          move.l    (A0),-(A7)
000059C6  4E94      10095          jsr       (A4)
000059C8  DEFC 000C 10096          add.w     #12,A7
                    10097   vsprintf_43:
000059CC  6000 0052 10098          bra       vsprintf_23
                    10099   vsprintf_30:
000059D0  206E 0010 10100          move.l    16(A6),A0
000059D4  58AE 0010 10101          addq.l    #4,16(A6)
000059D8  2010      10102          move.l    (A0),D0
000059DA  2042      10103          move.l    D2,A0
000059DC  5282      10104          addq.l    #1,D2
000059DE  1080      10105          move.b    D0,(A0)
000059E0  2042      10106          move.l    D2,A0
000059E2  4210      10107          clr.b     (A0)
000059E4  200D      10108          move.l    A5,D0
000059E6  6704      10109          beq.s     vsprintf_44
000059E8  200D      10110          move.l    A5,D0
000059EA  6002      10111          bra.s     vsprintf_45
                    10112   vsprintf_44:
000059EC  7001      10113          moveq     #1,D0
                    10114   vsprintf_45:
000059EE  2A00      10115          move.l    D0,D5
000059F0  6000 002E 10116          bra       vsprintf_23
                    10117   vsprintf_31:
000059F4  206E 0010 10118          move.l    16(A6),A0
000059F8  58AE 0010 10119          addq.l    #4,16(A6)
000059FC  2610      10120          move.l    (A0),D3
000059FE  0C85 FFFF 10121          cmp.l     #-1,D5
00005A02  FFFF      
00005A04  660A      10122          bne.s     vsprintf_46
00005A06  2F03      10123          move.l    D3,-(A7)
00005A08  6100 0578 10124          bsr       _strlen
00005A0C  584F      10125          addq.w    #4,A7
00005A0E  2A00      10126          move.l    D0,D5
                    10127   vsprintf_46:
00005A10  600E      10128          bra.s     vsprintf_23
                    10129   vsprintf_22:
00005A12  206E 000C 10130          move.l    12(A6),A0
00005A16  2242      10131          move.l    D2,A1
00005A18  5282      10132          addq.l    #1,D2
00005A1A  1290      10133          move.b    (A0),(A1)
00005A1C  2042      10134          move.l    D2,A0
00005A1E  4210      10135          clr.b     (A0)
                    10136   vsprintf_23:
00005A20  2F03      10137          move.l    D3,-(A7)
00005A22  6100 055E 10138          bsr       _strlen
00005A26  584F      10139          addq.w    #4,A7
00005A28  1800      10140          move.b    D0,D4
00005A2A  206E 000C 10141          move.l    12(A6),A0
00005A2E  1010      10142          move.b    (A0),D0
00005A30  4880      10143          ext.w     D0
00005A32  48C0      10144          ext.l     D0
00005A34  0C80 0000 10145          cmp.l     #115,D0
00005A38  0073      
00005A3A  6618      10146          bne.s     vsprintf_48
00005A3C  0C85 0000 10147          cmp.l     #0,D5
00005A40  0000      
00005A42  6D10      10148          blt.s     vsprintf_48
00005A44  4884      10149          ext.w     D4
00005A46  48C4      10150          ext.l     D4
00005A48  B885      10151          cmp.l     D5,D4
00005A4A  6F04      10152          ble.s     vsprintf_50
00005A4C  1005      10153          move.b    D5,D0
00005A4E  6002      10154          bra.s     vsprintf_51
                    10155   vsprintf_50:
00005A50  1004      10156          move.b    D4,D0
                    10157   vsprintf_51:
00005A52  1800      10158          move.b    D0,D4
                    10159   vsprintf_48:
00005A54  206E 000C 10160          move.l    12(A6),A0
00005A58  1010      10161          move.b    (A0),D0
00005A5A  4880      10162          ext.w     D0
00005A5C  48C0      10163          ext.l     D0
00005A5E  0C80 0000 10164          cmp.l     #88,D0
00005A62  0058      
00005A64  6600 0026 10165          bne       vsprintf_56
00005A68  41EE FFDC 10166          lea       -36(A6),A0
00005A6C  2408      10167          move.l    A0,D2
                    10168   vsprintf_54:
00005A6E  2042      10169          move.l    D2,A0
00005A70  4A10      10170          tst.b     (A0)
00005A72  6718      10171          beq.s     vsprintf_56
00005A74  2042      10172          move.l    D2,A0
00005A76  1210      10173          move.b    (A0),D1
00005A78  4881      10174          ext.w     D1
00005A7A  48C1      10175          ext.l     D1
00005A7C  2F01      10176          move.l    D1,-(A7)
00005A7E  6100 FB98 10177          bsr       _toupper
00005A82  584F      10178          addq.w    #4,A7
00005A84  2042      10179          move.l    D2,A0
00005A86  1080      10180          move.b    D0,(A0)
00005A88  5282      10181          addq.l    #1,D2
00005A8A  60E2      10182          bra       vsprintf_54
                    10183   vsprintf_56:
00005A8C  7E00      10184          moveq     #0,D7
00005A8E  41EE FFD4 10185          lea       -44(A6),A0
00005A92  2408      10186          move.l    A0,D2
00005A94  206E 000C 10187          move.l    12(A6),A0
00005A98  1010      10188          move.b    (A0),D0
00005A9A  4880      10189          ext.w     D0
00005A9C  48C0      10190          ext.l     D0
00005A9E  0C80 0000 10191          cmp.l     #100,D0
00005AA2  0064      
00005AA4  6714      10192          beq.s     vsprintf_59
00005AA6  206E 000C 10193          move.l    12(A6),A0
00005AAA  1010      10194          move.b    (A0),D0
00005AAC  4880      10195          ext.w     D0
00005AAE  48C0      10196          ext.l     D0
00005AB0  0C80 0000 10197          cmp.l     #105,D0
00005AB4  0069      
00005AB6  6600 0076 10198          bne       vsprintf_65
                    10199   vsprintf_59:
00005ABA  4A2E FFCE 10200          tst.b     -50(A6)
00005ABE  6612      10201          bne.s     vsprintf_62
00005AC0  2043      10202          move.l    D3,A0
00005AC2  1010      10203          move.b    (A0),D0
00005AC4  4880      10204          ext.w     D0
00005AC6  48C0      10205          ext.l     D0
00005AC8  0C80 0000 10206          cmp.l     #45,D0
00005ACC  002D      
00005ACE  6600 002E 10207          bne       vsprintf_60
                    10208   vsprintf_62:
00005AD2  2043      10209          move.l    D3,A0
00005AD4  1010      10210          move.b    (A0),D0
00005AD6  4880      10211          ext.w     D0
00005AD8  48C0      10212          ext.l     D0
00005ADA  0C80 0000 10213          cmp.l     #45,D0
00005ADE  002D      
00005AE0  660E      10214          bne.s     vsprintf_63
00005AE2  2043      10215          move.l    D3,A0
00005AE4  5283      10216          addq.l    #1,D3
00005AE6  2242      10217          move.l    D2,A1
00005AE8  5282      10218          addq.l    #1,D2
00005AEA  1290      10219          move.b    (A0),(A1)
00005AEC  5304      10220          subq.b    #1,D4
00005AEE  6008      10221          bra.s     vsprintf_64
                    10222   vsprintf_63:
00005AF0  2042      10223          move.l    D2,A0
00005AF2  5282      10224          addq.l    #1,D2
00005AF4  10BC 002B 10225          move.b    #43,(A0)
                    10226   vsprintf_64:
00005AF8  5287      10227          addq.l    #1,D7
00005AFA  6000 0032 10228          bra       vsprintf_65
                    10229   vsprintf_60:
00005AFE  4A2E FFCF 10230          tst.b     -49(A6)
00005B02  6700 002A 10231          beq       vsprintf_65
00005B06  2043      10232          move.l    D3,A0
00005B08  1010      10233          move.b    (A0),D0
00005B0A  4880      10234          ext.w     D0
00005B0C  48C0      10235          ext.l     D0
00005B0E  0C80 0000 10236          cmp.l     #45,D0
00005B12  002D      
00005B14  660E      10237          bne.s     vsprintf_67
00005B16  2043      10238          move.l    D3,A0
00005B18  5283      10239          addq.l    #1,D3
00005B1A  2242      10240          move.l    D2,A1
00005B1C  5282      10241          addq.l    #1,D2
00005B1E  1290      10242          move.b    (A0),(A1)
00005B20  5304      10243          subq.b    #1,D4
00005B22  6008      10244          bra.s     vsprintf_68
                    10245   vsprintf_67:
00005B24  2042      10246          move.l    D2,A0
00005B26  5282      10247          addq.l    #1,D2
00005B28  10BC 0020 10248          move.b    #32,(A0)
                    10249   vsprintf_68:
00005B2C  5287      10250          addq.l    #1,D7
                    10251   vsprintf_65:
00005B2E  4A2E FFD0 10252          tst.b     -48(A6)
00005B32  6700 0066 10253          beq       vsprintf_77
00005B36  206E 000C 10254          move.l    12(A6),A0
00005B3A  1010      10255          move.b    (A0),D0
00005B3C  4880      10256          ext.w     D0
00005B3E  48C0      10257          ext.l     D0
00005B40  0C80 0000 10258          cmp.l     #111,D0
00005B44  006F      
00005B46  671A      10259          beq.s     vsprintf_73
00005B48  6E0C      10260          bgt.s     vsprintf_76
00005B4A  0C80 0000 10261          cmp.l     #88,D0
00005B4E  0058      
00005B50  6710      10262          beq.s     vsprintf_73
00005B52  6000 0046 10263          bra       vsprintf_77
                    10264   vsprintf_76:
00005B56  0C80 0000 10265          cmp.l     #120,D0
00005B5A  0078      
00005B5C  6704      10266          beq.s     vsprintf_73
00005B5E  6000 003A 10267          bra       vsprintf_77
                    10268   vsprintf_73:
00005B62  2042      10269          move.l    D2,A0
00005B64  5282      10270          addq.l    #1,D2
00005B66  10BC 0030 10271          move.b    #48,(A0)
00005B6A  5287      10272          addq.l    #1,D7
00005B6C  206E 000C 10273          move.l    12(A6),A0
00005B70  1010      10274          move.b    (A0),D0
00005B72  4880      10275          ext.w     D0
00005B74  48C0      10276          ext.l     D0
00005B76  0C80 0000 10277          cmp.l     #120,D0
00005B7A  0078      
00005B7C  6712      10278          beq.s     vsprintf_79
00005B7E  206E 000C 10279          move.l    12(A6),A0
00005B82  1010      10280          move.b    (A0),D0
00005B84  4880      10281          ext.w     D0
00005B86  48C0      10282          ext.l     D0
00005B88  0C80 0000 10283          cmp.l     #88,D0
00005B8C  0058      
00005B8E  660A      10284          bne.s     vsprintf_77
                    10285   vsprintf_79:
00005B90  2042      10286          move.l    D2,A0
00005B92  5282      10287          addq.l    #1,D2
00005B94  10BC 0078 10288          move.b    #120,(A0)
00005B98  5287      10289          addq.l    #1,D7
                    10290   vsprintf_77:
00005B9A  2042      10291          move.l    D2,A0
00005B9C  4210      10292          clr.b     (A0)
00005B9E  206E 000C 10293          move.l    12(A6),A0
00005BA2  1010      10294          move.b    (A0),D0
00005BA4  4880      10295          ext.w     D0
00005BA6  48C0      10296          ext.l     D0
00005BA8  0C80 0000 10297          cmp.l     #105,D0
00005BAC  0069      
00005BAE  6700 0076 10298          beq       vsprintf_82
00005BB2  6E42      10299          bgt.s     vsprintf_93
00005BB4  0C80 0000 10300          cmp.l     #99,D0
00005BB8  0063      
00005BBA  6700 0084 10301          beq       vsprintf_96
00005BBE  6E1C      10302          bgt.s     vsprintf_94
00005BC0  0C80 0000 10303          cmp.l     #88,D0
00005BC4  0058      
00005BC6  6700 005E 10304          beq       vsprintf_82
00005BCA  6E00 0184 10305          bgt       vsprintf_80
00005BCE  0C80 0000 10306          cmp.l     #69,D0
00005BD2  0045      
00005BD4  6700 0050 10307          beq       vsprintf_82
00005BD8  6000 0176 10308          bra       vsprintf_80
                    10309   vsprintf_94:
00005BDC  0C80 0000 10310          cmp.l     #101,D0
00005BE0  0065      
00005BE2  6700 0042 10311          beq       vsprintf_82
00005BE6  6E00 0168 10312          bgt       vsprintf_80
00005BEA  0C80 0000 10313          cmp.l     #100,D0
00005BEE  0064      
00005BF0  6734      10314          beq.s     vsprintf_82
00005BF2  6000 015C 10315          bra       vsprintf_80
                    10316   vsprintf_93:
00005BF6  0C80 0000 10317          cmp.l     #117,D0
00005BFA  0075      
00005BFC  6728      10318          beq.s     vsprintf_82
00005BFE  6E1A      10319          bgt.s     vsprintf_95
00005C00  0C80 0000 10320          cmp.l     #115,D0
00005C04  0073      
00005C06  6700 0038 10321          beq       vsprintf_96
00005C0A  6E00 0144 10322          bgt       vsprintf_80
00005C0E  0C80 0000 10323          cmp.l     #111,D0
00005C12  006F      
00005C14  6710      10324          beq.s     vsprintf_82
00005C16  6000 0138 10325          bra       vsprintf_80
                    10326   vsprintf_95:
00005C1A  0C80 0000 10327          cmp.l     #120,D0
00005C1E  0078      
00005C20  6704      10328          beq.s     vsprintf_82
00005C22  6000 012C 10329          bra       vsprintf_80
                    10330   vsprintf_82:
00005C26  4A2E FFD2 10331          tst.b     -46(A6)
00005C2A  6714      10332          beq.s     vsprintf_96
00005C2C  4A2E FFCD 10333          tst.b     -51(A6)
00005C30  660E      10334          bne.s     vsprintf_96
00005C32  200D      10335          move.l    A5,D0
00005C34  9087      10336          sub.l     D7,D0
00005C36  4884      10337          ext.w     D4
00005C38  48C4      10338          ext.l     D4
00005C3A  9084      10339          sub.l     D4,D0
00005C3C  2D40 FFFC 10340          move.l    D0,-4(A6)
                    10341   vsprintf_96:
00005C40  202E FFFC 10342          move.l    -4(A6),D0
00005C44  0C80 0000 10343          cmp.l     #0,D0
00005C48  0000      
00005C4A  6C04      10344          bge.s     vsprintf_98
00005C4C  42AE FFFC 10345          clr.l     -4(A6)
                    10346   vsprintf_98:
00005C50  4A2E FFCD 10347          tst.b     -51(A6)
00005C54  6600 0030 10348          bne       vsprintf_104
00005C58  4884      10349          ext.w     D4
00005C5A  48C4      10350          ext.l     D4
00005C5C  2004      10351          move.l    D4,D0
00005C5E  D0AE FFFC 10352          add.l     -4(A6),D0
00005C62  D087      10353          add.l     D7,D0
00005C64  1D40 FFD1 10354          move.b    D0,-47(A6)
                    10355   vsprintf_102:
00005C68  102E FFD1 10356          move.b    -47(A6),D0
00005C6C  4880      10357          ext.w     D0
00005C6E  48C0      10358          ext.l     D0
00005C70  220D      10359          move.l    A5,D1
00005C72  534D      10360          subq.w    #1,A5
00005C74  B081      10361          cmp.l     D1,D0
00005C76  6C0E      10362          bge.s     vsprintf_104
00005C78  4878 0020 10363          pea       32
00005C7C  2F0A      10364          move.l    A2,-(A7)
00005C7E  4E93      10365          jsr       (A3)
00005C80  504F      10366          addq.w    #8,A7
00005C82  5286      10367          addq.l    #1,D6
00005C84  60E2      10368          bra       vsprintf_102
                    10369   vsprintf_104:
00005C86  41EE FFD4 10370          lea       -44(A6),A0
00005C8A  2408      10371          move.l    A0,D2
                    10372   vsprintf_105:
00005C8C  2042      10373          move.l    D2,A0
00005C8E  4A10      10374          tst.b     (A0)
00005C90  6716      10375          beq.s     vsprintf_107
00005C92  2042      10376          move.l    D2,A0
00005C94  5282      10377          addq.l    #1,D2
00005C96  1210      10378          move.b    (A0),D1
00005C98  4881      10379          ext.w     D1
00005C9A  48C1      10380          ext.l     D1
00005C9C  2F01      10381          move.l    D1,-(A7)
00005C9E  2F0A      10382          move.l    A2,-(A7)
00005CA0  4E93      10383          jsr       (A3)
00005CA2  504F      10384          addq.w    #8,A7
00005CA4  5286      10385          addq.l    #1,D6
00005CA6  60E4      10386          bra       vsprintf_105
                    10387   vsprintf_107:
00005CA8  202E FFFC 10388          move.l    -4(A6),D0
00005CAC  1D40 FFD1 10389          move.b    D0,-47(A6)
                    10390   vsprintf_108:
00005CB0  102E FFD1 10391          move.b    -47(A6),D0
00005CB4  532E FFD1 10392          subq.b    #1,-47(A6)
00005CB8  4A00      10393          tst.b     D0
00005CBA  670E      10394          beq.s     vsprintf_110
00005CBC  4878 0030 10395          pea       48
00005CC0  2F0A      10396          move.l    A2,-(A7)
00005CC2  4E93      10397          jsr       (A3)
00005CC4  504F      10398          addq.w    #8,A7
00005CC6  5286      10399          addq.l    #1,D6
00005CC8  60E6      10400          bra       vsprintf_108
                    10401   vsprintf_110:
00005CCA  2043      10402          move.l    D3,A0
00005CCC  4A10      10403          tst.b     (A0)
00005CCE  6700 0048 10404          beq       vsprintf_113
00005CD2  206E 000C 10405          move.l    12(A6),A0
00005CD6  1010      10406          move.b    (A0),D0
00005CD8  4880      10407          ext.w     D0
00005CDA  48C0      10408          ext.l     D0
00005CDC  0C80 0000 10409          cmp.l     #115,D0
00005CE0  0073      
00005CE2  670C      10410          beq.s     vsprintf_116
00005CE4  6E18      10411          bgt.s     vsprintf_119
00005CE6  0C80 0000 10412          cmp.l     #99,D0
00005CEA  0063      
00005CEC  6702      10413          beq.s     vsprintf_116
00005CEE  600E      10414          bra.s     vsprintf_119
                    10415   vsprintf_116:
00005CF0  2005      10416          move.l    D5,D0
00005CF2  5385      10417          subq.l    #1,D5
00005CF4  0C80 0000 10418          cmp.l     #0,D0
00005CF8  0000      
00005CFA  6E02      10419          bgt.s     vsprintf_119
00005CFC  6016      10420          bra.s     vsprintf_115
                    10421   vsprintf_119:
00005CFE  2043      10422          move.l    D3,A0
00005D00  5283      10423          addq.l    #1,D3
00005D02  1210      10424          move.b    (A0),D1
00005D04  4881      10425          ext.w     D1
00005D06  48C1      10426          ext.l     D1
00005D08  2F01      10427          move.l    D1,-(A7)
00005D0A  2F0A      10428          move.l    A2,-(A7)
00005D0C  4E93      10429          jsr       (A3)
00005D0E  504F      10430          addq.w    #8,A7
00005D10  5286      10431          addq.l    #1,D6
00005D12  6002      10432          bra.s     vsprintf_112
                    10433   vsprintf_115:
00005D14  6002      10434          bra.s     vsprintf_113
                    10435   vsprintf_112:
00005D16  60B2      10436          bra       vsprintf_110
                    10437   vsprintf_113:
00005D18  4A2E FFCD 10438          tst.b     -51(A6)
00005D1C  6700 0030 10439          beq       vsprintf_125
00005D20  4884      10440          ext.w     D4
00005D22  48C4      10441          ext.l     D4
00005D24  2004      10442          move.l    D4,D0
00005D26  D0AE FFFC 10443          add.l     -4(A6),D0
00005D2A  D087      10444          add.l     D7,D0
00005D2C  1D40 FFD1 10445          move.b    D0,-47(A6)
                    10446   vsprintf_123:
00005D30  102E FFD1 10447          move.b    -47(A6),D0
00005D34  4880      10448          ext.w     D0
00005D36  48C0      10449          ext.l     D0
00005D38  220D      10450          move.l    A5,D1
00005D3A  534D      10451          subq.w    #1,A5
00005D3C  B081      10452          cmp.l     D1,D0
00005D3E  6C0E      10453          bge.s     vsprintf_125
00005D40  4878 0020 10454          pea       32
00005D44  2F0A      10455          move.l    A2,-(A7)
00005D46  4E93      10456          jsr       (A3)
00005D48  504F      10457          addq.w    #8,A7
00005D4A  5386      10458          subq.l    #1,D6
00005D4C  60E2      10459          bra       vsprintf_123
                    10460   vsprintf_125:
00005D4E  6014      10461          bra.s     vsprintf_81
                    10462   vsprintf_80:
00005D50  206E 000C 10463          move.l    12(A6),A0
00005D54  1210      10464          move.b    (A0),D1
00005D56  4881      10465          ext.w     D1
00005D58  48C1      10466          ext.l     D1
00005D5A  2F01      10467          move.l    D1,-(A7)
00005D5C  2F0A      10468          move.l    A2,-(A7)
00005D5E  4E93      10469          jsr       (A3)
00005D60  504F      10470          addq.w    #8,A7
00005D62  5286      10471          addq.l    #1,D6
                    10472   vsprintf_81:
00005D64  52AE 000C 10473          addq.l    #1,12(A6)
                    10474   vsprintf_2:
00005D68  6000 F9D6 10475          bra       vsprintf_1
                    10476   vsprintf_3:
00005D6C  4A92      10477          tst.l     (A2)
00005D6E  6710      10478          beq.s     vsprintf_126
00005D70  4201      10479          clr.b     D1
00005D72  C2BC 0000 10480          and.l     #255,D1
00005D76  00FF      
00005D78  2F01      10481          move.l    D1,-(A7)
00005D7A  2F0A      10482          move.l    A2,-(A7)
00005D7C  4E93      10483          jsr       (A3)
00005D7E  504F      10484          addq.w    #8,A7
                    10485   vsprintf_126:
00005D80  2006      10486          move.l    D6,D0
00005D82  4CDF 3CFC 10487          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00005D86  4E5E      10488          unlk      A6
00005D88  4E75      10489          rts
                    10490   @itoa_convert:
00005D8A  4E56 0000 10491          link      A6,#0
00005D8E  48E7 3C00 10492          movem.l   D2/D3/D4/D5,-(A7)
00005D92  242E 0008 10493          move.l    8(A6),D2
00005D96  262E 0010 10494          move.l    16(A6),D3
00005D9A  2A2E 000C 10495          move.l    12(A6),D5
00005D9E  2F05      10496          move.l    D5,-(A7)
00005DA0  2F03      10497          move.l    D3,-(A7)
00005DA2  6100 01F0 10498          bsr       ULDIV
00005DA6  202F 0004 10499          move.l    4(A7),D0
00005DAA  504F      10500          addq.w    #8,A7
00005DAC  2800      10501          move.l    D0,D4
00005DAE  BA83      10502          cmp.l     D3,D5
00005DB0  651A      10503          blo.s     @itoa_convert_1
00005DB2  2F03      10504          move.l    D3,-(A7)
00005DB4  2F05      10505          move.l    D5,-(A7)
00005DB6  2F03      10506          move.l    D3,-(A7)
00005DB8  6100 01DA 10507          bsr       ULDIV
00005DBC  2217      10508          move.l    (A7),D1
00005DBE  504F      10509          addq.w    #8,A7
00005DC0  2F01      10510          move.l    D1,-(A7)
00005DC2  2F02      10511          move.l    D2,-(A7)
00005DC4  61C4      10512          bsr       @itoa_convert
00005DC6  DEFC 000C 10513          add.w     #12,A7
00005DCA  2400      10514          move.l    D0,D2
                    10515   @itoa_convert_1:
00005DCC  0C84 0000 10516          cmp.l     #9,D4
00005DD0  0009      
00005DD2  6E0A      10517          bgt.s     @itoa_convert_3
00005DD4  2004      10518          move.l    D4,D0
00005DD6  0680 0000 10519          add.l     #48,D0
00005DDA  0030      
00005DDC  600E      10520          bra.s     @itoa_convert_4
                    10521   @itoa_convert_3:
00005DDE  2004      10522          move.l    D4,D0
00005DE0  0680 0000 10523          add.l     #97,D0
00005DE4  0061      
00005DE6  0480 0000 10524          sub.l     #10,D0
00005DEA  000A      
                    10525   @itoa_convert_4:
00005DEC  2042      10526          move.l    D2,A0
00005DEE  1080      10527          move.b    D0,(A0)
00005DF0  2002      10528          move.l    D2,D0
00005DF2  5280      10529          addq.l    #1,D0
00005DF4  4CDF 003C 10530          movem.l   (A7)+,D2/D3/D4/D5
00005DF8  4E5E      10531          unlk      A6
00005DFA  4E75      10532          rts
                    10533   _ltoa:
00005DFC  4E56 0000 10534          link      A6,#0
00005E00  48E7 3C00 10535          movem.l   D2/D3/D4/D5,-(A7)
00005E04  242E 0008 10536          move.l    8(A6),D2
00005E08  262E 000C 10537          move.l    12(A6),D3
00005E0C  2A2E 0010 10538          move.l    16(A6),D5
00005E10  2803      10539          move.l    D3,D4
00005E12  0C85 0000 10540          cmp.l     #2,D5
00005E16  0002      
00005E18  6D08      10541          blt.s     ltoa_3
00005E1A  0C85 0000 10542          cmp.l     #36,D5
00005E1E  0024      
00005E20  6F06      10543          ble.s     ltoa_1
                    10544   ltoa_3:
00005E22  2003      10545          move.l    D3,D0
00005E24  6000 0052 10546          bra       ltoa_4
                    10547   ltoa_1:
00005E28  0C85 0000 10548          cmp.l     #10,D5
00005E2C  000A      
00005E2E  6600 0032 10549          bne       ltoa_5
00005E32  0C82 0000 10550          cmp.l     #0,D2
00005E36  0000      
00005E38  6C28      10551          bge.s     ltoa_5
00005E3A  2002      10552          move.l    D2,D0
00005E3C  4480      10553          neg.l     D0
00005E3E  2400      10554          move.l    D0,D2
00005E40  0C82 0000 10555          cmp.l     #0,D2
00005E44  0000      
00005E46  6C12      10556          bge.s     ltoa_7
00005E48  4879 0000 10557          pea       @itoa_1
00005E4C  6072      
00005E4E  2F03      10558          move.l    D3,-(A7)
00005E50  6100 F69C 10559          bsr       _strcpy
00005E54  504F      10560          addq.w    #8,A7
00005E56  2003      10561          move.l    D3,D0
00005E58  601E      10562          bra.s     ltoa_4
                    10563   ltoa_7:
00005E5A  2044      10564          move.l    D4,A0
00005E5C  5284      10565          addq.l    #1,D4
00005E5E  10BC 002D 10566          move.b    #45,(A0)
                    10567   ltoa_5:
00005E62  2F05      10568          move.l    D5,-(A7)
00005E64  2F02      10569          move.l    D2,-(A7)
00005E66  2F04      10570          move.l    D4,-(A7)
00005E68  6100 FF20 10571          bsr       @itoa_convert
00005E6C  DEFC 000C 10572          add.w     #12,A7
00005E70  2800      10573          move.l    D0,D4
00005E72  2044      10574          move.l    D4,A0
00005E74  4210      10575          clr.b     (A0)
00005E76  2003      10576          move.l    D3,D0
                    10577   ltoa_4:
00005E78  4CDF 003C 10578          movem.l   (A7)+,D2/D3/D4/D5
00005E7C  4E5E      10579          unlk      A6
00005E7E  4E75      10580          rts
                    10581   _ultoa:
00005E80  4E56 0000 10582          link      A6,#0
00005E84  48E7 3800 10583          movem.l   D2/D3/D4,-(A7)
00005E88  262E 0010 10584          move.l    16(A6),D3
00005E8C  282E 000C 10585          move.l    12(A6),D4
00005E90  2404      10586          move.l    D4,D2
00005E92  0C83 0000 10587          cmp.l     #2,D3
00005E96  0002      
00005E98  6D08      10588          blt.s     ultoa_3
00005E9A  0C83 0000 10589          cmp.l     #36,D3
00005E9E  0024      
00005EA0  6F04      10590          ble.s     ultoa_1
                    10591   ultoa_3:
00005EA2  2004      10592          move.l    D4,D0
00005EA4  6018      10593          bra.s     ultoa_4
                    10594   ultoa_1:
00005EA6  2F03      10595          move.l    D3,-(A7)
00005EA8  2F2E 0008 10596          move.l    8(A6),-(A7)
00005EAC  2F02      10597          move.l    D2,-(A7)
00005EAE  6100 FEDA 10598          bsr       @itoa_convert
00005EB2  DEFC 000C 10599          add.w     #12,A7
00005EB6  2400      10600          move.l    D0,D2
00005EB8  2042      10601          move.l    D2,A0
00005EBA  4210      10602          clr.b     (A0)
00005EBC  2004      10603          move.l    D4,D0
                    10604   ultoa_4:
00005EBE  4CDF 001C 10605          movem.l   (A7)+,D2/D3/D4
00005EC2  4E5E      10606          unlk      A6
00005EC4  4E75      10607          rts
                    10608   _itoa:
00005EC6  4E56 0000 10609          link      A6,#0
00005ECA  2F2E 0010 10610          move.l    16(A6),-(A7)
00005ECE  2F2E 000C 10611          move.l    12(A6),-(A7)
00005ED2  2F2E 0008 10612          move.l    8(A6),-(A7)
00005ED6  6100 FF24 10613          bsr       _ltoa
00005EDA  DEFC 000C 10614          add.w     #12,A7
00005EDE  4E5E      10615          unlk      A6
00005EE0  4E75      10616          rts
                    10617   ULMUL:
00005EE2  4E56 0000 10618          link    A6,#0
00005EE6  48E7 C000 10619          movem.l D0/D1,-(A7)
00005EEA  222E 0008 10620          move.l  8(A6),D1
00005EEE  202E 000C 10621          move.l  12(A6),D0
00005EF2  602C      10622          bra.s   lmul_3
                    10623   LMUL:
00005EF4  4E56 0000 10624          link    A6,#0
00005EF8  48E7 C000 10625          movem.l D0/D1,-(A7)
00005EFC  222E 0008 10626          move.l  8(A6),D1
00005F00  202E 000C 10627          move.l  12(A6),D0
00005F04  4A80      10628          tst.l   D0
00005F06  6A0A      10629          bpl.s   lmul_1
00005F08  4480      10630          neg.l   D0
00005F0A  4A81      10631          tst.l   D1
00005F0C  6A0A      10632          bpl.s   lmul_2
00005F0E  4481      10633          neg.l   D1
00005F10  600E      10634          bra.s   lmul_3
                    10635   lmul_1:
00005F12  4A81      10636          tst.l   D1
00005F14  6A0A      10637          bpl.s   lmul_3
00005F16  4481      10638          neg.l   D1
                    10639   lmul_2:
00005F18  6114      10640          bsr.s   domul
00005F1A  4481      10641          neg.l   D1
00005F1C  4080      10642          negx.l  D0
00005F1E  6002      10643          bra.s   lmul_4
                    10644   lmul_3:
00005F20  610C      10645          bsr.s   domul
                    10646   lmul_4:
00005F22  2D41 0008 10647          move.l  D1,8(A6)
00005F26  4CDF 0003 10648          movem.l (A7)+,D0/D1
00005F2A  4E5E      10649          unlk    A6
00005F2C  4E75      10650          rts
                    10651   domul:
00005F2E  0C81 0000 10652          cmpi.l  #$FFFF,D1
00005F32  FFFF      
00005F34  620C      10653          bhi.s   domul_1
00005F36  0C80 0000 10654          cmpi.l  #$FFFF,D0
00005F3A  FFFF      
00005F3C  620E      10655          bhi.s   domul_2
00005F3E  C2C0      10656          mulu    D0,D1
00005F40  4E75      10657          rts
                    10658   domul_1:
00005F42  0C80 0000 10659          cmpi.l  #$FFFF,D0
00005F46  FFFF      
00005F48  6218      10660          bhi.s   domul_4
00005F4A  6002      10661          bra.s   domul_3
                    10662   domul_2
00005F4C  C141      10663          exg     D0,D1
                    10664   domul_3:
00005F4E  2F02      10665          move.l  D2,-(A7)
00005F50  2401      10666          move.l  D1,D2
00005F52  4842      10667          swap    D2
00005F54  C2C0      10668          mulu    D0,D1
00005F56  C4C0      10669          mulu    D0,D2
00005F58  4842      10670          swap    D2
00005F5A  4242      10671          clr.w   D2
00005F5C  D282      10672          add.l   D2,D1
00005F5E  241F      10673          move.l  (A7)+,D2
00005F60  4E75      10674          rts
                    10675   domul_4:
00005F62  48E7 3000 10676          movem.l D2/D3,-(A7)
00005F66  2401      10677          move.l  D1,D2
00005F68  2601      10678          move.l  D1,D3
00005F6A  C2C0      10679          mulu    D0,D1
00005F6C  4842      10680          swap    D2
00005F6E  C4C0      10681          mulu    D0,D2
00005F70  4840      10682          swap    D0
00005F72  C6C0      10683          mulu    D0,D3
00005F74  D483      10684          add.l   D3,D2
00005F76  4842      10685          swap    D2
00005F78  4242      10686          clr.w   D2
00005F7A  D282      10687          add.l   D2,D1
00005F7C  4CDF 000C 10688          movem.l (A7)+,D2/D3
00005F80  4E75      10689          rts
                    10690   _strlen:
00005F82  206F 0004 10691          move.l    (4,A7),A0
00005F86  2248      10692          move.l    A0,A1
                    10693   strlen_1:
00005F88  4A19      10694          tst.b     (A1)+
00005F8A  66FC      10695          bne       strlen_1
00005F8C  2009      10696          move.l    A1,D0
00005F8E  9088      10697          sub.l     A0,D0
00005F90  5380      10698          subq.l    #1,D0
00005F92  4E75      10699          rts
                    10700   ULDIV:
00005F94  4E56 0000 10701          link    A6,#0
00005F98  48E7 C000 10702          movem.l D0/D1,-(A7)
00005F9C  222E 0008 10703          move.l  8(A6),D1
00005FA0  202E 000C 10704          move.l  12(A6),D0
00005FA4  6036      10705          bra.s   ldiv_3
                    10706   LDIV:
00005FA6  4E56 0000 10707          link    A6,#0
00005FAA  48E7 C000 10708          movem.l D0/D1,-(A7)
00005FAE  222E 0008 10709          move.l  8(A6),D1
00005FB2  202E 000C 10710          move.l  12(A6),D0
00005FB6  4A80      10711          tst.l   D0
00005FB8  6A0E      10712          bpl.s   ldiv_1
00005FBA  4480      10713          neg.l   D0
00005FBC  4A81      10714          tst.l   D1
00005FBE  6A14      10715          bpl.s   ldiv_2
00005FC0  4481      10716          neg.l   D1
00005FC2  612A      10717          bsr.s   dodiv
00005FC4  4481      10718          neg.l   D1
00005FC6  6016      10719          bra.s   ldiv_4
                    10720   ldiv_1:
00005FC8  4A81      10721          tst.l   D1
00005FCA  6A10      10722          bpl.s   ldiv_3
00005FCC  4481      10723          neg.l   D1
00005FCE  611E      10724          bsr.s   dodiv
00005FD0  4480      10725          neg.l   D0
00005FD2  600A      10726          bra.s   ldiv_4
                    10727   ldiv_2:
00005FD4  6118      10728          bsr.s   dodiv
00005FD6  4480      10729          neg.l   D0
00005FD8  4481      10730          neg.l   D1
00005FDA  6002      10731          bra.s   ldiv_4
                    10732   ldiv_3:
00005FDC  6110      10733          bsr.s   dodiv
                    10734   ldiv_4:
00005FDE  2D40 0008 10735          move.l  D0,8(A6)
00005FE2  2D41 000C 10736          move.l  D1,12(A6)
00005FE6  4CDF 0003 10737          movem.l (A7)+,D0/D1
00005FEA  4E5E      10738          unlk    A6
00005FEC  4E75      10739          rts
                    10740   dodiv:
00005FEE  0C81 0000 10741          cmpi.l  #$FFFF,D1
00005FF2  FFFF      
00005FF4  6236      10742          bhi.s   dodiv_2
00005FF6  0C80 0000 10743          cmpi.l  #$FFFF,D0
00005FFA  FFFF      
00005FFC  6210      10744          bhi.s   dodiv_1
00005FFE  80C1      10745          divu    D1,D0
00006000  2200      10746          move.l  D0,D1
00006002  4241      10747          clr.w   D1
00006004  4841      10748          swap    D1
00006006  0280 0000 10749          andi.l  #$FFFF,D0
0000600A  FFFF      
0000600C  4E75      10750          rts
                    10751   dodiv_1:
0000600E  48A7 A000 10752          movem.w D0/D2,-(A7)
00006012  4240      10753          clr.w   D0
00006014  4840      10754          swap    D0
00006016  80C1      10755          divu    D1,D0
00006018  3400      10756          move.w  D0,D2
0000601A  301F      10757          move.w  (A7)+,D0
0000601C  80C1      10758          divu    D1,D0
0000601E  4840      10759          swap    D0
00006020  4281      10760          clr.l   D1
00006022  3200      10761          move.w  D0,D1
00006024  3002      10762          move.w  D2,D0
00006026  4840      10763          swap    D0
00006028  341F      10764          move.w  (A7)+,D2
0000602A  4E75      10765          rts
                    10766   dodiv_2:
0000602C  48E7 3800 10767          movem.l D2/D3/D4,-(A7)
00006030  2401      10768          move.l  D1,D2
00006032  4242      10769          clr.w   D2
00006034  4842      10770          swap    D2
00006036  5282      10771          addq.l  #1,D2
00006038  2600      10772          move.l  D0,D3
0000603A  2801      10773          move.l  D1,D4
0000603C  2202      10774          move.l  D2,D1
0000603E  61CE      10775          bsr.s   dodiv_1
00006040  2204      10776          move.l  D4,D1
00006042  82C2      10777          divu    D2,D1
00006044  80C1      10778          divu    D1,D0
00006046  0280 0000 10779          andi.l  #$FFFF,D0
0000604A  FFFF      
                    10780   dodiv_3:
0000604C  2204      10781          move.l  D4,D1
0000604E  2404      10782          move.l  D4,D2
00006050  4842      10783          swap    D2
00006052  C2C0      10784          mulu    D0,D1
00006054  C4C0      10785          mulu    D0,D2
00006056  4842      10786          swap    D2
00006058  D282      10787          add.l   D2,D1
0000605A  9283      10788          sub.l   D3,D1
0000605C  620A      10789          bhi.s   dodiv_4
0000605E  4481      10790          neg.l   D1
00006060  B881      10791          cmp.l   D1,D4
00006062  6208      10792          bhi.s   dodiv_5
00006064  5280      10793          addq.l  #1,D0
00006066  60E4      10794          bra.s   dodiv_3
                    10795   dodiv_4:
00006068  5380      10796          subq.l  #1,D0
0000606A  60E0      10797          bra.s   dodiv_3
                    10798   dodiv_5:
0000606C  4CDF 001C 10799          movem.l (A7)+,D2/D3/D4
00006070  4E75      10800          rts
                    10801          section   data
00006072            10802                   align
          0000 6072 10803   DataStart       equ       *
                    10804   
                    10805   *********************************************************************************************************
                    10806   * Data Section for Initialised Data - these will be placed in rom as constants and have to be copied
                    10807   * to ram as part of the CStart routine in this file
                    10808   *********************************************************************************************************
                    10809   
                    10810   @itoa_1:
00006072  2D32 3134 10811          dc.b      45,50,49,52,55,52,56,51,54,52,56,0
00006076  3734 3833 
0000607A  3634 3800 
                    10812          section   bss
0000607E            10813                   align
          0000 607E 10814   DataEnd         equ     *                       this label will equate to the address of the last byte of global variable in it
                    10815   
                    10816   *********************************************************************************************************
                    10817   * Section for Uninitialised Data held in ROM as constants
                    10818   *********************************************************************************************************
                    10819   
00840000            10820                   org     $00840000               Ram based vector table must be stored here otherwise InstallException Handler will not work
          0000 000C 10821   DataLength      equ     DataEnd-DataStart       length of data needed to copy to Ram on bootup
                    10822   
                    10823   
00840000            10824   bss             org       bss
                    10825   
                    10826   *********************************************************************************************************
                    10827   * Build a ram based vector table for interrupts so we can install our own Exception Handlers in C code at run time
                    10828   * install the exception handler using the C function InstallExceptionHandler()
                    10829   *********************************************************************************************************
                    10830   
                    10831   
                    10832   
00840000            10833   VInitialSP       ds.l    1      dummy as we can't really install a handler for this
00840004            10834   VInitialPC       ds.l    1      dummy as we can't reallin install a handler for this
00840008            10835   VBusError        ds.l    1      storage for address of Bus Error Handler
0084000C            10836   VAddressError    ds.l    1      storage for address of Address Error Handler
00840010            10837   VIllegalInstr    ds.l    1      storage for address of Illegal Instruction handler
00840014            10838   VDividebyZero    ds.l    1      storage for address of divide by zero handler
00840018            10839   VCheck           ds.l    1      ditto
0084001C            10840   VTrapV           ds.l    1      ditto
00840020            10841   VPrivilege       ds.l    1      ditto
00840024            10842   VTrace           ds.l    1
00840028            10843   VLine1010emul    ds.l    1
0084002C            10844   VLine1111emul    ds.l    1
00840030            10845   VUnassigned1     ds.l    1
00840034            10846   VUnassigned2     ds.l    1
00840038            10847   VUnassigned3     ds.l    1
0084003C            10848   VUninit_IRQ      ds.l    1
00840040            10849   VUnassigned4     ds.l    1
00840044            10850   VUnassigned5     ds.l    1
00840048            10851   VUnassigned6     ds.l    1
0084004C            10852   VUnassigned7     ds.l    1
00840050            10853   VUnassigned8     ds.l    1
00840054            10854   VUnassigned9     ds.l    1
00840058            10855   VUnassigned10    ds.l    1
0084005C            10856   VUnassigned11    ds.l    1
00840060            10857   VSpuriousIRQ     ds.l    1
                    10858   
                    10859   * Interrupt handlers Vector 25-31
00840064            10860   VL1IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
00840068            10861   VL2IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0084006C            10862   VL3IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
00840070            10863   VL4IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
00840074            10864   VL5IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
00840078            10865   VL6IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0084007C            10866   VL7IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
                    10867   
                    10868   * Trap Handler vectors 32-47
00840080            10869   VTrap0           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
00840084            10870   VTrap1           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
00840088            10871   VTrap2           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0084008C            10872   VTrap3           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
00840090            10873   VTrap4           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
00840094            10874   VTrap5           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
00840098            10875   VTrap6           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0084009C            10876   VTrap7           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
008400A0            10877   VTrap8           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
008400A4            10878   VTrap9           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
008400A8            10879   VTrap10          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
008400AC            10880   VTrap11          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
008400B0            10881   VTrap12          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
008400B4            10882   VTrap13          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
008400B8            10883   VTrap14          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
008400BC            10884   VTrap15          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
                    10885   
                    10886   * the remaining exceptions are unassigned in the 68000 so no need to allocate storage for them here
                    10887   
                    10888   ***********************************************************************************************************
                    10889   * Other Variables
                    10890   ***********************************************************************************************************
                    10891   *__DebugA5       ds.l    1
                    10892   *__UserA5        ds.l    1
                    10893   
                    10894   ***********************************************************************************************************
008400C0            10895   __ungetbuf:     ds.w    1       ; ungetbuffer for stdio functions
008400C2            10896   __allocp:       ds.l    0       ; start of allocation units
008400C2            10897   __heap:         ds.l    0       ; pointers for malloc functions
                    10898   
                    10899   *__himem:       ds.l    himem            ; highest memory location + 1
                    10900   *__stklen:      ds.l    stklen           ; default stack size
                    10901   
                    10902   *********************************************************************************************************
                    10903   * Section for Heap
                    10904   *********************************************************************************************************
                    10905   
                    10906   _i:
008400C2            10907          ds.b      4
                    10908   _x:
008400C6            10909          ds.b      4
                    10910   _y:
008400CA            10911          ds.b      4
                    10912   _z:
008400CE            10913          ds.b      4
                    10914   _PortA_Count:
008400D2            10915          ds.b      4
                    10916   _Trace:
008400D6            10917          ds.b      4
                    10918   _GoFlag:
008400DA            10919          ds.b      4
                    10920   _d0:
008400DE            10921          ds.b      4
                    10922   _d1:
008400E2            10923          ds.b      4
                    10924   _d2:
008400E6            10925          ds.b      4
                    10926   _d3:
008400EA            10927          ds.b      4
                    10928   _d4:
008400EE            10929          ds.b      4
                    10930   _d5:
008400F2            10931          ds.b      4
                    10932   _d6:
008400F6            10933          ds.b      4
                    10934   _d7:
008400FA            10935          ds.b      4
                    10936   _a0:
008400FE            10937          ds.b      4
                    10938   _a1:
00840102            10939          ds.b      4
                    10940   _a2:
00840106            10941          ds.b      4
                    10942   _a3:
0084010A            10943          ds.b      4
                    10944   _a4:
0084010E            10945          ds.b      4
                    10946   _a5:
00840112            10947          ds.b      4
                    10948   _a6:
00840116            10949          ds.b      4
                    10950   _PC:
0084011A            10951          ds.b      4
                    10952   _SSP:
0084011E            10953          ds.b      4
                    10954   _USP:
00840122            10955          ds.b      4
                    10956   _SR:
00840126            10957          ds.b      2
                    10958   _BreakPointAddress:
00840128            10959          ds.b      32
                    10960   _BreakPointInstruction:
00840148            10961          ds.b      16
                    10962   _BreakPointSetOrCleared:
00840158            10963          ds.b      32
                    10964   _InstructionSize:
00840178            10965          ds.b      4
                    10966   _WatchPointAddress:
0084017C            10967          ds.b      32
                    10968   _WatchPointSetOrCleared:
0084019C            10969          ds.b      32
                    10970   _WatchPointString:
008401BC            10971          ds.b      800
                    10972   _Instruction:
008404DC            10973          ds.b      100
                    10974   _TempString:
00840540            10975          ds.b      100
                    10976          section   heap
008405A4            10977                   align
          0084 05A4 10978   bssEnd          equ *                   end of storage space for unitialised variables
                    10979   *                                       we have to copy all initialised variable from rom to here at startup
          0084 05A4 10980   heap   equ       *
008405A4            10981              align
                    10982          section   const
                    10983   @m68kde~1_1:
008405A4  0D53 7769 10984          dc.b      13,83,119,105,116,99,104,101,115,32,83,87,91
008405A8  7463 6865 
008405AC  7320 5357 
008405B0  5B        
008405B1  3135 2D30 10985          dc.b      49,53,45,48,93,32,61,32,0
008405B5  5D20 3D20 
008405B9  00        
                    10986   @m68kde~1_2:
008405BA  3000      10987          dc.b      48,0
                    10988   @m68kde~1_3:
008405BC  3100      10989          dc.b      49,0
                    10990   @m68kde~1_4:
008405BE  0D0A 456E 10991          dc.b      13,10,69,110,116,101,114,32,83,116,97,114,116
008405C2  7465 7220 
008405C6  5374 6172 
008405CA  74        
008405CB  2041 6464 10992          dc.b      32,65,100,100,114,101,115,115,58,32,0
008405CF  7265 7373 
008405D3  3A20 00   
                    10993   @m68kde~1_5:
008405D6  0D0A 3C45 10994          dc.b      13,10,60,69,83,67,62,32,61,32,65,98,111,114
008405DA  5343 3E20 
008405DE  3D20 4162 
008405E2  6F72      
008405E4  742C 2053 10995          dc.b      116,44,32,83,80,65,67,69,32,116,111,32,67,111
008405E8  5041 4345 
008405EC  2074 6F20 
008405F0  436F      
008405F2  6E74 696E 10996          dc.b      110,116,105,110,117,101,0
008405F6  7565 00   
                    10997   @m68kde~1_6:
008405FA  0D0A 2530 10998          dc.b      13,10,37,48,56,88,32,32,37,48,52,88,32,32,32
008405FE  3858 2020 
00840602  2530 3458 
00840606  2020 20   
00840609  2020 2020 10999          dc.b      32,32,32,32,32,32,32,32,32,32,32,32,32,32,32
0084060D  2020 2020 
00840611  2020 2020 
00840615  2020 20   
00840618  2020 2020 11000          dc.b      32,32,32,32,32,32,37,115,0
0084061C  2020 2573 
00840620  00        
                    11001   @m68kde~1_7:
00840622  0D0A 2530 11002          dc.b      13,10,37,48,56,88,32,32,37,48,52,88,32,37,48
00840626  3858 2020 
0084062A  2530 3458 
0084062E  2025 30   
00840631  3458 2020 11003          dc.b      52,88,32,32,32,32,32,32,32,32,32,32,32,32,32
00840635  2020 2020 
00840639  2020 2020 
0084063D  2020 20   
00840640  2020 2020 11004          dc.b      32,32,32,32,32,32,37,115,0
00840644  2020 2573 
00840648  00        
                    11005   @m68kde~1_8:
0084064A  0D0A 2530 11006          dc.b      13,10,37,48,56,88,32,32,37,48,52,88,32,37,48
0084064E  3858 2020 
00840652  2530 3458 
00840656  2025 30   
00840659  3458 2025 11007          dc.b      52,88,32,37,48,52,88,32,32,32,32,32,32,32,32
0084065D  3034 5820 
00840661  2020 2020 
00840665  2020 20   
00840668  2020 2020 11008          dc.b      32,32,32,32,32,32,37,115,0
0084066C  2020 2573 
00840670  00        
                    11009   @m68kde~1_9:
00840672  0D0A 2530 11010          dc.b      13,10,37,48,56,88,32,32,37,48,52,88,32,37,48
00840676  3858 2020 
0084067A  2530 3458 
0084067E  2025 30   
00840681  3458 2025 11011          dc.b      52,88,32,37,48,52,88,32,37,48,52,88,32,32,32
00840685  3034 5820 
00840689  2530 3458 
0084068D  2020 20   
00840690  2020 2020 11012          dc.b      32,32,32,32,32,32,37,115,0
00840694  2020 2573 
00840698  00        
                    11013   @m68kde~1_10:
0084069A  0D0A 2530 11014          dc.b      13,10,37,48,56,88,32,32,37,48,52,88,32,37,48
0084069E  3858 2020 
008406A2  2530 3458 
008406A6  2025 30   
008406A9  3458 2025 11015          dc.b      52,88,32,37,48,52,88,32,37,48,52,88,32,37,48
008406AD  3034 5820 
008406B1  2530 3458 
008406B5  2025 30   
008406B8  3458 2020 11016          dc.b      52,88,32,32,32,32,37,115,0
008406BC  2020 2573 
008406C0  00        
                    11017   @m68kde~1_11:
008406C2  0D0A 4475 11018          dc.b      13,10,68,117,109,112,32,77,101,109,111,114,121
008406C6  6D70 204D 
008406CA  656D 6F72 
008406CE  79        
008406CF  2042 6C6F 11019          dc.b      32,66,108,111,99,107,58,32,60,69,83,67,62,32
008406D3  636B 3A20 
008406D7  3C45 5343 
008406DB  3E20      
008406DD  746F 2041 11020          dc.b      116,111,32,65,98,111,114,116,44,32,60,83,80
008406E1  626F 7274 
008406E5  2C20 3C53 
008406E9  50        
008406EA  4143 453E 11021          dc.b      65,67,69,62,32,116,111,32,67,111,110,116,105
008406EE  2074 6F20 
008406F2  436F 6E74 
008406F6  69        
008406F7  6E75 6500 11022          dc.b      110,117,101,0
                    11023   @m68kde~1_12:
008406FC  0D0A 456E 11024          dc.b      13,10,69,110,116,101,114,32,83,116,97,114,116
00840700  7465 7220 
00840704  5374 6172 
00840708  74        
00840709  2041 6464 11025          dc.b      32,65,100,100,114,101,115,115,58,32,0
0084070D  7265 7373 
00840711  3A20 00   
                    11026   @m68kde~1_13:
00840714  0D0A 2530 11027          dc.b      13,10,37,48,56,120,32,0
00840718  3878 2000 
                    11028   @m68kde~1_14:
0084071C  2530 3258 11029          dc.b      37,48,50,88,0
00840720  00        
                    11030   @m68kde~1_15:
00840722  2020 00   11031          dc.b      32,32,0
                    11032   @m68kde~1_16:
00840726  0D0A 00   11033          dc.b      13,10,0
                    11034   @m68kde~1_17:
0084072A  0D0A 4669 11035          dc.b      13,10,70,105,108,108,32,77,101,109,111,114,121
0084072E  6C6C 204D 
00840732  656D 6F72 
00840736  79        
00840737  2042 6C6F 11036          dc.b      32,66,108,111,99,107,0
0084073B  636B 00   
                    11037   @m68kde~1_18:
0084073E  0D0A 456E 11038          dc.b      13,10,69,110,116,101,114,32,83,116,97,114,116
00840742  7465 7220 
00840746  5374 6172 
0084074A  74        
0084074B  2041 6464 11039          dc.b      32,65,100,100,114,101,115,115,58,32,0
0084074F  7265 7373 
00840753  3A20 00   
                    11040   @m68kde~1_19:
00840756  0D0A 456E 11041          dc.b      13,10,69,110,116,101,114,32,69,110,100,32,65
0084075A  7465 7220 
0084075E  456E 6420 
00840762  41        
00840763  6464 7265 11042          dc.b      100,100,114,101,115,115,58,32,0
00840767  7373 3A20 
0084076B  00        
                    11043   @m68kde~1_20:
0084076C  0D0A 456E 11044          dc.b      13,10,69,110,116,101,114,32,70,105,108,108,32
00840770  7465 7220 
00840774  4669 6C6C 
00840778  20        
00840779  4461 7461 11045          dc.b      68,97,116,97,58,32,0
0084077D  3A20 00   
                    11046   @m68kde~1_21:
00840780  0D0A 4669 11047          dc.b      13,10,70,105,108,108,105,110,103,32,65,100,100
00840784  6C6C 696E 
00840788  6720 4164 
0084078C  64        
0084078D  7265 7373 11048          dc.b      114,101,115,115,101,115,32,91,36,37,48,56,88
00840791  6573 205B 
00840795  2425 3038 
00840799  58        
0084079A  202D 2024 11049          dc.b      32,45,32,36,37,48,56,88,93,32,119,105,116,104
0084079E  2530 3858 
008407A2  5D20 7769 
008407A6  7468      
008407A8  2024 2530 11050          dc.b      32,36,37,48,50,88,0
008407AC  3258 00   
                    11051   @m68kde~1_22:
008407B0  0D0A 446F 11052          dc.b      13,10,68,111,119,110,108,111,97,100,32,80,114
008407B4  776E 6C6F 
008407B8  6164 2050 
008407BC  72        
008407BD  6F67 7261 11053          dc.b      111,103,114,97,109,32,116,111,32,77,101,109
008407C1  6D20 746F 
008407C5  204D 656D 
008407C9  6F72 792E 11054          dc.b      111,114,121,46,46,46,46,60,69,83,67,62,32,116
008407CD  2E2E 2E3C 
008407D1  4553 433E 
008407D5  2074      
008407D7  6F20 4361 11055          dc.b      111,32,67,97,110,99,101,108,0
008407DB  6E63 656C 
008407DF  00        
                    11056   @m68kde~1_23:
008407E0  0D0A 5761 11057          dc.b      13,10,87,97,105,116,105,110,103,32,102,111,114
008407E4  6974 696E 
008407E8  6720 666F 
008407EC  72        
008407ED  204C 6170 11058          dc.b      32,76,97,112,116,111,112,32,116,111,32,115,101
008407F1  746F 7020 
008407F5  746F 2073 
008407F9  65        
008407FA  6E64 2027 11059          dc.b      110,100,32,39,46,72,69,88,39,32,102,105,108
008407FE  2E48 4558 
00840802  2720 6669 
00840806  6C        
00840807  653A 0D0A 11060          dc.b      101,58,13,10,0
0084080B  00        
                    11061   @m68kde~1_24:
0084080C  0D0A 4C6F 11062          dc.b      13,10,76,111,97,100,32,70,97,105,108,101,100
00840810  6164 2046 
00840814  6169 6C65 
00840818  64        
00840819  2061 7420 11063          dc.b      32,97,116,32,65,100,100,114,101,115,115,32,61
0084081D  4164 6472 
00840821  6573 7320 
00840825  3D        
00840826  205B 2425 11064          dc.b      32,91,36,37,48,56,88,93,13,10,0
0084082A  3038 585D 
0084082E  0D0A 00   
                    11065   @m68kde~1_25:
00840832  0D0A 4C6F 11066          dc.b      13,10,76,111,97,100,32,83,117,99,99,101,115
00840836  6164 2053 
0084083A  7563 6365 
0084083E  73        
0084083F  7366 756C 11067          dc.b      115,102,117,108,46,46,46,46,46,13,10,0
00840843  2E2E 2E2E 
00840847  2E0D 0A00 
                    11068   @m68kde~1_26:
0084084C  0D0A 4578 11069          dc.b      13,10,69,120,97,109,105,110,101,32,97,110,100
00840850  616D 696E 
00840854  6520 616E 
00840858  64        
00840859  2043 6861 11070          dc.b      32,67,104,97,110,103,101,32,77,101,109,111,114
0084085D  6E67 6520 
00840861  4D65 6D6F 
00840865  72        
00840866  7900      11071          dc.b      121,0
                    11072   @m68kde~1_27:
00840868  0D0A 3C45 11073          dc.b      13,10,60,69,83,67,62,32,116,111,32,83,116,111
0084086C  5343 3E20 
00840870  746F 2053 
00840874  746F      
00840876  702C 203C 11074          dc.b      112,44,32,60,83,80,65,67,69,62,32,116,111,32
0084087A  5350 4143 
0084087E  453E 2074 
00840882  6F20      
00840884  4164 7661 11075          dc.b      65,100,118,97,110,99,101,44,32,39,45,39,32,116
00840888  6E63 652C 
0084088C  2027 2D27 
00840890  2074      
00840892  6F20 476F 11076          dc.b      111,32,71,111,32,66,97,99,107,44,32,60,68,65
00840896  2042 6163 
0084089A  6B2C 203C 
0084089E  4441      
008408A0  5441 3E20 11077          dc.b      84,65,62,32,116,111,32,99,104,97,110,103,101
008408A4  746F 2063 
008408A8  6861 6E67 
008408AC  65        
008408AD  00        11078          dc.b      0
                    11079   @m68kde~1_28:
008408AE  0D0A 456E 11080          dc.b      13,10,69,110,116,101,114,32,65,100,100,114,101
008408B2  7465 7220 
008408B6  4164 6472 
008408BA  65        
008408BB  7373 3A20 11081          dc.b      115,115,58,32,0
008408BF  00        
                    11082   @m68kde~1_29:
008408C0  0D0A 5B25 11083          dc.b      13,10,91,37,48,56,120,93,32,58,32,37,48,50,120
008408C4  3038 785D 
008408C8  203A 2025 
008408CC  3032 78   
008408CF  2020 00   11084          dc.b      32,32,0
                    11085   @m68kde~1_30:
008408D2  0D0A 5761 11086          dc.b      13,10,87,97,114,110,105,110,103,32,67,104,97
008408D6  726E 696E 
008408DA  6720 4368 
008408DE  61        
008408DF  6E67 6520 11087          dc.b      110,103,101,32,70,97,105,108,101,100,58,32,87
008408E3  4661 696C 
008408E7  6564 3A20 
008408EB  57        
008408EC  726F 7465 11088          dc.b      114,111,116,101,32,91,37,48,50,120,93,44,32
008408F0  205B 2530 
008408F4  3278 5D2C 
008408F8  20        
008408F9  5265 6164 11089          dc.b      82,101,97,100,32,91,37,48,50,120,93,0
008408FD  205B 2530 
00840901  3278 5D00 
                    11090   @m68kde~1_31:
00840906  0D0A 5072 11091          dc.b      13,10,80,114,111,103,114,97,109,32,70,108,97
0084090A  6F67 7261 
0084090E  6D20 466C 
00840912  61        
00840913  7368 204D 11092          dc.b      115,104,32,77,101,109,111,114,121,46,46,46,46
00840917  656D 6F72 
0084091B  792E 2E2E 
0084091F  2E        
00840920  2E5B 592F 11093          dc.b      46,91,89,47,78,93,63,0
00840924  4E5D 3F00 
                    11094   @m68kde~1_32:
00840928  0D0A 5072 11095          dc.b      13,10,80,114,111,103,114,97,109,109,105,110
0084092C  6F67 7261 
00840930  6D6D 696E 
00840934  6720 4142 11096          dc.b      103,32,65,66,65,78,68,79,78,69,68,46,46,46,46
00840938  414E 444F 
0084093C  4E45 442E 
00840940  2E2E 2E   
00840943  2E00      11097          dc.b      46,0
                    11098   @m68kde~1_33:
00840946  0D0A 4572 11099          dc.b      13,10,69,114,97,115,105,110,103,32,70,108,97
0084094A  6173 696E 
0084094E  6720 466C 
00840952  61        
00840953  7368 204D 11100          dc.b      115,104,32,77,101,109,111,114,121,46,46,46,46
00840957  656D 6F72 
0084095B  792E 2E2E 
0084095F  2E        
00840960  2E00      11101          dc.b      46,0
                    11102   @m68kde~1_34:
00840962  0D0A 5072 11103          dc.b      13,10,80,114,111,103,114,97,109,109,105,110
00840966  6F67 7261 
0084096A  6D6D 696E 
0084096E  6720 466C 11104          dc.b      103,32,70,108,97,115,104,32,77,101,109,111,114
00840972  6173 6820 
00840976  4D65 6D6F 
0084097A  72        
0084097B  792E 2E2E 11105          dc.b      121,46,46,46,46,46,0
0084097F  2E2E 00   
                    11106   @m68kde~1_35:
00840982  0D0A 5665 11107          dc.b      13,10,86,101,114,105,102,121,105,110,103,46
00840986  7269 6679 
0084098A  696E 672E 
0084098E  2E2E 2E2E 11108          dc.b      46,46,46,46,0
00840992  00        
                    11109   @m68kde~1_36:
00840994  0D0A 4641 11110          dc.b      13,10,70,65,73,76,69,68,46,46,46,46,46,0
00840998  494C 4544 
0084099C  2E2E 2E2E 
008409A0  2E00      
                    11111   @m68kde~1_37:
008409A2  0D0A 5041 11112          dc.b      13,10,80,65,83,83,69,68,0
008409A6  5353 4544 
008409AA  00        
                    11113   @m68kde~1_38:
008409AC  0D0A 4C6F 11114          dc.b      13,10,76,111,97,100,105,110,103,32,80,114,111
008409B0  6164 696E 
008409B4  6720 5072 
008409B8  6F        
008409B9  6772 616D 11115          dc.b      103,114,97,109,32,70,114,111,109,32,70,108,97
008409BD  2046 726F 
008409C1  6D20 466C 
008409C5  61        
008409C6  7368 2E2E 11116          dc.b      115,104,46,46,46,46,85,115,105,110,103,32,0
008409CA  2E2E 5573 
008409CE  696E 6720 
008409D2  00        
                    11117   @m68kde~1_39:
008409D4  536F 6674 11118          dc.b      83,111,102,116,119,97,114,101,0
008409D8  7761 7265 
008409DC  00        
                    11119   @m68kde~1_40:
008409DE  444D 4100 11120          dc.b      68,77,65,0
                    11121   @m68kde~1_41:
008409E2  0D0A 5072 11122          dc.b      13,10,80,114,111,103,114,97,109,32,76,111,97
008409E6  6F67 7261 
008409EA  6D20 4C6F 
008409EE  61        
008409EF  6465 642E 11123          dc.b      100,101,100,46,46,46,46,46,0
008409F3  2E2E 2E2E 
008409F7  00        
                    11124   @m68kde~1_42:
008409F8  2425 3038 11125          dc.b      36,37,48,56,88,32,32,0
008409FC  5820 2000 
                    11126   @m68kde~1_43:
00840A00  2530 3258 11127          dc.b      37,48,50,88,0
00840A04  00        
                    11128   @m68kde~1_44:
00840A06  2000      11129          dc.b      32,0
                    11130   @m68kde~1_45:
00840A08  2020 00   11131          dc.b      32,32,0
                    11132   @m68kde~1_46:
00840A0C  2E00      11133          dc.b      46,0
                    11134   @m68kde~1_47:
00840A0E  2563 00   11135          dc.b      37,99,0
                    11136   @m68kde~1_48:
00840A12  00        11137          dc.b      0
                    11138   @m68kde~1_49:
00840A14  0D0A 0D0A 11139          dc.b      13,10,13,10,32,68,48,32,61,32,36,37,48,56,88
00840A18  2044 3020 
00840A1C  3D20 2425 
00840A20  3038 58   
00840A23  2020 4130 11140          dc.b      32,32,65,48,32,61,32,36,37,48,56,88,0
00840A27  203D 2024 
00840A2B  2530 3858 
00840A2F  00        
                    11141   @m68kde~1_50:
00840A30  0D0A 2044 11142          dc.b      13,10,32,68,49,32,61,32,36,37,48,56,88,32,32
00840A34  3120 3D20 
00840A38  2425 3038 
00840A3C  5820 20   
00840A3F  4131 203D 11143          dc.b      65,49,32,61,32,36,37,48,56,88,0
00840A43  2024 2530 
00840A47  3858 00   
                    11144   @m68kde~1_51:
00840A4A  0D0A 2044 11145          dc.b      13,10,32,68,50,32,61,32,36,37,48,56,88,32,32
00840A4E  3220 3D20 
00840A52  2425 3038 
00840A56  5820 20   
00840A59  4132 203D 11146          dc.b      65,50,32,61,32,36,37,48,56,88,0
00840A5D  2024 2530 
00840A61  3858 00   
                    11147   @m68kde~1_52:
00840A64  0D0A 2044 11148          dc.b      13,10,32,68,51,32,61,32,36,37,48,56,88,32,32
00840A68  3320 3D20 
00840A6C  2425 3038 
00840A70  5820 20   
00840A73  4133 203D 11149          dc.b      65,51,32,61,32,36,37,48,56,88,0
00840A77  2024 2530 
00840A7B  3858 00   
                    11150   @m68kde~1_53:
00840A7E  0D0A 2044 11151          dc.b      13,10,32,68,52,32,61,32,36,37,48,56,88,32,32
00840A82  3420 3D20 
00840A86  2425 3038 
00840A8A  5820 20   
00840A8D  4134 203D 11152          dc.b      65,52,32,61,32,36,37,48,56,88,0
00840A91  2024 2530 
00840A95  3858 00   
                    11153   @m68kde~1_54:
00840A98  0D0A 2044 11154          dc.b      13,10,32,68,53,32,61,32,36,37,48,56,88,32,32
00840A9C  3520 3D20 
00840AA0  2425 3038 
00840AA4  5820 20   
00840AA7  4135 203D 11155          dc.b      65,53,32,61,32,36,37,48,56,88,0
00840AAB  2024 2530 
00840AAF  3858 00   
                    11156   @m68kde~1_55:
00840AB2  0D0A 2044 11157          dc.b      13,10,32,68,54,32,61,32,36,37,48,56,88,32,32
00840AB6  3620 3D20 
00840ABA  2425 3038 
00840ABE  5820 20   
00840AC1  4136 203D 11158          dc.b      65,54,32,61,32,36,37,48,56,88,0
00840AC5  2024 2530 
00840AC9  3858 00   
                    11159   @m68kde~1_56:
00840ACC  0D0A 2044 11160          dc.b      13,10,32,68,55,32,61,32,36,37,48,56,88,32,32
00840AD0  3720 3D20 
00840AD4  2425 3038 
00840AD8  5820 20   
00840ADB  4137 203D 11161          dc.b      65,55,32,61,32,36,37,48,56,88,0
00840ADF  2024 2530 
00840AE3  3858 00   
                    11162   @m68kde~1_57:
00840AE6  0D0A 0D0A 11163          dc.b      13,10,13,10,85,83,80,32,61,32,36,37,48,56,88
00840AEA  5553 5020 
00840AEE  3D20 2425 
00840AF2  3038 58   
00840AF5  2020 2841 11164          dc.b      32,32,40,65,55,41,32,85,115,101,114,32,83,80
00840AF9  3729 2055 
00840AFD  7365 7220 
00840B01  5350      
00840B03  00        11165          dc.b      0
                    11166   @m68kde~1_58:
00840B04  0D0A 5353 11167          dc.b      13,10,83,83,80,32,61,32,36,37,48,56,88,32,32
00840B08  5020 3D20 
00840B0C  2425 3038 
00840B10  5820 20   
00840B13  2841 3729 11168          dc.b      40,65,55,41,32,83,117,112,101,114,118,105,115
00840B17  2053 7570 
00840B1B  6572 7669 
00840B1F  73        
00840B20  6F72 2053 11169          dc.b      111,114,32,83,80,0
00840B24  5000      
                    11170   @m68kde~1_59:
00840B26  0D0A 2053 11171          dc.b      13,10,32,83,82,32,61,32,36,37,48,52,88,32,32
00840B2A  5220 3D20 
00840B2E  2425 3034 
00840B32  5820 20   
00840B35  2000      11172          dc.b      32,0
                    11173   @m68kde~1_60:
00840B38  2020 205B 11174          dc.b      32,32,32,91,0
00840B3C  00        
                    11175   @m68kde~1_61:
00840B3E  0D0A 2050 11176          dc.b      13,10,32,80,67,32,61,32,36,37,48,56,88,32,32
00840B42  4320 3D20 
00840B46  2425 3038 
00840B4A  5820 20   
00840B4D  00        11177          dc.b      0
                    11178   @m68kde~1_62:
00840B4E  2573 00   11179          dc.b      37,115,0
                    11180   @m68kde~1_63:
00840B52  5B42 5245 11181          dc.b      91,66,82,69,65,75,80,79,73,78,84,93,0
00840B56  414B 504F 
00840B5A  494E 545D 
00840B5E  00        
                    11182   @m68kde~1_64:
00840B60  0D0A 00   11183          dc.b      13,10,0
                    11184   @m68kde~1_65:
00840B64  0D0A 5750 11185          dc.b      13,10,87,80,37,100,32,61,32,37,115,0
00840B68  2564 203D 
00840B6C  2025 7300 
                    11186   @m68kde~1_66:
00840B70  0D0A 0D0A 11187          dc.b      13,10,13,10,13,10,13,10,13,10,13,10,83,105,110
00840B74  0D0A 0D0A 
00840B78  0D0A 0D0A 
00840B7C  5369 6E   
00840B7F  676C 6520 11188          dc.b      103,108,101,32,83,116,101,112,32,32,58,91,79
00840B83  5374 6570 
00840B87  2020 3A5B 
00840B8B  4F        
00840B8C  4E5D 00   11189          dc.b      78,93,0
                    11190   @m68kde~1_67:
00840B90  0D0A 4272 11191          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00840B94  6561 6B20 
00840B98  506F 696E 
00840B9C  74        
00840B9D  7320 3A5B 11192          dc.b      115,32,58,91,68,105,115,97,98,108,101,100,93
00840BA1  4469 7361 
00840BA5  626C 6564 
00840BA9  5D        
00840BAA  00        11193          dc.b      0
                    11194   @m68kde~1_68:
00840BAC  0D0A 5072 11195          dc.b      13,10,80,114,101,115,115,32,60,83,80,65,67,69
00840BB0  6573 7320 
00840BB4  3C53 5041 
00840BB8  4345      
00840BBA  3E20 746F 11196          dc.b      62,32,116,111,32,69,120,101,99,117,116,101,32
00840BBE  2045 7865 
00840BC2  6375 7465 
00840BC6  20        
00840BC7  4E65 7874 11197          dc.b      78,101,120,116,32,73,110,115,116,114,117,99
00840BCB  2049 6E73 
00840BCF  7472 7563 
00840BD3  7469 6F6E 11198          dc.b      116,105,111,110,0
00840BD7  00        
                    11199   @m68kde~1_69:
00840BD8  0D0A 5072 11200          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00840BDC  6573 7320 
00840BE0  3C45 5343 
00840BE4  3E20      
00840BE6  746F 2052 11201          dc.b      116,111,32,82,101,115,117,109,101,32,80,114
00840BEA  6573 756D 
00840BEE  6520 5072 
00840BF2  6F67 7261 11202          dc.b      111,103,114,97,109,0
00840BF6  6D00      
                    11203   @m68kde~1_70:
00840BF8  0D0A 496C 11204          dc.b      13,10,73,108,108,101,103,97,108,32,68,97,116
00840BFC  6C65 6761 
00840C00  6C20 4461 
00840C04  74        
00840C05  6120 5265 11205          dc.b      97,32,82,101,103,105,115,116,101,114,32,58,32
00840C09  6769 7374 
00840C0D  6572 203A 
00840C11  20        
00840C12  5573 6520 11206          dc.b      85,115,101,32,68,48,45,68,55,46,46,46,46,46
00840C16  4430 2D44 
00840C1A  372E 2E2E 
00840C1E  2E2E      
00840C20  0D0A 00   11207          dc.b      13,10,0
                    11208   @m68kde~1_71:
00840C24  0D0A 4425 11209          dc.b      13,10,68,37,99,32,61,32,0
00840C28  6320 3D20 
00840C2C  00        
                    11210   @m68kde~1_72:
00840C2E  0D0A 496C 11211          dc.b      13,10,73,108,108,101,103,97,108,32,65,100,100
00840C32  6C65 6761 
00840C36  6C20 4164 
00840C3A  64        
00840C3B  7265 7373 11212          dc.b      114,101,115,115,32,82,101,103,105,115,116,101
00840C3F  2052 6567 
00840C43  6973 7465 
00840C47  7220 3A20 11213          dc.b      114,32,58,32,85,115,101,32,65,48,45,65,55,46
00840C4B  5573 6520 
00840C4F  4130 2D41 
00840C53  372E      
00840C55  2E2E 2E2E 11214          dc.b      46,46,46,46,13,10,0
00840C59  0D0A 00   
                    11215   @m68kde~1_73:
00840C5C  0D0A 4125 11216          dc.b      13,10,65,37,99,32,61,32,0
00840C60  6320 3D20 
00840C64  00        
                    11217   @m68kde~1_74:
00840C66  0D0A 5573 11218          dc.b      13,10,85,115,101,114,32,83,80,32,61,32,0
00840C6A  6572 2053 
00840C6E  5020 3D20 
00840C72  00        
                    11219   @m68kde~1_75:
00840C74  0D0A 496C 11220          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
00840C78  6C65 6761 
00840C7C  6C20 5265 
00840C80  67        
00840C81  6973 7465 11221          dc.b      105,115,116,101,114,46,46,46,46,0
00840C85  722E 2E2E 
00840C89  2E00      
                    11222   @m68kde~1_76:
00840C8C  0D0A 5379 11223          dc.b      13,10,83,121,115,116,101,109,32,83,80,32,61
00840C90  7374 656D 
00840C94  2053 5020 
00840C98  3D        
00840C99  2000      11224          dc.b      32,0
                    11225   @m68kde~1_77:
00840C9C  0D0A 496C 11226          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
00840CA0  6C65 6761 
00840CA4  6C20 5265 
00840CA8  67        
00840CA9  6973 7465 11227          dc.b      105,115,116,101,114,46,46,46,46,0
00840CAD  722E 2E2E 
00840CB1  2E00      
                    11228   @m68kde~1_78:
00840CB4  0D0A 5043 11229          dc.b      13,10,80,67,32,61,32,0
00840CB8  203D 2000 
                    11230   @m68kde~1_79:
00840CBC  0D0A 5352 11231          dc.b      13,10,83,82,32,61,32,0
00840CC0  203D 2000 
                    11232   @m68kde~1_80:
00840CC4  0D0A 496C 11233          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
00840CC8  6C65 6761 
00840CCC  6C20 5265 
00840CD0  67        
00840CD1  6973 7465 11234          dc.b      105,115,116,101,114,58,32,85,115,101,32,65,48
00840CD5  723A 2055 
00840CD9  7365 2041 
00840CDD  30        
00840CDE  2D41 372C 11235          dc.b      45,65,55,44,32,68,48,45,68,55,44,32,83,83,80
00840CE2  2044 302D 
00840CE6  4437 2C20 
00840CEA  5353 50   
00840CED  2C20 5553 11236          dc.b      44,32,85,83,80,44,32,80,67,32,111,114,32,83
00840CF1  502C 2050 
00840CF5  4320 6F72 
00840CF9  2053      
00840CFB  520D 0A00 11237          dc.b      82,13,10,0
                    11238   @m68kde~1_81:
00840D00  0D0A 0D0A 11239          dc.b      13,10,13,10,78,117,109,32,32,32,32,32,65,100
00840D04  4E75 6D20 
00840D08  2020 2020 
00840D0C  4164      
00840D0E  6472 6573 11240          dc.b      100,114,101,115,115,32,32,32,32,32,32,73,110
00840D12  7320 2020 
00840D16  2020 2049 
00840D1A  6E        
00840D1B  7374 7275 11241          dc.b      115,116,114,117,99,116,105,111,110,0
00840D1F  6374 696F 
00840D23  6E00      
                    11242   @m68kde~1_82:
00840D26  0D0A 2D2D 11243          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
00840D2A  2D20 2020 
00840D2E  2020 2D2D 
00840D32  2D2D 2D   
00840D35  2D2D 2D2D 11244          dc.b      45,45,45,45,32,32,32,32,45,45,45,45,45,45,45
00840D39  2020 2020 
00840D3D  2D2D 2D2D 
00840D41  2D2D 2D   
00840D44  2D2D 2D2D 11245          dc.b      45,45,45,45,0
00840D48  00        
                    11246   @m68kde~1_83:
00840D4A  0D0A 4E6F 11247          dc.b      13,10,78,111,32,66,114,101,97,107,80,111,105
00840D4E  2042 7265 
00840D52  616B 506F 
00840D56  69        
00840D57  6E74 7320 11248          dc.b      110,116,115,32,83,101,116,0
00840D5B  5365 7400 
                    11249   @m68kde~1_84:
00840D60  0D0A 2533 11250          dc.b      13,10,37,51,100,32,32,32,32,32,36,37,48,56,120
00840D64  6420 2020 
00840D68  2020 2425 
00840D6C  3038 78   
00840D6F  00        11251          dc.b      0
                    11252   @m68kde~1_85:
00840D70  2020 2020 11253          dc.b      32,32,32,32,37,115,0
00840D74  2573 00   
                    11254   @m68kde~1_86:
00840D78  0D0A 00   11255          dc.b      13,10,0
                    11256   @m68kde~1_87:
00840D7C  0D0A 4E75 11257          dc.b      13,10,78,117,109,32,32,32,32,32,65,100,100,114
00840D80  6D20 2020 
00840D84  2020 4164 
00840D88  6472      
00840D8A  6573 7300 11258          dc.b      101,115,115,0
                    11259   @m68kde~1_88:
00840D8E  0D0A 2D2D 11260          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
00840D92  2D20 2020 
00840D96  2020 2D2D 
00840D9A  2D2D 2D   
00840D9D  2D2D 2D2D 11261          dc.b      45,45,45,45,0
00840DA1  00        
                    11262   @m68kde~1_89:
00840DA2  0D0A 4E6F 11263          dc.b      13,10,78,111,32,87,97,116,99,104,80,111,105
00840DA6  2057 6174 
00840DAA  6368 506F 
00840DAE  69        
00840DAF  6E74 7320 11264          dc.b      110,116,115,32,83,101,116,0
00840DB3  5365 7400 
                    11265   @m68kde~1_90:
00840DB8  0D0A 2533 11266          dc.b      13,10,37,51,100,32,32,32,32,32,36,37,48,56,120
00840DBC  6420 2020 
00840DC0  2020 2425 
00840DC4  3038 78   
00840DC7  00        11267          dc.b      0
                    11268   @m68kde~1_91:
00840DC8  0D0A 00   11269          dc.b      13,10,0
                    11270   @m68kde~1_92:
00840DCC  0D0A 456E 11271          dc.b      13,10,69,110,116,101,114,32,66,114,101,97,107
00840DD0  7465 7220 
00840DD4  4272 6561 
00840DD8  6B        
00840DD9  2050 6F69 11272          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
00840DDD  6E74 204E 
00840DE1  756D 6265 
00840DE5  72        
00840DE6  3A20 00   11273          dc.b      58,32,0
                    11274   @m68kde~1_93:
00840DEA  0D0A 496C 11275          dc.b      13,10,73,108,108,101,103,97,108,32,82,97,110
00840DEE  6C65 6761 
00840DF2  6C20 5261 
00840DF6  6E        
00840DF7  6765 203A 11276          dc.b      103,101,32,58,32,85,115,101,32,48,32,45,32,55
00840DFB  2055 7365 
00840DFF  2030 202D 
00840E03  2037      
00840E05  00        11277          dc.b      0
                    11278   @m68kde~1_94:
00840E06  0D0A 4272 11279          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00840E0A  6561 6B20 
00840E0E  506F 696E 
00840E12  74        
00840E13  2043 6C65 11280          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
00840E17  6172 6564 
00840E1B  2E2E 2E2E 
00840E1F  2E        
00840E20  0D0A 00   11281          dc.b      13,10,0
                    11282   @m68kde~1_95:
00840E24  0D0A 4272 11283          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00840E28  6561 6B20 
00840E2C  506F 696E 
00840E30  74        
00840E31  2077 6173 11284          dc.b      32,119,97,115,110,39,116,32,83,101,116,46,46
00840E35  6E27 7420 
00840E39  5365 742E 
00840E3D  2E        
00840E3E  2E2E 2E00 11285          dc.b      46,46,46,0
                    11286   @m68kde~1_96:
00840E42  0D0A 456E 11287          dc.b      13,10,69,110,116,101,114,32,87,97,116,99,104
00840E46  7465 7220 
00840E4A  5761 7463 
00840E4E  68        
00840E4F  2050 6F69 11288          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
00840E53  6E74 204E 
00840E57  756D 6265 
00840E5B  72        
00840E5C  3A20 00   11289          dc.b      58,32,0
                    11290   @m68kde~1_97:
00840E60  0D0A 496C 11291          dc.b      13,10,73,108,108,101,103,97,108,32,82,97,110
00840E64  6C65 6761 
00840E68  6C20 5261 
00840E6C  6E        
00840E6D  6765 203A 11292          dc.b      103,101,32,58,32,85,115,101,32,48,32,45,32,55
00840E71  2055 7365 
00840E75  2030 202D 
00840E79  2037      
00840E7B  00        11293          dc.b      0
                    11294   @m68kde~1_98:
00840E7C  0D0A 5761 11295          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00840E80  7463 6820 
00840E84  506F 696E 
00840E88  74        
00840E89  2043 6C65 11296          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
00840E8D  6172 6564 
00840E91  2E2E 2E2E 
00840E95  2E        
00840E96  0D0A 00   11297          dc.b      13,10,0
                    11298   @m68kde~1_99:
00840E9A  0D0A 5761 11299          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00840E9E  7463 6820 
00840EA2  506F 696E 
00840EA6  74        
00840EA7  2057 6173 11300          dc.b      32,87,97,115,32,110,111,116,32,83,101,116,46
00840EAB  206E 6F74 
00840EAF  2053 6574 
00840EB3  2E        
00840EB4  2E2E 2E2E 11301          dc.b      46,46,46,46,0
00840EB8  00        
                    11302   @m68kde~1_100:
00840EBA  0D0A 4E6F 11303          dc.b      13,10,78,111,32,70,82,69,69,32,66,114,101,97
00840EBE  2046 5245 
00840EC2  4520 4272 
00840EC6  6561      
00840EC8  6B20 506F 11304          dc.b      107,32,80,111,105,110,116,115,46,46,46,46,46
00840ECC  696E 7473 
00840ED0  2E2E 2E2E 
00840ED4  2E        
00840ED5  00        11305          dc.b      0
                    11306   @m68kde~1_101:
00840ED6  0D0A 4272 11307          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00840EDA  6561 6B20 
00840EDE  506F 696E 
00840EE2  74        
00840EE3  2041 6464 11308          dc.b      32,65,100,100,114,101,115,115,58,32,0
00840EE7  7265 7373 
00840EEB  3A20 00   
                    11309   @m68kde~1_102:
00840EEE  0D0A 4572 11310          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
00840EF2  726F 7220 
00840EF6  3A20 4272 
00840EFA  65        
00840EFB  616B 2050 11311          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
00840EFF  6F69 6E74 
00840F03  7320 4341 
00840F07  4E        
00840F08  4E4F 5420 11312          dc.b      78,79,84,32,98,101,32,115,101,116,32,97,116
00840F0C  6265 2073 
00840F10  6574 2061 
00840F14  74        
00840F15  204F 4444 11313          dc.b      32,79,68,68,32,97,100,100,114,101,115,115,101
00840F19  2061 6464 
00840F1D  7265 7373 
00840F21  65        
00840F22  7300      11314          dc.b      115,0
                    11315   @m68kde~1_103:
00840F24  0D0A 4572 11316          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
00840F28  726F 7220 
00840F2C  3A20 4272 
00840F30  65        
00840F31  616B 2050 11317          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
00840F35  6F69 6E74 
00840F39  7320 4341 
00840F3D  4E        
00840F3E  4E4F 5420 11318          dc.b      78,79,84,32,98,101,32,115,101,116,32,102,111
00840F42  6265 2073 
00840F46  6574 2066 
00840F4A  6F        
00840F4B  7220 524F 11319          dc.b      114,32,82,79,77,32,105,110,32,82,97,110,103
00840F4F  4D20 696E 
00840F53  2052 616E 
00840F57  67        
00840F58  6520 3A20 11320          dc.b      101,32,58,32,91,36,48,45,36,48,48,48,48,55,70
00840F5C  5B24 302D 
00840F60  2430 3030 
00840F64  3037 46   
00840F67  4646 5D00 11321          dc.b      70,70,93,0
                    11322   @m68kde~1_104:
00840F6C  0D0A 4572 11323          dc.b      13,10,69,114,114,111,114,58,32,66,114,101,97
00840F70  726F 723A 
00840F74  2042 7265 
00840F78  61        
00840F79  6B20 506F 11324          dc.b      107,32,80,111,105,110,116,32,65,108,114,101
00840F7D  696E 7420 
00840F81  416C 7265 
00840F85  6164 7920 11325          dc.b      97,100,121,32,69,120,105,115,116,115,32,97,116
00840F89  4578 6973 
00840F8D  7473 2061 
00840F91  74        
00840F92  2041 6464 11326          dc.b      32,65,100,100,114,101,115,115,32,58,32,37,48
00840F96  7265 7373 
00840F9A  203A 2025 
00840F9E  30        
00840F9F  3878 0D0A 11327          dc.b      56,120,13,10,0
00840FA3  00        
                    11328   @m68kde~1_105:
00840FA4  0D0A 4272 11329          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00840FA8  6561 6B20 
00840FAC  506F 696E 
00840FB0  74        
00840FB1  2053 6574 11330          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
00840FB5  2061 7420 
00840FB9  4164 6472 
00840FBD  65        
00840FBE  7373 3A20 11331          dc.b      115,115,58,32,91,36,37,48,56,120,93,44,32,73
00840FC2  5B24 2530 
00840FC6  3878 5D2C 
00840FCA  2049      
00840FCC  6E73 7472 11332          dc.b      110,115,116,114,117,99,116,105,111,110,32,61
00840FD0  7563 7469 
00840FD4  6F6E 203D 
00840FD8  2025 7300 11333          dc.b      32,37,115,0
                    11334   @m68kde~1_106:
00840FDC  0D0A 00   11335          dc.b      13,10,0
                    11336   @m68kde~1_107:
00840FE0  0D0A 4E6F 11337          dc.b      13,10,78,111,32,70,82,69,69,32,87,97,116,99
00840FE4  2046 5245 
00840FE8  4520 5761 
00840FEC  7463      
00840FEE  6820 506F 11338          dc.b      104,32,80,111,105,110,116,115,46,46,46,46,46
00840FF2  696E 7473 
00840FF6  2E2E 2E2E 
00840FFA  2E        
00840FFB  00        11339          dc.b      0
                    11340   @m68kde~1_108:
00840FFC  0D0A 5761 11341          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00841000  7463 6820 
00841004  506F 696E 
00841008  74        
00841009  2041 6464 11342          dc.b      32,65,100,100,114,101,115,115,58,32,0
0084100D  7265 7373 
00841011  3A20 00   
                    11343   @m68kde~1_109:
00841014  0D0A 4572 11344          dc.b      13,10,69,114,114,111,114,58,32,87,97,116,99
00841018  726F 723A 
0084101C  2057 6174 
00841020  63        
00841021  6820 506F 11345          dc.b      104,32,80,111,105,110,116,32,65,108,114,101
00841025  696E 7420 
00841029  416C 7265 
0084102D  6164 7920 11346          dc.b      97,100,121,32,83,101,116,32,97,116,32,65,100
00841031  5365 7420 
00841035  6174 2041 
00841039  64        
0084103A  6472 6573 11347          dc.b      100,114,101,115,115,32,58,32,37,48,56,120,13
0084103E  7320 3A20 
00841042  2530 3878 
00841046  0D        
00841047  0A00      11348          dc.b      10,0
                    11349   @m68kde~1_110:
0084104A  0D0A 5761 11350          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
0084104E  7463 6820 
00841052  506F 696E 
00841056  74        
00841057  2053 6574 11351          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
0084105B  2061 7420 
0084105F  4164 6472 
00841063  65        
00841064  7373 3A20 11352          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
00841068  5B24 2530 
0084106C  3878 5D00 
                    11353   @m68kde~1_111:
00841070  0D0A 00   11354          dc.b      13,10,0
                    11355   @m68kde~1_112:
00841074  0D0A 0D0A 11356          dc.b      13,10,13,10,13,10,13,10,64,66,82,69,65,75,80
00841078  0D0A 0D0A 
0084107C  4042 5245 
00841080  414B 50   
00841083  4F49 4E54 11357          dc.b      79,73,78,84,0
00841087  00        
                    11358   @m68kde~1_113:
00841088  0D0A 5369 11359          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
0084108C  6E67 6C65 
00841090  2053 7465 
00841094  70        
00841095  203A 205B 11360          dc.b      32,58,32,91,79,78,93,0
00841099  4F4E 5D00 
                    11361   @m68kde~1_114:
0084109E  0D0A 4272 11362          dc.b      13,10,66,114,101,97,107,80,111,105,110,116,115
008410A2  6561 6B50 
008410A6  6F69 6E74 
008410AA  73        
008410AB  203A 205B 11363          dc.b      32,58,32,91,69,110,97,98,108,101,100,93,0
008410AF  456E 6162 
008410B3  6C65 645D 
008410B7  00        
                    11364   @m68kde~1_115:
008410B8  0D0A 5072 11365          dc.b      13,10,80,114,101,115,115,32,60,83,80,65,67,69
008410BC  6573 7320 
008410C0  3C53 5041 
008410C4  4345      
008410C6  3E20 746F 11366          dc.b      62,32,116,111,32,69,120,101,99,117,116,101,32
008410CA  2045 7865 
008410CE  6375 7465 
008410D2  20        
008410D3  4E65 7874 11367          dc.b      78,101,120,116,32,73,110,115,116,114,117,99
008410D7  2049 6E73 
008410DB  7472 7563 
008410DF  7469 6F6E 11368          dc.b      116,105,111,110,0
008410E3  00        
                    11369   @m68kde~1_116:
008410E4  0D0A 5072 11370          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
008410E8  6573 7320 
008410EC  3C45 5343 
008410F0  3E20      
008410F2  746F 2052 11371          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
008410F6  6573 756D 
008410FA  6520 5573 
008410FE  6572 2050 11372          dc.b      101,114,32,80,114,111,103,114,97,109,13,10,0
00841102  726F 6772 
00841106  616D 0D0A 
0084110A  00        
                    11373   @m68kde~1_117:
0084110C  0D0A 556E 11374          dc.b      13,10,85,110,107,110,111,119,110,32,67,111,109
00841110  6B6E 6F77 
00841114  6E20 436F 
00841118  6D        
00841119  6D61 6E64 11375          dc.b      109,97,110,100,46,46,46,46,46,13,10,0
0084111D  2E2E 2E2E 
00841121  2E0D 0A00 
                    11376   @m68kde~1_118:
00841126  0D0A 5072 11377          dc.b      13,10,80,114,111,103,114,97,109,32,69,110,100
0084112A  6F67 7261 
0084112E  6D20 456E 
00841132  64        
00841133  6564 2028 11378          dc.b      101,100,32,40,84,82,65,80,32,35,49,53,41,46
00841137  5452 4150 
0084113B  2023 3135 
0084113F  292E      
00841141  2E2E 2E00 11379          dc.b      46,46,46,0
                    11380   @m68kde~1_119:
00841146  0D0A 4B69 11381          dc.b      13,10,75,105,108,108,32,65,108,108,32,66,114
0084114A  6C6C 2041 
0084114E  6C6C 2042 
00841152  72        
00841153  6561 6B20 11382          dc.b      101,97,107,32,80,111,105,110,116,115,46,46,46
00841157  506F 696E 
0084115B  7473 2E2E 
0084115F  2E        
00841160  2879 2F6E 11383          dc.b      40,121,47,110,41,63,0
00841164  293F 00   
                    11384   @m68kde~1_120:
00841168  0D0A 4B69 11385          dc.b      13,10,75,105,108,108,32,65,108,108,32,87,97
0084116C  6C6C 2041 
00841170  6C6C 2057 
00841174  61        
00841175  7463 6820 11386          dc.b      116,99,104,32,80,111,105,110,116,115,46,46,46
00841179  506F 696E 
0084117D  7473 2E2E 
00841181  2E        
00841182  2879 2F6E 11387          dc.b      40,121,47,110,41,63,0
00841186  293F 00   
                    11388   @m68kde~1_121:
0084118A  0D0A 2D2D 11389          dc.b      13,10,45,45,45,45,45,45,45,45,45,45,45,45,45
0084118E  2D2D 2D2D 
00841192  2D2D 2D2D 
00841196  2D2D 2D   
00841199  2D2D 2D2D 11390          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
0084119D  2D2D 2D2D 
008411A1  2D2D 2D2D 
008411A5  2D2D 2D   
008411A8  2D2D 2D2D 11391          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
008411AC  2D2D 2D2D 
008411B0  2D2D 2D2D 
008411B4  2D2D 2D   
008411B7  2D2D 2D2D 11392          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
008411BB  2D2D 2D2D 
008411BF  2D2D 2D2D 
008411C3  2D2D 2D   
008411C6  2D2D 2D2D 11393          dc.b      45,45,45,45,45,45,0
008411CA  2D2D 00   
                    11394   @m68kde~1_122:
008411CE  0D0A 2020 11395          dc.b      13,10,32,32,68,101,98,117,103,103,101,114,32
008411D2  4465 6275 
008411D6  6767 6572 
008411DA  20        
008411DB  436F 6D6D 11396          dc.b      67,111,109,109,97,110,100,32,83,117,109,109
008411DF  616E 6420 
008411E3  5375 6D6D 
008411E7  6172 7900 11397          dc.b      97,114,121,0
                    11398   @m68kde~1_123:
008411EC  0D0A 2020 11399          dc.b      13,10,32,32,46,40,114,101,103,41,32,32,32,32
008411F0  2E28 7265 
008411F4  6729 2020 
008411F8  2020      
008411FA  2020 202D 11400          dc.b      32,32,32,45,32,67,104,97,110,103,101,32,82,101
008411FE  2043 6861 
00841202  6E67 6520 
00841206  5265      
00841208  6769 7374 11401          dc.b      103,105,115,116,101,114,115,58,32,101,46,103
0084120C  6572 733A 
00841210  2065 2E67 
00841214  2041 302D 11402          dc.b      32,65,48,45,65,55,44,68,48,45,68,55,44,80,67
00841218  4137 2C44 
0084121C  302D 4437 
00841220  2C50 43   
00841223  2C53 5350 11403          dc.b      44,83,83,80,44,85,83,80,44,83,82,0
00841227  2C55 5350 
0084122B  2C53 5200 
                    11404   @m68kde~1_124:
00841230  0D0A 2020 11405          dc.b      13,10,32,32,66,68,47,66,83,47,66,67,47,66,75
00841234  4244 2F42 
00841238  532F 4243 
0084123C  2F42 4B   
0084123F  2020 2D20 11406          dc.b      32,32,45,32,66,114,101,97,107,32,80,111,105
00841243  4272 6561 
00841247  6B20 506F 
0084124B  69        
0084124C  6E74 3A20 11407          dc.b      110,116,58,32,68,105,115,112,108,97,121,47,83
00841250  4469 7370 
00841254  6C61 792F 
00841258  53        
00841259  6574 2F43 11408          dc.b      101,116,47,67,108,101,97,114,47,75,105,108,108
0084125D  6C65 6172 
00841261  2F4B 696C 
00841265  6C        
00841266  00        11409          dc.b      0
                    11410   @m68kde~1_125:
00841268  0D0A 2020 11411          dc.b      13,10,32,32,67,32,32,32,32,32,32,32,32,32,32
0084126C  4320 2020 
00841270  2020 2020 
00841274  2020 20   
00841277  2020 2D20 11412          dc.b      32,32,45,32,67,111,112,121,32,80,114,111,103
0084127B  436F 7079 
0084127F  2050 726F 
00841283  67        
00841284  7261 6D20 11413          dc.b      114,97,109,32,102,114,111,109,32,70,108,97,115
00841288  6672 6F6D 
0084128C  2046 6C61 
00841290  73        
00841291  6820 746F 11414          dc.b      104,32,116,111,32,77,97,105,110,32,77,101,109
00841295  204D 6169 
00841299  6E20 4D65 
0084129D  6D        
0084129E  6F72 7900 11415          dc.b      111,114,121,0
                    11416   @m68kde~1_126:
008412A2  0D0A 2020 11417          dc.b      13,10,32,32,68,73,32,32,32,32,32,32,32,32,32
008412A6  4449 2020 
008412AA  2020 2020 
008412AE  2020 20   
008412B1  2020 2D20 11418          dc.b      32,32,45,32,68,105,115,97,115,115,101,109,98
008412B5  4469 7361 
008412B9  7373 656D 
008412BD  62        
008412BE  6C65 2050 11419          dc.b      108,101,32,80,114,111,103,114,97,109,0
008412C2  726F 6772 
008412C6  616D 00   
                    11420   @m68kde~1_127:
008412CA  0D0A 2020 11421          dc.b      13,10,32,32,68,85,32,32,32,32,32,32,32,32,32
008412CE  4455 2020 
008412D2  2020 2020 
008412D6  2020 20   
008412D9  2020 2D20 11422          dc.b      32,32,45,32,68,117,109,112,32,77,101,109,111
008412DD  4475 6D70 
008412E1  204D 656D 
008412E5  6F        
008412E6  7279 2043 11423          dc.b      114,121,32,67,111,110,116,101,110,116,115,32
008412EA  6F6E 7465 
008412EE  6E74 7320 
008412F2  746F 2053 11424          dc.b      116,111,32,83,99,114,101,101,110,0
008412F6  6372 6565 
008412FA  6E00      
                    11425   @m68kde~1_128:
008412FC  0D0A 2020 11426          dc.b      13,10,32,32,69,32,32,32,32,32,32,32,32,32,32
00841300  4520 2020 
00841304  2020 2020 
00841308  2020 20   
0084130B  2020 2D20 11427          dc.b      32,32,45,32,69,110,116,101,114,32,83,116,114
0084130F  456E 7465 
00841313  7220 5374 
00841317  72        
00841318  696E 6720 11428          dc.b      105,110,103,32,105,110,116,111,32,77,101,109
0084131C  696E 746F 
00841320  204D 656D 
00841324  6F72 7900 11429          dc.b      111,114,121,0
                    11430   @m68kde~1_129:
00841328  0D0A 2020 11431          dc.b      13,10,32,32,70,32,32,32,32,32,32,32,32,32,32
0084132C  4620 2020 
00841330  2020 2020 
00841334  2020 20   
00841337  2020 2D20 11432          dc.b      32,32,45,32,70,105,108,108,32,77,101,109,111
0084133B  4669 6C6C 
0084133F  204D 656D 
00841343  6F        
00841344  7279 2077 11433          dc.b      114,121,32,119,105,116,104,32,68,97,116,97,0
00841348  6974 6820 
0084134C  4461 7461 
00841350  00        
                    11434   @m68kde~1_130:
00841352  0D0A 2020 11435          dc.b      13,10,32,32,71,32,32,32,32,32,32,32,32,32,32
00841356  4720 2020 
0084135A  2020 2020 
0084135E  2020 20   
00841361  2020 2D20 11436          dc.b      32,32,45,32,71,111,32,80,114,111,103,114,97
00841365  476F 2050 
00841369  726F 6772 
0084136D  61        
0084136E  6D20 5374 11437          dc.b      109,32,83,116,97,114,116,105,110,103,32,97,116
00841372  6172 7469 
00841376  6E67 2061 
0084137A  74        
0084137B  2041 6464 11438          dc.b      32,65,100,100,114,101,115,115,58,32,36,37,48
0084137F  7265 7373 
00841383  3A20 2425 
00841387  30        
00841388  3858 00   11439          dc.b      56,88,0
                    11440   @m68kde~1_131:
0084138C  0D0A 2020 11441          dc.b      13,10,32,32,76,32,32,32,32,32,32,32,32,32,32
00841390  4C20 2020 
00841394  2020 2020 
00841398  2020 20   
0084139B  2020 2D20 11442          dc.b      32,32,45,32,76,111,97,100,32,80,114,111,103
0084139F  4C6F 6164 
008413A3  2050 726F 
008413A7  67        
008413A8  7261 6D20 11443          dc.b      114,97,109,32,40,46,72,69,88,32,102,105,108
008413AC  282E 4845 
008413B0  5820 6669 
008413B4  6C        
008413B5  6529 2066 11444          dc.b      101,41,32,102,114,111,109,32,76,97,112,116,111
008413B9  726F 6D20 
008413BD  4C61 7074 
008413C1  6F        
008413C2  7000      11445          dc.b      112,0
                    11446   @m68kde~1_132:
008413C4  0D0A 2020 11447          dc.b      13,10,32,32,77,32,32,32,32,32,32,32,32,32,32
008413C8  4D20 2020 
008413CC  2020 2020 
008413D0  2020 20   
008413D3  2020 2D20 11448          dc.b      32,32,45,32,77,101,109,111,114,121,32,69,120
008413D7  4D65 6D6F 
008413DB  7279 2045 
008413DF  78        
008413E0  616D 696E 11449          dc.b      97,109,105,110,101,32,97,110,100,32,67,104,97
008413E4  6520 616E 
008413E8  6420 4368 
008413EC  61        
008413ED  6E67 6500 11450          dc.b      110,103,101,0
                    11451   @m68kde~1_133:
008413F2  0D0A 2020 11452          dc.b      13,10,32,32,80,32,32,32,32,32,32,32,32,32,32
008413F6  5020 2020 
008413FA  2020 2020 
008413FE  2020 20   
00841401  2020 2D20 11453          dc.b      32,32,45,32,80,114,111,103,114,97,109,32,70
00841405  5072 6F67 
00841409  7261 6D20 
0084140D  46        
0084140E  6C61 7368 11454          dc.b      108,97,115,104,32,77,101,109,111,114,121,32
00841412  204D 656D 
00841416  6F72 7920 
0084141A  7769 7468 11455          dc.b      119,105,116,104,32,85,115,101,114,32,80,114
0084141E  2055 7365 
00841422  7220 5072 
00841426  6F67 7261 11456          dc.b      111,103,114,97,109,0
0084142A  6D00      
                    11457   @m68kde~1_134:
0084142C  0D0A 2020 11458          dc.b      13,10,32,32,82,32,32,32,32,32,32,32,32,32,32
00841430  5220 2020 
00841434  2020 2020 
00841438  2020 20   
0084143B  2020 2D20 11459          dc.b      32,32,45,32,68,105,115,112,108,97,121,32,54
0084143F  4469 7370 
00841443  6C61 7920 
00841447  36        
00841448  3830 3030 11460          dc.b      56,48,48,48,32,82,101,103,105,115,116,101,114
0084144C  2052 6567 
00841450  6973 7465 
00841454  72        
00841455  7300      11461          dc.b      115,0
                    11462   @m68kde~1_135:
00841458  0D0A 2020 11463          dc.b      13,10,32,32,83,32,32,32,32,32,32,32,32,32,32
0084145C  5320 2020 
00841460  2020 2020 
00841464  2020 20   
00841467  2020 2D20 11464          dc.b      32,32,45,32,84,111,103,103,108,101,32,79,78
0084146B  546F 6767 
0084146F  6C65 204F 
00841473  4E        
00841474  2F4F 4646 11465          dc.b      47,79,70,70,32,83,105,110,103,108,101,32,83
00841478  2053 696E 
0084147C  676C 6520 
00841480  53        
00841481  7465 7020 11466          dc.b      116,101,112,32,77,111,100,101,0
00841485  4D6F 6465 
00841489  00        
                    11467   @m68kde~1_136:
0084148A  0D0A 2020 11468          dc.b      13,10,32,32,84,77,32,32,32,32,32,32,32,32,32
0084148E  544D 2020 
00841492  2020 2020 
00841496  2020 20   
00841499  2020 2D20 11469          dc.b      32,32,45,32,84,101,115,116,32,77,101,109,111
0084149D  5465 7374 
008414A1  204D 656D 
008414A5  6F        
008414A6  7279 00   11470          dc.b      114,121,0
                    11471   @m68kde~1_137:
008414AA  0D0A 2020 11472          dc.b      13,10,32,32,84,83,32,32,32,32,32,32,32,32,32
008414AE  5453 2020 
008414B2  2020 2020 
008414B6  2020 20   
008414B9  2020 2D20 11473          dc.b      32,32,45,32,84,101,115,116,32,68,69,50,32,83
008414BD  5465 7374 
008414C1  2044 4532 
008414C5  2053      
008414C7  7769 7463 11474          dc.b      119,105,116,99,104,101,115,58,32,83,87,48,45
008414CB  6865 733A 
008414CF  2053 5730 
008414D3  2D        
008414D4  5357 3135 11475          dc.b      83,87,49,53,0
008414D8  00        
                    11476   @m68kde~1_138:
008414DA  0D0A 2020 11477          dc.b      13,10,32,32,84,68,32,32,32,32,32,32,32,32,32
008414DE  5444 2020 
008414E2  2020 2020 
008414E6  2020 20   
008414E9  2020 2D20 11478          dc.b      32,32,45,32,84,101,115,116,32,68,69,50,32,68
008414ED  5465 7374 
008414F1  2044 4532 
008414F5  2044      
008414F7  6973 706C 11479          dc.b      105,115,112,108,97,121,115,58,32,76,69,68,115
008414FB  6179 733A 
008414FF  204C 4544 
00841503  73        
00841504  2061 6E64 11480          dc.b      32,97,110,100,32,55,45,83,101,103,109,101,110
00841508  2037 2D53 
0084150C  6567 6D65 
00841510  6E        
00841511  7400      11481          dc.b      116,0
                    11482   @m68kde~1_139:
00841514  0D0A 2020 11483          dc.b      13,10,32,32,87,68,47,87,83,47,87,67,47,87,75
00841518  5744 2F57 
0084151C  532F 5743 
00841520  2F57 4B   
00841523  2020 2D20 11484          dc.b      32,32,45,32,87,97,116,99,104,32,80,111,105,110
00841527  5761 7463 
0084152B  6820 506F 
0084152F  696E      
00841531  743A 2044 11485          dc.b      116,58,32,68,105,115,112,108,97,121,47,83,101
00841535  6973 706C 
00841539  6179 2F53 
0084153D  65        
0084153E  742F 436C 11486          dc.b      116,47,67,108,101,97,114,47,75,105,108,108,0
00841542  6561 722F 
00841546  4B69 6C6C 
0084154A  00        
                    11487   @m68kde~1_140:
0084154C  0D0A 2300 11488          dc.b      13,10,35,0
                    11489   @m68kde~1_141:
00841550  0D0A 5072 11490          dc.b      13,10,80,114,111,103,114,97,109,32,82,117,110
00841554  6F67 7261 
00841558  6D20 5275 
0084155C  6E        
0084155D  6E69 6E67 11491          dc.b      110,105,110,103,46,46,46,46,46,0
00841561  2E2E 2E2E 
00841565  2E00      
                    11492   @m68kde~1_142:
00841568  0D0A 5072 11493          dc.b      13,10,80,114,101,115,115,32,60,82,69,83,69,84
0084156C  6573 7320 
00841570  3C52 4553 
00841574  4554      
00841576  3E20 6275 11494          dc.b      62,32,98,117,116,116,111,110,32,60,75,101,121
0084157A  7474 6F6E 
0084157E  203C 4B65 
00841582  79        
00841583  303E 206F 11495          dc.b      48,62,32,111,110,32,68,69,50,32,116,111,32,115
00841587  6E20 4445 
0084158B  3220 746F 
0084158F  2073      
00841591  746F 7000 11496          dc.b      116,111,112,0
                    11497   @m68kde~1_143:
00841596  0D0A 4572 11498          dc.b      13,10,69,114,114,111,114,58,32,80,114,101,115
0084159A  726F 723A 
0084159E  2050 7265 
008415A2  73        
008415A3  7320 2747 11499          dc.b      115,32,39,71,39,32,102,105,114,115,116,32,116
008415A7  2720 6669 
008415AB  7273 7420 
008415AF  74        
008415B0  6F20 7374 11500          dc.b      111,32,115,116,97,114,116,32,112,114,111,103
008415B4  6172 7420 
008415B8  7072 6F67 
008415BC  7261 6D00 11501          dc.b      114,97,109,0
                    11502   @m68kde~1_144:
008415C0  0D0A 5369 11503          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
008415C4  6E67 6C65 
008415C8  2053 7465 
008415CC  70        
008415CD  2020 3A5B 11504          dc.b      32,32,58,91,79,78,93,0
008415D1  4F4E 5D00 
                    11505   @m68kde~1_145:
008415D6  0D0A 4272 11506          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
008415DA  6561 6B20 
008415DE  506F 696E 
008415E2  74        
008415E3  7320 3A5B 11507          dc.b      115,32,58,91,68,105,115,97,98,108,101,100,93
008415E7  4469 7361 
008415EB  626C 6564 
008415EF  5D        
008415F0  00        11508          dc.b      0
                    11509   @m68kde~1_146:
008415F2  0D0A 5072 11510          dc.b      13,10,80,114,101,115,115,32,39,71,39,32,116
008415F6  6573 7320 
008415FA  2747 2720 
008415FE  74        
008415FF  6F20 5472 11511          dc.b      111,32,84,114,97,99,101,32,80,114,111,103,114
00841603  6163 6520 
00841607  5072 6F67 
0084160B  72        
0084160C  616D 2066 11512          dc.b      97,109,32,102,114,111,109,32,97,100,100,114
00841610  726F 6D20 
00841614  6164 6472 
00841618  6573 7320 11513          dc.b      101,115,115,32,36,37,88,46,46,46,46,46,0
0084161C  2425 582E 
00841620  2E2E 2E2E 
00841624  00        
                    11514   @m68kde~1_147:
00841626  0D0A 5075 11515          dc.b      13,10,80,117,115,104,32,60,82,69,83,69,84,32
0084162A  7368 203C 
0084162E  5245 5345 
00841632  5420      
00841634  4275 7474 11516          dc.b      66,117,116,116,111,110,62,32,116,111,32,83,116
00841638  6F6E 3E20 
0084163C  746F 2053 
00841640  74        
00841641  6F70 2E2E 11517          dc.b      111,112,46,46,46,46,46,0
00841645  2E2E 2E00 
                    11518   @m68kde~1_148:
0084164A  0D0A 5369 11519          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
0084164E  6E67 6C65 
00841652  2053 7465 
00841656  70        
00841657  203A 205B 11520          dc.b      32,58,32,91,79,70,70,93,0
0084165B  4F46 465D 
0084165F  00        
                    11521   @m68kde~1_149:
00841660  0D0A 4272 11522          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00841664  6561 6B20 
00841668  506F 696E 
0084166C  74        
0084166D  7320 3A5B 11523          dc.b      115,32,58,91,69,110,97,98,108,101,100,93,0
00841671  456E 6162 
00841675  6C65 645D 
00841679  00        
                    11524   @m68kde~1_150:
0084167A  0D0A 5072 11525          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
0084167E  6573 7320 
00841682  3C45 5343 
00841686  3E20      
00841688  746F 2052 11526          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
0084168C  6573 756D 
00841690  6520 5573 
00841694  6572 2050 11527          dc.b      101,114,32,80,114,111,103,114,97,109,46,46,46
00841698  726F 6772 
0084169C  616D 2E2E 
008416A0  2E        
008416A1  2E2E 00   11528          dc.b      46,46,0
                    11529   @m68kde~1_151:
008416A4  0D0A 5369 11530          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
008416A8  6E67 6C65 
008416AC  2053 7465 
008416B0  70        
008416B1  2020 3A5B 11531          dc.b      32,32,58,91,79,70,70,93,0
008416B5  4F46 465D 
008416B9  00        
                    11532   @m68kde~1_152:
008416BA  0D0A 4272 11533          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
008416BE  6561 6B20 
008416C2  506F 696E 
008416C6  74        
008416C7  7320 3A5B 11534          dc.b      115,32,58,91,69,110,97,98,108,101,100,93,0
008416CB  456E 6162 
008416CF  6C65 645D 
008416D3  00        
                    11535   @m68kde~1_153:
008416D4  0D0A 5072 11536          dc.b      13,10,80,114,111,103,114,97,109,32,82,117,110
008416D8  6F67 7261 
008416DC  6D20 5275 
008416E0  6E        
008416E1  6E69 6E67 11537          dc.b      110,105,110,103,46,46,46,46,46,0
008416E5  2E2E 2E2E 
008416E9  2E00      
                    11538   @m68kde~1_154:
008416EC  0D0A 5072 11539          dc.b      13,10,80,114,101,115,115,32,60,82,69,83,69,84
008416F0  6573 7320 
008416F4  3C52 4553 
008416F8  4554      
008416FA  3E20 6275 11540          dc.b      62,32,98,117,116,116,111,110,32,60,75,101,121
008416FE  7474 6F6E 
00841702  203C 4B65 
00841706  79        
00841707  303E 206F 11541          dc.b      48,62,32,111,110,32,68,69,50,32,116,111,32,115
0084170B  6E20 4445 
0084170F  3220 746F 
00841713  2073      
00841715  746F 7000 11542          dc.b      116,111,112,0
                    11543   @m68kde~1_155:
0084171A  0D0A 0D0A 11544          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
0084171E  5072 6F67 
00841722  7261 6D20 
00841726  41        
00841727  424F 5254 11545          dc.b      66,79,82,84,32,33,33,33,33,33,33,13,10,0
0084172B  2021 2121 
0084172F  2121 210D 
00841733  0A00      
                    11546   @m68kde~1_156:
00841736  2573 0D0A 11547          dc.b      37,115,13,10,0
0084173A  00        
                    11548   @m68kde~1_157:
0084173C  0D0A 0D0A 11549          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
00841740  5072 6F67 
00841744  7261 6D20 
00841748  41        
00841749  424F 5254 11550          dc.b      66,79,82,84,32,33,33,33,33,33,0
0084174D  2021 2121 
00841751  2121 00   
                    11551   @m68kde~1_158:
00841754  0D0A 556E 11552          dc.b      13,10,85,110,104,97,110,100,108,101,100,32,73
00841758  6861 6E64 
0084175C  6C65 6420 
00841760  49        
00841761  6E74 6572 11553          dc.b      110,116,101,114,114,117,112,116,58,32,73,82
00841765  7275 7074 
00841769  3A20 4952 
0084176D  5125 6420 11554          dc.b      81,37,100,32,33,33,33,33,33,0
00841771  2121 2121 
00841775  2100      
                    11555   @m68kde~1_159:
00841778  4144 4452 11556          dc.b      65,68,68,82,69,83,83,32,69,82,82,79,82,58,32
0084177C  4553 5320 
00841780  4552 524F 
00841784  523A 20   
00841787  3136 206F 11557          dc.b      49,54,32,111,114,32,51,50,32,66,105,116,32,84
0084178B  7220 3332 
0084178F  2042 6974 
00841793  2054      
00841795  7261 6E73 11558          dc.b      114,97,110,115,102,101,114,32,116,111,47,102
00841799  6665 7220 
0084179D  746F 2F66 
008417A1  726F 6D20 11559          dc.b      114,111,109,32,97,110,32,79,68,68,32,65,100
008417A5  616E 204F 
008417A9  4444 2041 
008417AD  64        
008417AE  6472 6573 11560          dc.b      100,114,101,115,115,46,46,46,46,0
008417B2  732E 2E2E 
008417B6  2E00      
                    11561   @m68kde~1_160:
008417B8  556E 6861 11562          dc.b      85,110,104,97,110,100,108,101,100,32,84,114
008417BC  6E64 6C65 
008417C0  6420 5472 
008417C4  6170 2021 11563          dc.b      97,112,32,33,33,33,33,33,0
008417C8  2121 2121 
008417CC  00        
                    11564   @m68kde~1_161:
008417CE  4255 5320 11565          dc.b      66,85,83,32,69,114,114,111,114,33,0
008417D2  4572 726F 
008417D6  7221 00   
                    11566   @m68kde~1_162:
008417DA  4144 4452 11567          dc.b      65,68,68,82,69,83,83,32,69,114,114,111,114,33
008417DE  4553 5320 
008417E2  4572 726F 
008417E6  7221      
008417E8  00        11568          dc.b      0
                    11569   @m68kde~1_163:
008417EA  494C 4C45 11570          dc.b      73,76,76,69,71,65,76,32,73,78,83,84,82,85,67
008417EE  4741 4C20 
008417F2  494E 5354 
008417F6  5255 43   
008417F9  5449 4F4E 11571          dc.b      84,73,79,78,0
008417FD  00        
                    11572   @m68kde~1_164:
008417FE  4449 5649 11573          dc.b      68,73,86,73,68,69,32,66,89,32,90,69,82,79,0
00841802  4445 2042 
00841806  5920 5A45 
0084180A  524F 00   
                    11574   @m68kde~1_165:
0084180E  2743 484B 11575          dc.b      39,67,72,75,39,32,73,78,83,84,82,85,67,84,73
00841812  2720 494E 
00841816  5354 5255 
0084181A  4354 49   
0084181D  4F4E 00   11576          dc.b      79,78,0
                    11577   @m68kde~1_166:
00841820  5452 4150 11578          dc.b      84,82,65,80,86,32,73,78,83,84,82,85,67,84,73
00841824  5620 494E 
00841828  5354 5255 
0084182C  4354 49   
0084182F  4F4E 00   11579          dc.b      79,78,0
                    11580   @m68kde~1_167:
00841832  5052 4956 11581          dc.b      80,82,73,86,73,76,69,71,69,32,86,73,79,76,65
00841836  494C 4547 
0084183A  4520 5649 
0084183E  4F4C 41   
00841841  5449 4F4E 11582          dc.b      84,73,79,78,0
00841845  00        
                    11583   @m68kde~1_168:
00841846  554E 494E 11584          dc.b      85,78,73,78,73,84,73,65,76,73,83,69,68,32,73
0084184A  4954 4941 
0084184E  4C49 5345 
00841852  4420 49   
00841855  5251 00   11585          dc.b      82,81,0
                    11586   @m68kde~1_169:
00841858  5350 5552 11587          dc.b      83,80,85,82,73,79,85,83,32,73,82,81,0
0084185C  494F 5553 
00841860  2049 5251 
00841864  00        
                    11588   @m68kde~1_170:
00841866  0D0A 5374 11589          dc.b      13,10,83,116,97,114,116,32,65,100,100,114,101
0084186A  6172 7420 
0084186E  4164 6472 
00841872  65        
00841873  7373 2069 11590          dc.b      115,115,32,105,110,32,77,101,109,111,114,121
00841877  6E20 4D65 
0084187B  6D6F 7279 
0084187F  3A20 00   11591          dc.b      58,32,0
                    11592   @m68kde~1_171:
00841882  0D0A 456E 11593          dc.b      13,10,69,110,116,101,114,32,83,116,114,105,110
00841886  7465 7220 
0084188A  5374 7269 
0084188E  6E        
0084188F  6720 2845 11594          dc.b      103,32,40,69,83,67,32,116,111,32,101,110,100
00841893  5343 2074 
00841897  6F20 656E 
0084189B  64        
0084189C  2920 3A00 11595          dc.b      41,32,58,0
                    11596   @m68kde~1_172:
008418A0  0D0A 5374 11597          dc.b      13,10,83,116,97,114,116,32,65,100,100,114,101
008418A4  6172 7420 
008418A8  4164 6472 
008418AC  65        
008418AD  7373 3A20 11598          dc.b      115,115,58,32,0
008418B1  00        
                    11599   @m68kde~1_173:
008418B2  0D0A 456E 11600          dc.b      13,10,69,110,100,32,65,100,100,114,101,115,115
008418B6  6420 4164 
008418BA  6472 6573 
008418BE  73        
008418BF  3A20 00   11601          dc.b      58,32,0
                    11602   @m68kde~1_174:
008418C2  3638 6B20 11603          dc.b      54,56,107,32,66,117,103,32,86,49,46,55,52,0
008418C6  4275 6720 
008418CA  5631 2E37 
008418CE  3400      
                    11604   @m68kde~1_175:
008418D0  436F 7079 11605          dc.b      67,111,112,121,114,105,103,104,116,32,40,67
008418D4  7269 6768 
008418D8  7420 2843 
008418DC  2920 504A 11606          dc.b      41,32,80,74,32,68,97,118,105,101,115,32,50,48
008418E0  2044 6176 
008418E4  6965 7320 
008418E8  3230      
008418EA  3132 00   11607          dc.b      49,50,0
                    11608   @m68kde~1_176:
008418EE  0D0A 5275 11609          dc.b      13,10,82,117,110,110,105,110,103,46,46,46,46
008418F2  6E6E 696E 
008418F6  672E 2E2E 
008418FA  2E        
008418FB  2E00      11610          dc.b      46,0
                    11611   @m68kde~1_177:
008418FE  5275 6E6E 11612          dc.b      82,117,110,110,105,110,103,46,46,46,46,46,0
00841902  696E 672E 
00841906  2E2E 2E2E 
0084190A  00        
                    11613   @m68kde~1_178:
0084190C  4279 3A20 11614          dc.b      66,121,58,32,80,74,32,68,97,118,105,101,115
00841910  504A 2044 
00841914  6176 6965 
00841918  73        
00841919  00        11615          dc.b      0
                    11616   @m68kde~1_179:
0084191A  0D0A 2573 11617          dc.b      13,10,37,115,0
0084191E  00        
                    11618   @m68kde~1_180:
00841920  0D0A 2573 11619          dc.b      13,10,37,115,0
00841924  00        
                    11620   @m68kde~1_181:
00841926  2E42 2000 11621          dc.b      46,66,32,0
                    11622   @m68kde~1_182:
0084192A  2E57 2000 11623          dc.b      46,87,32,0
                    11624   @m68kde~1_183:
0084192E  2E4C 2000 11625          dc.b      46,76,32,0
                    11626   @m68kde~1_184:
00841932  2324 2558 11627          dc.b      35,36,37,88,0
00841936  00        
                    11628   @m68kde~1_185:
00841938  2324 2558 11629          dc.b      35,36,37,88,0
0084193C  00        
                    11630   @m68kde~1_186:
0084193E  2324 2558 11631          dc.b      35,36,37,88,0
00841942  00        
                    11632   @m68kde~1_187:
00841944  2324 2558 11633          dc.b      35,36,37,88,0
00841948  00        
                    11634   @m68kde~1_188:
0084194A  2324 2558 11635          dc.b      35,36,37,88,0
0084194E  00        
                    11636   @m68kde~1_189:
00841950  2324 2558 11637          dc.b      35,36,37,88,0
00841954  00        
                    11638   @m68kde~1_190:
00841956  2324 2558 11639          dc.b      35,36,37,88,0
0084195A  00        
                    11640   @m68kde~1_191:
0084195C  2800      11641          dc.b      40,0
                    11642   @m68kde~1_192:
0084195E  2900      11643          dc.b      41,0
                    11644   @m68kde~1_193:
00841960  2800      11645          dc.b      40,0
                    11646   @m68kde~1_194:
00841962  292B 00   11647          dc.b      41,43,0
                    11648   @m68kde~1_195:
00841966  2D28 00   11649          dc.b      45,40,0
                    11650   @m68kde~1_196:
0084196A  2900      11651          dc.b      41,0
                    11652   @m68kde~1_197:
0084196C  2564 2841 11653          dc.b      37,100,40,65,37,100,41,0
00841970  2564 2900 
                    11654   @m68kde~1_198:
00841974  2564 2841 11655          dc.b      37,100,40,65,37,100,44,0
00841978  2564 2C00 
                    11656   @m68kde~1_199:
0084197C  4400      11657          dc.b      68,0
                    11658   @m68kde~1_200:
0084197E  4100      11659          dc.b      65,0
                    11660   @m68kde~1_201:
00841980  2564 00   11661          dc.b      37,100,0
                    11662   @m68kde~1_202:
00841984  2E57 2900 11663          dc.b      46,87,41,0
                    11664   @m68kde~1_203:
00841988  2E4C 2900 11665          dc.b      46,76,41,0
                    11666   @m68kde~1_204:
0084198C  2425 5800 11667          dc.b      36,37,88,0
                    11668   @m68kde~1_205:
00841990  2425 5800 11669          dc.b      36,37,88,0
                    11670   @m68kde~1_206:
00841994  2564 2850 11671          dc.b      37,100,40,80,67,41,0
00841998  4329 00   
                    11672   @m68kde~1_207:
0084199C  2564 2850 11673          dc.b      37,100,40,80,67,44,0
008419A0  432C 00   
                    11674   @m68kde~1_208:
008419A4  4400      11675          dc.b      68,0
                    11676   @m68kde~1_209:
008419A6  4100      11677          dc.b      65,0
                    11678   @m68kde~1_210:
008419A8  2564 00   11679          dc.b      37,100,0
                    11680   @m68kde~1_211:
008419AC  2E57 2900 11681          dc.b      46,87,41,0
                    11682   @m68kde~1_212:
008419B0  2E4C 2900 11683          dc.b      46,76,41,0
                    11684   @m68kde~1_213:
008419B4  2C00      11685          dc.b      44,0
                    11686   @m68kde~1_214:
008419B6  2C00      11687          dc.b      44,0
                    11688   @m68kde~1_215:
008419B8  4343 00   11689          dc.b      67,67,0
                    11690   @m68kde~1_216:
008419BC  4353 00   11691          dc.b      67,83,0
                    11692   @m68kde~1_217:
008419C0  4551 00   11693          dc.b      69,81,0
                    11694   @m68kde~1_218:
008419C4  4745 00   11695          dc.b      71,69,0
                    11696   @m68kde~1_219:
008419C8  4754 00   11697          dc.b      71,84,0
                    11698   @m68kde~1_220:
008419CC  4849 00   11699          dc.b      72,73,0
                    11700   @m68kde~1_221:
008419D0  4C45 00   11701          dc.b      76,69,0
                    11702   @m68kde~1_222:
008419D4  4C53 00   11703          dc.b      76,83,0
                    11704   @m68kde~1_223:
008419D8  4C54 00   11705          dc.b      76,84,0
                    11706   @m68kde~1_224:
008419DC  4D49 00   11707          dc.b      77,73,0
                    11708   @m68kde~1_225:
008419E0  4E45 00   11709          dc.b      78,69,0
                    11710   @m68kde~1_226:
008419E4  504C 00   11711          dc.b      80,76,0
                    11712   @m68kde~1_227:
008419E8  5653 00   11713          dc.b      86,83,0
                    11714   @m68kde~1_228:
008419EC  5643 00   11715          dc.b      86,67,0
                    11716   @m68kde~1_229:
008419F0  5241 00   11717          dc.b      82,65,0
                    11718   @m68kde~1_230:
008419F4  5352 00   11719          dc.b      83,82,0
                    11720   @m68kde~1_231:
008419F8  2000      11721          dc.b      32,0
                    11722   @m68kde~1_232:
008419FA  556E 6B6E 11723          dc.b      85,110,107,110,111,119,110,0
008419FE  6F77 6E00 
                    11724   @m68kde~1_233:
00841A02  4142 4344 11725          dc.b      65,66,67,68,32,68,37,100,44,68,37,100,0
00841A06  2044 2564 
00841A0A  2C44 2564 
00841A0E  00        
                    11726   @m68kde~1_234:
00841A10  4142 4344 11727          dc.b      65,66,67,68,32,45,40,65,37,100,41,44,45,40,65
00841A14  202D 2841 
00841A18  2564 292C 
00841A1C  2D28 41   
00841A1F  2564 2900 11728          dc.b      37,100,41,0
                    11729   @m68kde~1_235:
00841A24  4144 4441 11730          dc.b      65,68,68,65,46,87,32,0
00841A28  2E57 2000 
                    11731   @m68kde~1_236:
00841A2C  4144 4441 11732          dc.b      65,68,68,65,46,76,32,0
00841A30  2E4C 2000 
                    11733   @m68kde~1_237:
00841A34  2C41 2558 11734          dc.b      44,65,37,88,0
00841A38  00        
                    11735   @m68kde~1_238:
00841A3A  4144 4400 11736          dc.b      65,68,68,0
                    11737   @m68kde~1_239:
00841A3E  4144 4449 11738          dc.b      65,68,68,73,0
00841A42  00        
                    11739   @m68kde~1_240:
00841A44  414E 4449 11740          dc.b      65,78,68,73,0
00841A48  00        
                    11741   @m68kde~1_241:
00841A4A  434D 5049 11742          dc.b      67,77,80,73,0
00841A4E  00        
                    11743   @m68kde~1_242:
00841A50  454F 5249 11744          dc.b      69,79,82,73,0
00841A54  00        
                    11745   @m68kde~1_243:
00841A56  4F52 4900 11746          dc.b      79,82,73,0
                    11747   @m68kde~1_244:
00841A5A  5355 4249 11748          dc.b      83,85,66,73,0
00841A5E  00        
                    11749   @m68kde~1_245:
00841A60  2C00      11750          dc.b      44,0
                    11751   @m68kde~1_246:
00841A62  414E 4449 11752          dc.b      65,78,68,73,32,35,36,37,88,44,83,82,0
00841A66  2023 2425 
00841A6A  582C 5352 
00841A6E  00        
                    11753   @m68kde~1_247:
00841A70  4144 4451 11754          dc.b      65,68,68,81,0
00841A74  00        
                    11755   @m68kde~1_248:
00841A76  2325 3158 11756          dc.b      35,37,49,88,44,0
00841A7A  2C00      
                    11757   @m68kde~1_249:
00841A7C  4144 4458 11758          dc.b      65,68,68,88,0
00841A80  00        
                    11759   @m68kde~1_250:
00841A82  4425 582C 11760          dc.b      68,37,88,44,68,37,88,0
00841A86  4425 5800 
                    11761   @m68kde~1_251:
00841A8A  2D28 4125 11762          dc.b      45,40,65,37,88,41,44,45,40,65,37,88,41,0
00841A8E  5829 2C2D 
00841A92  2841 2558 
00841A96  2900      
                    11763   @m68kde~1_252:
00841A98  414E 4400 11764          dc.b      65,78,68,0
                    11765   @m68kde~1_253:
00841A9C  414E 4449 11766          dc.b      65,78,68,73,32,35,36,37,50,88,44,67,67,82,0
00841AA0  2023 2425 
00841AA4  3258 2C43 
00841AA8  4352 00   
                    11767   @m68kde~1_254:
00841AAC  4153 4C00 11768          dc.b      65,83,76,0
                    11769   @m68kde~1_255:
00841AB0  4153 5200 11770          dc.b      65,83,82,0
                    11771   @m68kde~1_256:
00841AB4  4C53 4C00 11772          dc.b      76,83,76,0
                    11773   @m68kde~1_257:
00841AB8  4C53 5200 11774          dc.b      76,83,82,0
                    11775   @m68kde~1_258:
00841ABC  524F 4C00 11776          dc.b      82,79,76,0
                    11777   @m68kde~1_259:
00841AC0  524F 5200 11778          dc.b      82,79,82,0
                    11779   @m68kde~1_260:
00841AC4  524F 584C 11780          dc.b      82,79,88,76,0
00841AC8  00        
                    11781   @m68kde~1_261:
00841ACA  524F 5852 11782          dc.b      82,79,88,82,0
00841ACE  00        
                    11783   @m68kde~1_262:
00841AD0  2020 00   11784          dc.b      32,32,0
                    11785   @m68kde~1_263:
00841AD4  4153 4C00 11786          dc.b      65,83,76,0
                    11787   @m68kde~1_264:
00841AD8  4153 5200 11788          dc.b      65,83,82,0
                    11789   @m68kde~1_265:
00841ADC  4C53 4C00 11790          dc.b      76,83,76,0
                    11791   @m68kde~1_266:
00841AE0  4C53 5200 11792          dc.b      76,83,82,0
                    11793   @m68kde~1_267:
00841AE4  524F 4C00 11794          dc.b      82,79,76,0
                    11795   @m68kde~1_268:
00841AE8  524F 5200 11796          dc.b      82,79,82,0
                    11797   @m68kde~1_269:
00841AEC  524F 584C 11798          dc.b      82,79,88,76,0
00841AF0  00        
                    11799   @m68kde~1_270:
00841AF2  524F 5852 11800          dc.b      82,79,88,82,0
00841AF6  00        
                    11801   @m68kde~1_271:
00841AF8  2324 2558 11802          dc.b      35,36,37,88,44,68,37,88,0
00841AFC  2C44 2558 
00841B00  00        
                    11803   @m68kde~1_272:
00841B02  4425 582C 11804          dc.b      68,37,88,44,68,37,88,0
00841B06  4425 5800 
                    11805   @m68kde~1_273:
00841B0A  4200      11806          dc.b      66,0
                    11807   @m68kde~1_274:
00841B0C  2425 5800 11808          dc.b      36,37,88,0
                    11809   @m68kde~1_275:
00841B10  2425 5800 11810          dc.b      36,37,88,0
                    11811   @m68kde~1_276:
00841B14  4243 4847 11812          dc.b      66,67,72,71,32,0
00841B18  2000      
                    11813   @m68kde~1_277:
00841B1A  4425 642C 11814          dc.b      68,37,100,44,0
00841B1E  00        
                    11815   @m68kde~1_278:
00841B20  4243 4847 11816          dc.b      66,67,72,71,32,0
00841B24  2000      
                    11817   @m68kde~1_279:
00841B26  2324 2558 11818          dc.b      35,36,37,88,44,0
00841B2A  2C00      
                    11819   @m68kde~1_280:
00841B2C  4243 4C52 11820          dc.b      66,67,76,82,32,0
00841B30  2000      
                    11821   @m68kde~1_281:
00841B32  4425 642C 11822          dc.b      68,37,100,44,0
00841B36  00        
                    11823   @m68kde~1_282:
00841B38  4243 4C52 11824          dc.b      66,67,76,82,32,0
00841B3C  2000      
                    11825   @m68kde~1_283:
00841B3E  2324 2558 11826          dc.b      35,36,37,88,44,0
00841B42  2C00      
                    11827   @m68kde~1_284:
00841B44  4253 4554 11828          dc.b      66,83,69,84,32,0
00841B48  2000      
                    11829   @m68kde~1_285:
00841B4A  4425 642C 11830          dc.b      68,37,100,44,0
00841B4E  00        
                    11831   @m68kde~1_286:
00841B50  4253 4554 11832          dc.b      66,83,69,84,32,0
00841B54  2000      
                    11833   @m68kde~1_287:
00841B56  2324 2558 11834          dc.b      35,36,37,88,44,0
00841B5A  2C00      
                    11835   @m68kde~1_288:
00841B5C  4254 5354 11836          dc.b      66,84,83,84,32,0
00841B60  2000      
                    11837   @m68kde~1_289:
00841B62  4425 642C 11838          dc.b      68,37,100,44,0
00841B66  00        
                    11839   @m68kde~1_290:
00841B68  4254 5354 11840          dc.b      66,84,83,84,32,0
00841B6C  2000      
                    11841   @m68kde~1_291:
00841B6E  2324 2558 11842          dc.b      35,36,37,88,44,0
00841B72  2C00      
                    11843   @m68kde~1_292:
00841B74  4348 4B20 11844          dc.b      67,72,75,32,0
00841B78  00        
                    11845   @m68kde~1_293:
00841B7A  2C44 2564 11846          dc.b      44,68,37,100,0
00841B7E  00        
                    11847   @m68kde~1_294:
00841B80  434C 5200 11848          dc.b      67,76,82,0
                    11849   @m68kde~1_295:
00841B84  434D 5041 11850          dc.b      67,77,80,65,46,87,32,0
00841B88  2E57 2000 
                    11851   @m68kde~1_296:
00841B8C  434D 5041 11852          dc.b      67,77,80,65,46,76,32,0
00841B90  2E4C 2000 
                    11853   @m68kde~1_297:
00841B94  2C41 2564 11854          dc.b      44,65,37,100,0
00841B98  00        
                    11855   @m68kde~1_298:
00841B9A  434D 5000 11856          dc.b      67,77,80,0
                    11857   @m68kde~1_299:
00841B9E  434D 504D 11858          dc.b      67,77,80,77,0
00841BA2  00        
                    11859   @m68kde~1_300:
00841BA4  2841 2564 11860          dc.b      40,65,37,100,41,43,44,40,65,37,100,41,43,0
00841BA8  292B 2C28 
00841BAC  4125 6429 
00841BB0  2B00      
                    11861   @m68kde~1_301:
00841BB2  4442 00   11862          dc.b      68,66,0
                    11863   @m68kde~1_302:
00841BB6  4425 642C 11864          dc.b      68,37,100,44,37,43,100,40,80,67,41,32,116,111
00841BBA  252B 6428 
00841BBE  5043 2920 
00841BC2  746F      
00841BC4  2041 6464 11865          dc.b      32,65,100,100,114,58,36,37,88,0
00841BC8  723A 2425 
00841BCC  5800      
                    11866   @m68kde~1_303:
00841BCE  4449 5653 11867          dc.b      68,73,86,83,32,0
00841BD2  2000      
                    11868   @m68kde~1_304:
00841BD4  2C00      11869          dc.b      44,0
                    11870   @m68kde~1_305:
00841BD6  4449 5655 11871          dc.b      68,73,86,85,32,0
00841BDA  2000      
                    11872   @m68kde~1_306:
00841BDC  2C00      11873          dc.b      44,0
                    11874   @m68kde~1_307:
00841BDE  454F 5200 11875          dc.b      69,79,82,0
                    11876   @m68kde~1_308:
00841BE2  454F 5249 11877          dc.b      69,79,82,73,32,35,36,37,50,88,44,67,67,82,0
00841BE6  2023 2425 
00841BEA  3258 2C43 
00841BEE  4352 00   
                    11878   @m68kde~1_309:
00841BF2  454F 5249 11879          dc.b      69,79,82,73,32,35,36,37,88,44,83,82,0
00841BF6  2023 2425 
00841BFA  582C 5352 
00841BFE  00        
                    11880   @m68kde~1_310:
00841C00  4558 4720 11881          dc.b      69,88,71,32,68,37,100,44,68,37,100,0
00841C04  4425 642C 
00841C08  4425 6400 
                    11882   @m68kde~1_311:
00841C0C  4558 4720 11883          dc.b      69,88,71,32,65,37,100,44,65,37,100,0
00841C10  4125 642C 
00841C14  4125 6400 
                    11884   @m68kde~1_312:
00841C18  4558 4720 11885          dc.b      69,88,71,32,68,37,100,44,65,37,100,0
00841C1C  4425 642C 
00841C20  4125 6400 
                    11886   @m68kde~1_313:
00841C24  4558 5400 11887          dc.b      69,88,84,0
                    11888   @m68kde~1_314:
00841C28  2E4C 2000 11889          dc.b      46,76,32,0
                    11890   @m68kde~1_315:
00841C2C  2E57 2000 11891          dc.b      46,87,32,0
                    11892   @m68kde~1_316:
00841C30  494C 4C45 11893          dc.b      73,76,76,69,71,65,76,32,40,36,52,65,70,67,41
00841C34  4741 4C20 
00841C38  2824 3441 
00841C3C  4643 29   
00841C3F  00        11894          dc.b      0
                    11895   @m68kde~1_317:
00841C40  4A4D 5020 11896          dc.b      74,77,80,32,0
00841C44  00        
                    11897   @m68kde~1_318:
00841C46  4A53 5220 11898          dc.b      74,83,82,32,0
00841C4A  00        
                    11899   @m68kde~1_319:
00841C4C  4C45 4120 11900          dc.b      76,69,65,32,0
00841C50  00        
                    11901   @m68kde~1_320:
00841C52  2C41 2564 11902          dc.b      44,65,37,100,0
00841C56  00        
                    11903   @m68kde~1_321:
00841C58  4C49 4E4B 11904          dc.b      76,73,78,75,32,0
00841C5C  2000      
                    11905   @m68kde~1_322:
00841C5E  4125 642C 11906          dc.b      65,37,100,44,35,37,100,0
00841C62  2325 6400 
                    11907   @m68kde~1_323:
00841C66  4D4F 5645 11908          dc.b      77,79,86,69,46,66,32,0
00841C6A  2E42 2000 
                    11909   @m68kde~1_324:
00841C6E  4D4F 5645 11910          dc.b      77,79,86,69,46,76,32,0
00841C72  2E4C 2000 
                    11911   @m68kde~1_325:
00841C76  4D4F 5645 11912          dc.b      77,79,86,69,46,87,32,0
00841C7A  2E57 2000 
                    11913   @m68kde~1_326:
00841C7E  2C00      11914          dc.b      44,0
                    11915   @m68kde~1_327:
00841C80  4D4F 5645 11916          dc.b      77,79,86,69,32,0
00841C84  2000      
                    11917   @m68kde~1_328:
00841C86  2C43 4352 11918          dc.b      44,67,67,82,0
00841C8A  00        
                    11919   @m68kde~1_329:
00841C8C  4D4F 5645 11920          dc.b      77,79,86,69,32,83,82,44,0
00841C90  2053 522C 
00841C94  00        
                    11921   @m68kde~1_330:
00841C96  4D4F 5645 11922          dc.b      77,79,86,69,32,0
00841C9A  2000      
                    11923   @m68kde~1_331:
00841C9C  2C53 5200 11924          dc.b      44,83,82,0
                    11925   @m68kde~1_332:
00841CA0  4D4F 5645 11926          dc.b      77,79,86,69,32,85,83,80,44,65,37,100,0
00841CA4  2055 5350 
00841CA8  2C41 2564 
00841CAC  00        
                    11927   @m68kde~1_333:
00841CAE  4D4F 5645 11928          dc.b      77,79,86,69,32,65,37,100,44,85,83,80,0
00841CB2  2041 2564 
00841CB6  2C55 5350 
00841CBA  00        
                    11929   @m68kde~1_334:
00841CBC  4D4F 5645 11930          dc.b      77,79,86,69,77,0
00841CC0  4D00      
                    11931   @m68kde~1_335:
00841CC2  2E57 2000 11932          dc.b      46,87,32,0
                    11933   @m68kde~1_336:
00841CC6  2E4C 2000 11934          dc.b      46,76,32,0
                    11935   @m68kde~1_337:
00841CCA  00        11936          dc.b      0
                    11937   @m68kde~1_338:
00841CCC  4425 6400 11938          dc.b      68,37,100,0
                    11939   @m68kde~1_339:
00841CD0  2F44 2564 11940          dc.b      47,68,37,100,0
00841CD4  00        
                    11941   @m68kde~1_340:
00841CD6  4125 6400 11942          dc.b      65,37,100,0
                    11943   @m68kde~1_341:
00841CDA  2F41 2564 11944          dc.b      47,65,37,100,0
00841CDE  00        
                    11945   @m68kde~1_342:
00841CE0  2C00      11946          dc.b      44,0
                    11947   @m68kde~1_343:
00841CE2  2C00      11948          dc.b      44,0
                    11949   @m68kde~1_344:
00841CE4  4425 6400 11950          dc.b      68,37,100,0
                    11951   @m68kde~1_345:
00841CE8  2F44 2564 11952          dc.b      47,68,37,100,0
00841CEC  00        
                    11953   @m68kde~1_346:
00841CEE  4125 6400 11954          dc.b      65,37,100,0
                    11955   @m68kde~1_347:
00841CF2  2F41 2564 11956          dc.b      47,65,37,100,0
00841CF6  00        
                    11957   @m68kde~1_348:
00841CF8  4D4F 5645 11958          dc.b      77,79,86,69,80,46,87,32,36,37,88,40,65,37,100
00841CFC  502E 5720 
00841D00  2425 5828 
00841D04  4125 64   
00841D07  292C 4425 11959          dc.b      41,44,68,37,100,0
00841D0B  6400      
                    11960   @m68kde~1_349:
00841D0E  4D4F 5645 11961          dc.b      77,79,86,69,80,46,76,32,36,37,88,40,65,37,100
00841D12  502E 4C20 
00841D16  2425 5828 
00841D1A  4125 64   
00841D1D  292C 4425 11962          dc.b      41,44,68,37,100,0
00841D21  6400      
                    11963   @m68kde~1_350:
00841D24  4D4F 5645 11964          dc.b      77,79,86,69,80,46,87,32,68,37,100,44,36,37,88
00841D28  502E 5720 
00841D2C  4425 642C 
00841D30  2425 58   
00841D33  2841 2564 11965          dc.b      40,65,37,100,41,0
00841D37  2900      
                    11966   @m68kde~1_351:
00841D3A  4D4F 5645 11967          dc.b      77,79,86,69,80,46,76,32,68,37,100,44,36,37,88
00841D3E  502E 4C20 
00841D42  4425 642C 
00841D46  2425 58   
00841D49  2841 2564 11968          dc.b      40,65,37,100,41,0
00841D4D  2900      
                    11969   @m68kde~1_352:
00841D50  4D4F 5645 11970          dc.b      77,79,86,69,81,32,35,36,37,88,44,68,37,100,0
00841D54  5120 2324 
00841D58  2558 2C44 
00841D5C  2564 00   
                    11971   @m68kde~1_353:
00841D60  4D55 4C53 11972          dc.b      77,85,76,83,32,0
00841D64  2000      
                    11973   @m68kde~1_354:
00841D66  2C44 2564 11974          dc.b      44,68,37,100,0
00841D6A  00        
                    11975   @m68kde~1_355:
00841D6C  4D55 4C55 11976          dc.b      77,85,76,85,32,0
00841D70  2000      
                    11977   @m68kde~1_356:
00841D72  2C44 2564 11978          dc.b      44,68,37,100,0
00841D76  00        
                    11979   @m68kde~1_357:
00841D78  4E42 4344 11980          dc.b      78,66,67,68,32,0
00841D7C  2000      
                    11981   @m68kde~1_358:
00841D7E  4E45 4700 11982          dc.b      78,69,71,0
                    11983   @m68kde~1_359:
00841D82  4E45 4758 11984          dc.b      78,69,71,88,0
00841D86  00        
                    11985   @m68kde~1_360:
00841D88  4E4F 5000 11986          dc.b      78,79,80,0
                    11987   @m68kde~1_361:
00841D8C  4E4F 5400 11988          dc.b      78,79,84,0
                    11989   @m68kde~1_362:
00841D90  4F52 00   11990          dc.b      79,82,0
                    11991   @m68kde~1_363:
00841D94  4F52 4920 11992          dc.b      79,82,73,32,35,36,37,50,88,44,67,67,82,0
00841D98  2324 2532 
00841D9C  582C 4343 
00841DA0  5200      
                    11993   @m68kde~1_364:
00841DA2  4F52 4920 11994          dc.b      79,82,73,32,32,35,36,37,88,44,83,82,0
00841DA6  2023 2425 
00841DAA  582C 5352 
00841DAE  00        
                    11995   @m68kde~1_365:
00841DB0  5045 4120 11996          dc.b      80,69,65,32,0
00841DB4  00        
                    11997   @m68kde~1_366:
00841DB6  5245 5345 11998          dc.b      82,69,83,69,84,0
00841DBA  5400      
                    11999   @m68kde~1_367:
00841DBC  5254 4500 12000          dc.b      82,84,69,0
                    12001   @m68kde~1_368:
00841DC0  5254 5200 12002          dc.b      82,84,82,0
                    12003   @m68kde~1_369:
00841DC4  5254 5300 12004          dc.b      82,84,83,0
                    12005   @m68kde~1_370:
00841DC8  5354 4F50 12006          dc.b      83,84,79,80,32,35,36,37,88,0
00841DCC  2023 2425 
00841DD0  5800      
                    12007   @m68kde~1_371:
00841DD2  5342 4344 12008          dc.b      83,66,67,68,32,68,37,100,44,68,37,100,0
00841DD6  2044 2564 
00841DDA  2C44 2564 
00841DDE  00        
                    12009   @m68kde~1_372:
00841DE0  5342 4344 12010          dc.b      83,66,67,68,32,45,40,65,37,100,41,44,45,40,65
00841DE4  202D 2841 
00841DE8  2564 292C 
00841DEC  2D28 41   
00841DEF  2564 2900 12011          dc.b      37,100,41,0
                    12012   @m68kde~1_373:
00841DF4  5300      12013          dc.b      83,0
                    12014   @m68kde~1_374:
00841DF6  5355 4241 12015          dc.b      83,85,66,65,46,87,32,0
00841DFA  2E57 2000 
                    12016   @m68kde~1_375:
00841DFE  5355 4241 12017          dc.b      83,85,66,65,46,76,32,0
00841E02  2E4C 2000 
                    12018   @m68kde~1_376:
00841E06  2C41 2558 12019          dc.b      44,65,37,88,0
00841E0A  00        
                    12020   @m68kde~1_377:
00841E0C  5355 4200 12021          dc.b      83,85,66,0
                    12022   @m68kde~1_378:
00841E10  5355 4251 12023          dc.b      83,85,66,81,0
00841E14  00        
                    12024   @m68kde~1_379:
00841E16  2325 3158 12025          dc.b      35,37,49,88,44,0
00841E1A  2C00      
                    12026   @m68kde~1_380:
00841E1C  5355 4258 12027          dc.b      83,85,66,88,0
00841E20  00        
                    12028   @m68kde~1_381:
00841E22  4425 3158 12029          dc.b      68,37,49,88,44,68,37,49,88,0
00841E26  2C44 2531 
00841E2A  5800      
                    12030   @m68kde~1_382:
00841E2C  2D28 4125 12031          dc.b      45,40,65,37,49,88,41,44,45,40,65,37,49,88,41
00841E30  3158 292C 
00841E34  2D28 4125 
00841E38  3158 29   
00841E3B  00        12032          dc.b      0
                    12033   @m68kde~1_383:
00841E3C  5357 4150 12034          dc.b      83,87,65,80,32,68,37,100,0
00841E40  2044 2564 
00841E44  00        
                    12035   @m68kde~1_384:
00841E46  5441 5320 12036          dc.b      84,65,83,32,0
00841E4A  00        
                    12037   @m68kde~1_385:
00841E4C  5452 4150 12038          dc.b      84,82,65,80,32,35,37,100,0
00841E50  2023 2564 
00841E54  00        
                    12039   @m68kde~1_386:
00841E56  5452 4150 12040          dc.b      84,82,65,80,86,0
00841E5A  5600      
                    12041   @m68kde~1_387:
00841E5C  5453 5400 12042          dc.b      84,83,84,0
                    12043   @m68kde~1_388:
00841E60  554E 4C4B 12044          dc.b      85,78,76,75,32,65,37,100,0
00841E64  2041 2564 
00841E68  00        
          0000 0000

Assembly errors: 0
